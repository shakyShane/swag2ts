{
  "swagger": "2.0",
  "info": {
    "version": "2.3",
    "title": "Magento Community"
  },
  "host": "local.m2",
  "basePath": "/index.php/rest/all",
  "schemes": [
    "https"
  ],
  "tags": [
    {
      "name": "storeStoreRepositoryV1",
      "description": "Store repository interface"
    },
    {
      "name": "storeGroupRepositoryV1",
      "description": "Group repository interface"
    },
    {
      "name": "storeWebsiteRepositoryV1",
      "description": "Website repository interface"
    },
    {
      "name": "storeStoreConfigManagerV1",
      "description": "Store config manager interface"
    },
    {
      "name": "directoryCurrencyInformationAcquirerV1",
      "description": "Currency information acquirer interface"
    },
    {
      "name": "directoryCountryInformationAcquirerV1",
      "description": "Country information acquirer interface"
    },
    {
      "name": "backendModuleServiceV1",
      "description": "Interface for module service."
    },
    {
      "name": "eavAttributeSetRepositoryV1",
      "description": "Interface AttributeSetRepositoryInterface"
    },
    {
      "name": "eavAttributeSetManagementV1",
      "description": "Interface AttributeSetManagementInterface"
    },
    {
      "name": "customerGroupRepositoryV1",
      "description": "Customer group CRUD interface"
    },
    {
      "name": "customerGroupManagementV1",
      "description": "Interface for managing customer groups."
    },
    {
      "name": "customerCustomerGroupConfigV1",
      "description": "Interface for system configuration operations for customer groups."
    },
    {
      "name": "customerCustomerMetadataV1",
      "description": "Interface for retrieval information about customer attributes metadata."
    },
    {
      "name": "customerAddressMetadataV1",
      "description": "Interface for retrieval information about customer address attributes metadata."
    },
    {
      "name": "customerCustomerRepositoryV1",
      "description": "Customer CRUD interface."
    },
    {
      "name": "customerAccountManagementV1",
      "description": "Interface for managing customers accounts."
    },
    {
      "name": "customerAddressRepositoryV1",
      "description": "Customer address CRUD interface."
    },
    {
      "name": "searchV1",
      "description": "Search API for all requests"
    },
    {
      "name": "cmsPageRepositoryV1",
      "description": "CMS page CRUD interface."
    },
    {
      "name": "cmsBlockRepositoryV1",
      "description": "CMS block CRUD interface."
    },
    {
      "name": "catalogProductRepositoryV1",
      "description": ""
    },
    {
      "name": "catalogProductAttributeTypesListV1",
      "description": ""
    },
    {
      "name": "catalogProductAttributeRepositoryV1",
      "description": "Interface RepositoryInterface must be implemented in new model"
    },
    {
      "name": "catalogCategoryAttributeRepositoryV1",
      "description": "Interface RepositoryInterface must be implemented in new model"
    },
    {
      "name": "catalogCategoryAttributeOptionManagementV1",
      "description": "Interface RepositoryInterface must be implemented in new model"
    },
    {
      "name": "catalogProductTypeListV1",
      "description": ""
    },
    {
      "name": "catalogAttributeSetRepositoryV1",
      "description": ""
    },
    {
      "name": "catalogAttributeSetManagementV1",
      "description": ""
    },
    {
      "name": "catalogProductAttributeManagementV1",
      "description": ""
    },
    {
      "name": "catalogProductAttributeGroupRepositoryV1",
      "description": ""
    },
    {
      "name": "catalogProductAttributeOptionManagementV1",
      "description": ""
    },
    {
      "name": "catalogProductMediaAttributeManagementV1",
      "description": ""
    },
    {
      "name": "catalogProductAttributeMediaGalleryManagementV1",
      "description": ""
    },
    {
      "name": "catalogProductTierPriceManagementV1",
      "description": ""
    },
    {
      "name": "catalogTierPriceStorageV1",
      "description": "Tier prices storage."
    },
    {
      "name": "catalogBasePriceStorageV1",
      "description": "Base prices storage."
    },
    {
      "name": "catalogCostStorageV1",
      "description": "Product cost storage."
    },
    {
      "name": "catalogSpecialPriceStorageV1",
      "description": "Special price storage presents efficient price API and is used to retrieve, update or delete special prices."
    },
    {
      "name": "catalogCategoryRepositoryV1",
      "description": ""
    },
    {
      "name": "catalogCategoryManagementV1",
      "description": ""
    },
    {
      "name": "catalogCategoryListV1",
      "description": ""
    },
    {
      "name": "catalogProductCustomOptionTypeListV1",
      "description": ""
    },
    {
      "name": "catalogProductCustomOptionRepositoryV1",
      "description": ""
    },
    {
      "name": "catalogProductLinkTypeListV1",
      "description": ""
    },
    {
      "name": "catalogProductLinkManagementV1",
      "description": ""
    },
    {
      "name": "catalogProductLinkRepositoryV1",
      "description": "Interface Product links handling interface"
    },
    {
      "name": "catalogCategoryLinkManagementV1",
      "description": ""
    },
    {
      "name": "catalogCategoryLinkRepositoryV1",
      "description": ""
    },
    {
      "name": "catalogProductWebsiteLinkRepositoryV1",
      "description": "Interface ProductWebsiteLinkRepositoryInterface"
    },
    {
      "name": "catalogProductRenderListV1",
      "description": "Interface which provides product renders information for products."
    },
    {
      "name": "quoteCartRepositoryV1",
      "description": "Interface CartRepositoryInterface"
    },
    {
      "name": "quoteCartManagementV1",
      "description": "Interface CartManagementInterface"
    },
    {
      "name": "quoteGuestCartRepositoryV1",
      "description": "Cart Repository interface for guest carts."
    },
    {
      "name": "quoteGuestCartManagementV1",
      "description": "Cart Management interface for guest carts."
    },
    {
      "name": "quoteShippingMethodManagementV1",
      "description": "Interface ShippingMethodManagementInterface"
    },
    {
      "name": "quoteShipmentEstimationV1",
      "description": "Interface ShipmentManagementInterface"
    },
    {
      "name": "quoteGuestShippingMethodManagementV1",
      "description": "Shipping method management interface for guest carts."
    },
    {
      "name": "quoteGuestShipmentEstimationV1",
      "description": "Interface GuestShipmentEstimationInterface"
    },
    {
      "name": "quoteCartItemRepositoryV1",
      "description": "Interface CartItemRepositoryInterface"
    },
    {
      "name": "quoteGuestCartItemRepositoryV1",
      "description": "Cart Item repository interface for guest carts."
    },
    {
      "name": "quotePaymentMethodManagementV1",
      "description": "Interface PaymentMethodManagementInterface"
    },
    {
      "name": "quoteGuestPaymentMethodManagementV1",
      "description": "Payment method management interface for guest carts."
    },
    {
      "name": "quoteBillingAddressManagementV1",
      "description": "Interface BillingAddressManagementInterface"
    },
    {
      "name": "quoteGuestBillingAddressManagementV1",
      "description": "Billing address management interface for guest carts."
    },
    {
      "name": "quoteCouponManagementV1",
      "description": "Coupon management service interface."
    },
    {
      "name": "quoteGuestCouponManagementV1",
      "description": "Coupon management interface for guest carts."
    },
    {
      "name": "quoteCartTotalRepositoryV1",
      "description": "Interface CartTotalRepositoryInterface"
    },
    {
      "name": "quoteGuestCartTotalManagementV1",
      "description": "Bundled API to collect totals for cart based on shipping/payment methods and additional data."
    },
    {
      "name": "quoteGuestCartTotalRepositoryV1",
      "description": "Cart totals repository interface for guest carts."
    },
    {
      "name": "quoteCartTotalManagementV1",
      "description": "Bundled API to collect totals for cart based on shipping/payment methods and additional data."
    },
    {
      "name": "catalogInventoryStockRegistryV1",
      "description": "Interface StockRegistryInterface"
    },
    {
      "name": "bundleProductLinkManagementV1",
      "description": "Interface for Management of ProductLink"
    },
    {
      "name": "bundleProductOptionRepositoryV1",
      "description": "Interface ProductOptionRepositoryInterface"
    },
    {
      "name": "bundleProductOptionTypeListV1",
      "description": "Interface ProductOptionTypeListInterface"
    },
    {
      "name": "bundleProductOptionManagementV1",
      "description": "Option manager for bundle products"
    },
    {
      "name": "salesOrderRepositoryV1",
      "description": "Order repository interface. An order is a document that a web store issues to a customer. Magento generates a sales order that lists the product items, billing and shipping addresses, and shipping and payment methods. A corresponding external document, known as a purchase order, is emailed to the customer."
    },
    {
      "name": "salesOrderManagementV1",
      "description": "Order management interface. An order is a document that a web store issues to a customer. Magento generates a sales order that lists the product items, billing and shipping addresses, and shipping and payment methods. A corresponding external document, known as a purchase order, is emailed to the customer."
    },
    {
      "name": "salesOrderAddressRepositoryV1",
      "description": "Order address repository interface. An order is a document that a web store issues to a customer. Magento generates a sales order that lists the product items, billing and shipping addresses, and shipping and payment methods. A corresponding external document, known as a purchase order, is emailed to the customer."
    },
    {
      "name": "salesOrderItemRepositoryV1",
      "description": "Order item repository interface. An order is a document that a web store issues to a customer. Magento generates a sales order that lists the product items, billing and shipping addresses, and shipping and payment methods. A corresponding external document, known as a purchase order, is emailed to the customer."
    },
    {
      "name": "salesInvoiceRepositoryV1",
      "description": "Invoice repository interface. An invoice is a record of the receipt of payment for an order."
    },
    {
      "name": "salesInvoiceManagementV1",
      "description": "Invoice management interface. An invoice is a record of the receipt of payment for an order."
    },
    {
      "name": "salesInvoiceCommentRepositoryV1",
      "description": "Invoice comment repository interface. An invoice is a record of the receipt of payment for an order. An invoice can include comments that detail the invoice history."
    },
    {
      "name": "salesRefundInvoiceV1",
      "description": "Interface RefundInvoiceInterface"
    },
    {
      "name": "salesCreditmemoManagementV1",
      "description": "Credit memo add comment interface. After a customer places and pays for an order and an invoice has been issued, the merchant can create a credit memo to refund all or part of the amount paid for any returned or undelivered items. The memo restores funds to the customer account so that the customer can make future purchases."
    },
    {
      "name": "salesCreditmemoRepositoryV1",
      "description": "Credit memo repository interface. After a customer places and pays for an order and an invoice has been issued, the merchant can create a credit memo to refund all or part of the amount paid for any returned or undelivered items. The memo restores funds to the customer account so that the customer can make future purchases."
    },
    {
      "name": "salesCreditmemoCommentRepositoryV1",
      "description": "Credit memo comment repository interface. After a customer places and pays for an order and an invoice has been issued, the merchant can create a credit memo to refund all or part of the amount paid for any returned or undelivered items. The memo restores funds to the customer account so that the customer can make future purchases. A credit memo usually includes comments that detail why the credit memo amount was credited to the customer."
    },
    {
      "name": "salesRefundOrderV1",
      "description": "Interface RefundOrderInterface"
    },
    {
      "name": "salesShipmentRepositoryV1",
      "description": "Shipment repository interface. A shipment is a delivery package that contains products. A shipment document accompanies the shipment. This document lists the products and their quantities in the delivery package."
    },
    {
      "name": "salesShipmentManagementV1",
      "description": "Shipment management interface. A shipment is a delivery package that contains products. A shipment document accompanies the shipment. This document lists the products and their quantities in the delivery package."
    },
    {
      "name": "salesShipmentCommentRepositoryV1",
      "description": "Shipment comment repository interface. A shipment is a delivery package that contains products. A shipment document accompanies the shipment. This document lists the products and their quantities in the delivery package. A shipment document can contain comments."
    },
    {
      "name": "salesShipmentTrackRepositoryV1",
      "description": "Shipment track repository interface. A shipment is a delivery package that contains products. A shipment document accompanies the shipment. This document lists the products and their quantities in the delivery package."
    },
    {
      "name": "salesShipOrderV1",
      "description": "Class ShipOrderInterface"
    },
    {
      "name": "salesTransactionRepositoryV1",
      "description": "Transaction repository interface. A transaction is an interaction between a merchant and a customer such as a purchase, a credit, a refund, and so on."
    },
    {
      "name": "salesInvoiceOrderV1",
      "description": "Class InvoiceOrderInterface"
    },
    {
      "name": "checkoutGuestShippingInformationManagementV1",
      "description": "Interface for managing guest shipping address information"
    },
    {
      "name": "checkoutShippingInformationManagementV1",
      "description": "Interface for managing customer shipping address information"
    },
    {
      "name": "checkoutTotalsInformationManagementV1",
      "description": "Interface for quote totals calculation"
    },
    {
      "name": "checkoutGuestTotalsInformationManagementV1",
      "description": "Interface for guest quote totals calculation"
    },
    {
      "name": "checkoutGuestPaymentInformationManagementV1",
      "description": "Interface for managing guest payment information"
    },
    {
      "name": "checkoutPaymentInformationManagementV1",
      "description": "Interface for managing quote payment information"
    },
    {
      "name": "downloadableLinkRepositoryV1",
      "description": "Interface LinkRepositoryInterface"
    },
    {
      "name": "downloadableSampleRepositoryV1",
      "description": "Interface SampleRepositoryInterface"
    },
    {
      "name": "configurableProductLinkManagementV1",
      "description": "Manage children products of configurable product"
    },
    {
      "name": "configurableProductConfigurableProductManagementV1",
      "description": "Interface ConfigurableProductManagementInterface"
    },
    {
      "name": "configurableProductOptionRepositoryV1",
      "description": "Manage options of configurable product"
    },
    {
      "name": "integrationAdminTokenServiceV1",
      "description": "Interface providing token generation for Admins"
    },
    {
      "name": "integrationCustomerTokenServiceV1",
      "description": "Interface providing token generation for Customers"
    },
    {
      "name": "asynchronousOperationsBulkStatusV1",
      "description": "Interface BulkStatusInterface. Bulk summary data with list of operations items short data."
    },
    {
      "name": "asynchronousOperationsOperationRepositoryV1",
      "description": "Bulk operation item repository interface. An bulk is a group of queue messages. An bulk operation item is a queue message."
    },
    {
      "name": "taxTaxRateRepositoryV1",
      "description": "Tax rate CRUD interface."
    },
    {
      "name": "taxTaxRuleRepositoryV1",
      "description": "Tax rule CRUD interface."
    },
    {
      "name": "taxTaxClassRepositoryV1",
      "description": "Tax class CRUD interface."
    },
    {
      "name": "giftMessageCartRepositoryV1",
      "description": "Interface CartRepositoryInterface"
    },
    {
      "name": "giftMessageItemRepositoryV1",
      "description": "Interface ItemRepositoryInterface"
    },
    {
      "name": "giftMessageGuestCartRepositoryV1",
      "description": "Interface GuestCartRepositoryInterface"
    },
    {
      "name": "giftMessageGuestItemRepositoryV1",
      "description": "Interface GuestItemRepositoryInterface"
    },
    {
      "name": "analyticsLinkProviderV1",
      "description": "Provides link to file with collected report data."
    },
    {
      "name": "inventoryApiSourceRepositoryV1",
      "description": "In Magento 2 Repository considered as an implementation of Facade pattern which provides a simplified interface to a larger body of code responsible for Domain Entity management The main intention is to make API more readable and reduce dependencies of business logic code on the inner workings of a module, since most code uses the facade, thus allowing more flexibility in developing the system Along with this such approach helps to segregate two responsibilities: 1. Repository now could be considered as an API - Interface for usage (calling) in the business logic 2. Separate class-commands to which Repository proxies initial call (like, Get Save GetList Delete) could be    considered as SPI - Interfaces that you should extend and implement to customize current behaviour There is no delete method. It is related to that Source can't be deleted due to we don't want miss data related to Sources (like as order information). But Source can be disabled Used fully qualified namespaces in annotations for proper work of WebApi request parser"
    },
    {
      "name": "inventoryApiGetSourcesAssignedToStockOrderedByPriorityV1",
      "description": "Retrieve sources related to current stock ordered by priority Used fully qualified namespaces in annotations for proper work of WebApi request parser"
    },
    {
      "name": "inventoryApiStockRepositoryV1",
      "description": "In Magento 2 Repository considered as an implementation of Facade pattern which provides a simplified interface to a larger body of code responsible for Domain Entity management The main intention is to make API more readable and reduce dependencies of business logic code on the inner workings of a module, since most code uses the facade, thus allowing more flexibility in developing the system Along with this such approach helps to segregate two responsibilities: 1. Repository now could be considered as an API - Interface for usage (calling) in the business logic 2. Separate class-commands to which Repository proxies initial call (like, Get Save GetList Delete) could be    considered as SPI - Interfaces that you should extend and implement to customize current behaviour Used fully qualified namespaces in annotations for proper work of WebApi request parser"
    },
    {
      "name": "inventoryApiGetStockSourceLinksV1",
      "description": "Find StockSourceLink list by SearchCriteria API Used fully qualified namespaces in annotations for proper work of WebApi request parser"
    },
    {
      "name": "inventoryApiStockSourceLinksSaveV1",
      "description": "Service method for stock source links save multiple Performance efficient API Used fully qualified namespaces in annotations for proper work of WebApi request parser"
    },
    {
      "name": "inventoryApiStockSourceLinksDeleteV1",
      "description": "Service method for stock source links delete multiple Performance efficient API Used fully qualified namespaces in annotations for proper work of WebApi request parser"
    },
    {
      "name": "inventoryApiSourceItemRepositoryV1",
      "description": "In Magento 2 Repository considered as an implementation of Facade pattern which provides a simplified interface to a larger body of code responsible for Domain Entity management The main intention is to make API more readable and reduce dependencies of business logic code on the inner workings of a module, since most code uses the facade, thus allowing more flexibility in developing the system Along with this such approach helps to segregate two responsibilities: 1. Repository now could be considered as an API - Interface for usage (calling) in the business logic 2. Separate class-commands to which Repository proxies initial call (like, Get Save GetList Delete) could be    considered as SPI - Interfaces that you should extend and implement to customize current behaviour The method save is absent, due to different semantic (save multiple)"
    },
    {
      "name": "inventoryApiSourceItemsSaveV1",
      "description": "Service method for source items save multiple Performance efficient API Used fully qualified namespaces in annotations for proper work of WebApi request parser"
    },
    {
      "name": "inventoryApiSourceItemsDeleteV1",
      "description": "Service method for source items delete multiple Performance efficient API Used fully qualified namespaces in annotations for proper work of WebApi request parser"
    },
    {
      "name": "inventoryCatalogApiBulkSourceAssignV1",
      "description": "Perform bulk product source assignment"
    },
    {
      "name": "inventoryCatalogApiBulkSourceUnassignV1",
      "description": "Perform bulk product source un-assignment"
    },
    {
      "name": "inventoryCatalogApiBulkInventoryTransferV1",
      "description": "Perform bulk product inventory transfer"
    },
    {
      "name": "inventoryCatalogApiBulkPartialInventoryTransferV1",
      "description": "Transfer Inventory between sources. Moves specified items from origin source to destination source."
    },
    {
      "name": "inventoryDistanceBasedSourceSelectionApiGetDistanceProviderCodeV1",
      "description": "Get selected distance provider code"
    },
    {
      "name": "inventoryDistanceBasedSourceSelectionApiGetDistanceV1",
      "description": "Get distance between two LatLngRequest points"
    },
    {
      "name": "inventoryDistanceBasedSourceSelectionApiGetLatLngFromAddressV1",
      "description": "Get latitude and longitude object from address"
    },
    {
      "name": "inventoryExportStockApiExportStockSalableQtyV1",
      "description": "Interface for ExportStockSalableQty provides product's salable qty information by search criteria"
    },
    {
      "name": "inventoryExportStockApiExportStockIndexDataV1",
      "description": "Class ExportStockIndexData provides stock index export based on raw data contained in the stock index."
    },
    {
      "name": "inventorySalesApiGetProductSalableQtyV1",
      "description": "Service which returns Quantity of products available to be sold by Product SKU and Stock Id. This service calculates the salable qty taking into account existing reservations for given sku and stock id and subtracting min qty (a.k.a. \"Out-of-Stock Threshold\")"
    },
    {
      "name": "inventorySalesApiIsProductSalableV1",
      "description": "Service which detects whether Product is salable for a given Stock (stock data + reservations)"
    },
    {
      "name": "inventorySalesApiIsProductSalableForRequestedQtyV1",
      "description": "Service which detects whether a certain Qty of Product is salable for a given Stock (stock data + reservations)"
    },
    {
      "name": "inventorySalesApiStockResolverV1",
      "description": "The stock resolver is responsible for getting the linked stock for a certain sales channel"
    },
    {
      "name": "inventoryLowQuantityNotificationApiGetSourceItemConfigurationV1",
      "description": "Get the source item configuration Firstly try to load Source Item configuration if configuration isn't exist then load global configuration value Used fully qualified namespaces in annotations for proper work of WebApi request parser"
    },
    {
      "name": "inventoryLowQuantityNotificationApiSourceItemConfigurationsSaveV1",
      "description": "Save the source item configuration Used fully qualified namespaces in annotations for proper work of WebApi request parser"
    },
    {
      "name": "inventoryLowQuantityNotificationApiDeleteSourceItemsConfigurationV1",
      "description": "Delete the source item configuration"
    },
    {
      "name": "inventorySourceSelectionApiGetSourceSelectionAlgorithmListV1",
      "description": "Returns the list of Data Interfaces which represent registered SSA in the system"
    },
    {
      "name": "inventorySourceSelectionApiSourceSelectionServiceV1",
      "description": "Returns source selection algorithm result for given Inventory Request"
    },
    {
      "name": "salesRuleRuleRepositoryV1",
      "description": "Sales rule CRUD interface"
    },
    {
      "name": "salesRuleCouponRepositoryV1",
      "description": "Coupon CRUD interface"
    },
    {
      "name": "salesRuleCouponManagementV1",
      "description": "Coupon management interface"
    },
    {
      "name": "checkoutAgreementsCheckoutAgreementsRepositoryV1",
      "description": "Interface CheckoutAgreementsRepositoryInterface"
    },
    {
      "name": "checkoutAgreementsCheckoutAgreementsListV1",
      "description": "Interface for retrieving list of checkout agreements. Extended variation of CheckoutAgreementsRepositoryInterface::getList with possibility to get results according search filters without predefined limitations."
    },
    {
      "name": "amazonPaymentAddressManagementV1",
      "description": ""
    },
    {
      "name": "amazonPaymentOrderInformationManagementV1",
      "description": ""
    },
    {
      "name": "\\MSPTwoFactorAuthTfaV1",
      "description": ""
    },
    {
      "name": "\\MSPTwoFactorAuthTrustedManagerV1",
      "description": ""
    },
    {
      "name": "\\MSPTwoFactorAuthUserConfigManagerV1",
      "description": ""
    },
    {
      "name": "temandoShippingQuoteCartDeliveryOptionManagementV1",
      "description": "CartDeliveryOptionManagementInterface"
    },
    {
      "name": "temandoShippingQuoteGuestCartDeliveryOptionManagementV1",
      "description": "GuestCartDeliveryOptionManagementInterface"
    },
    {
      "name": "temandoShippingRmaRmaShipmentManagementV1",
      "description": "Manage RMA Shipments"
    },
    {
      "name": "temandoShippingCheckoutGuestCartCollectionPointManagementV1",
      "description": "Process \"collection point\" delivery option (guest checkout)."
    },
    {
      "name": "temandoShippingDeliveryGuestCartCollectionPointManagementV1",
      "description": "Process Collection Point Search (Guest Checkout)"
    },
    {
      "name": "temandoShippingCheckoutCartCollectionPointManagementV1",
      "description": "Process \"collection point\" delivery option."
    },
    {
      "name": "temandoShippingDeliveryCartCollectionPointManagementV1",
      "description": "Process Collection Point Search"
    },
    {
      "name": "temandoShippingQuoteGuestCartCheckoutFieldManagementV1",
      "description": "Interface GuestCartCheckoutFieldManagementInterface Persist value-added services as selected during guest checkout."
    },
    {
      "name": "temandoShippingQuoteCartCheckoutFieldManagementV1",
      "description": "Interface CartCheckoutFieldManagementInterface Persist value-added services as selected during logged-in checkout."
    },
    {
      "name": "temandoShippingCheckoutGuestCartPickupLocationManagementV1",
      "description": "Process \"pickup location\" delivery option (guest checkout)."
    },
    {
      "name": "temandoShippingDeliveryGuestCartPickupLocationManagementV1",
      "description": ""
    },
    {
      "name": "temandoShippingCheckoutCartPickupLocationManagementV1",
      "description": "Process \"pickup location\" delivery option."
    },
    {
      "name": "temandoShippingDeliveryCartPickupLocationManagementV1",
      "description": ""
    },
    {
      "name": "temandoShippingAttributeMappingProductManagementV1",
      "description": "Process product attribute mappings."
    }
  ],
  "paths": {
    "/V1/store/storeViews": {
      "get": {
        "tags": [
          "storeStoreRepositoryV1"
        ],
        "description": "Retrieve list of all stores",
        "operationId": "storeStoreRepositoryV1GetListGet",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/store-data-store-interface"
              }
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/store/storeGroups": {
      "get": {
        "tags": [
          "storeGroupRepositoryV1"
        ],
        "description": "Retrieve list of all groups",
        "operationId": "storeGroupRepositoryV1GetListGet",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/store-data-group-interface"
              }
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/store/websites": {
      "get": {
        "tags": [
          "storeWebsiteRepositoryV1"
        ],
        "description": "Retrieve list of all websites",
        "operationId": "storeWebsiteRepositoryV1GetListGet",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/store-data-website-interface"
              }
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/store/storeConfigs": {
      "get": {
        "tags": [
          "storeStoreConfigManagerV1"
        ],
        "description": "",
        "operationId": "storeStoreConfigManagerV1GetStoreConfigsGet",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "storeCodes",
            "in": "query",
            "type": "array",
            "items": {
              "type": "string"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/store-data-store-config-interface"
              }
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/directory/currency": {
      "get": {
        "tags": [
          "directoryCurrencyInformationAcquirerV1"
        ],
        "description": "Get currency information for the store.",
        "operationId": "directoryCurrencyInformationAcquirerV1GetCurrencyInfoGet",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/directory-data-currency-information-interface"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/directory/countries": {
      "get": {
        "tags": [
          "directoryCountryInformationAcquirerV1"
        ],
        "description": "Get all countries and regions information for the store.",
        "operationId": "directoryCountryInformationAcquirerV1GetCountriesInfoGet",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/directory-data-country-information-interface"
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/directory/countries/{countryId}": {
      "get": {
        "tags": [
          "directoryCountryInformationAcquirerV1"
        ],
        "description": "Get country and region information for the store.",
        "operationId": "directoryCountryInformationAcquirerV1GetCountryInfoGet",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "countryId",
            "in": "path",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/directory-data-country-information-interface"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/modules": {
      "get": {
        "tags": [
          "backendModuleServiceV1"
        ],
        "description": "Returns an array of enabled modules",
        "operationId": "backendModuleServiceV1GetModulesGet",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/eav/attribute-sets/list": {
      "get": {
        "tags": [
          "eavAttributeSetRepositoryV1"
        ],
        "description": "Retrieve list of Attribute Sets This call returns an array of objects, but detailed information about each object’s attributes might not be included. See https://devdocs.magento.com/codelinks/attributes.html#AttributeSetRepositoryInterface to determine which call to use to get detailed information about all attributes for an object.",
        "operationId": "eavAttributeSetRepositoryV1GetListGet",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "searchCriteria[filterGroups][0][filters][0][field]",
            "in": "query",
            "type": "string",
            "description": "Field"
          },
          {
            "name": "searchCriteria[filterGroups][0][filters][0][value]",
            "in": "query",
            "type": "string",
            "description": "Value"
          },
          {
            "name": "searchCriteria[filterGroups][0][filters][0][conditionType]",
            "in": "query",
            "type": "string",
            "description": "Condition type"
          },
          {
            "name": "searchCriteria[sortOrders][0][field]",
            "in": "query",
            "type": "string",
            "description": "Sorting field."
          },
          {
            "name": "searchCriteria[sortOrders][0][direction]",
            "in": "query",
            "type": "string",
            "description": "Sorting direction."
          },
          {
            "name": "searchCriteria[pageSize]",
            "in": "query",
            "type": "integer",
            "description": "Page size."
          },
          {
            "name": "searchCriteria[currentPage]",
            "in": "query",
            "type": "integer",
            "description": "Current page."
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/eav-data-attribute-set-search-results-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/eav/attribute-sets/{attributeSetId}": {
      "get": {
        "tags": [
          "eavAttributeSetRepositoryV1"
        ],
        "description": "Retrieve attribute set information based on given ID",
        "operationId": "eavAttributeSetRepositoryV1GetGet",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "attributeSetId",
            "in": "path",
            "type": "integer",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/eav-data-attribute-set-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "eavAttributeSetRepositoryV1"
        ],
        "description": "Remove attribute set by given ID",
        "operationId": "eavAttributeSetRepositoryV1DeleteByIdDelete",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "attributeSetId",
            "in": "path",
            "type": "integer",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "boolean"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      },
      "put": {
        "tags": [
          "eavAttributeSetRepositoryV1"
        ],
        "description": "Save attribute set data",
        "operationId": "eavAttributeSetRepositoryV1SavePut",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "attributeSetId",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "eavAttributeSetRepositoryV1SavePutBody",
            "in": "body",
            "schema": {
              "required": [
                "attributeSet"
              ],
              "properties": {
                "attributeSet": {
                  "$ref": "#/definitions/eav-data-attribute-set-interface"
                }
              },
              "type": "object",
              "xml": {
                "name": "request"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/eav-data-attribute-set-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "500": {
            "description": "Internal Server error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/eav/attribute-sets": {
      "post": {
        "tags": [
          "eavAttributeSetManagementV1"
        ],
        "description": "Create attribute set from data",
        "operationId": "eavAttributeSetManagementV1CreatePost",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "eavAttributeSetManagementV1CreatePostBody",
            "in": "body",
            "schema": {
              "required": [
                "entityTypeCode",
                "attributeSet",
                "skeletonId"
              ],
              "properties": {
                "entityTypeCode": {
                  "type": "string"
                },
                "attributeSet": {
                  "$ref": "#/definitions/eav-data-attribute-set-interface"
                },
                "skeletonId": {
                  "type": "integer"
                }
              },
              "type": "object",
              "xml": {
                "name": "request"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/eav-data-attribute-set-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/customerGroups/{id}": {
      "get": {
        "tags": [
          "customerGroupRepositoryV1"
        ],
        "description": "Get customer group by group ID.",
        "operationId": "customerGroupRepositoryV1GetByIdGet",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "integer",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/customer-data-group-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "500": {
            "description": "Internal Server error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      },
      "put": {
        "tags": [
          "customerGroupRepositoryV1"
        ],
        "description": "Save customer group.",
        "operationId": "customerGroupRepositoryV1SavePut",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "customerGroupRepositoryV1SavePutBody",
            "in": "body",
            "schema": {
              "required": [
                "group"
              ],
              "properties": {
                "group": {
                  "$ref": "#/definitions/customer-data-group-interface"
                }
              },
              "type": "object",
              "xml": {
                "name": "request"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/customer-data-group-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "500": {
            "description": "Internal Server error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "customerGroupRepositoryV1"
        ],
        "description": "Delete customer group by ID.",
        "operationId": "customerGroupRepositoryV1DeleteByIdDelete",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "integer",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "boolean",
              "description": "true on success"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "500": {
            "description": "Internal Server error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/customerGroups/search": {
      "get": {
        "tags": [
          "customerGroupRepositoryV1"
        ],
        "description": "Retrieve customer groups. The list of groups can be filtered to exclude the NOT_LOGGED_IN group using the first parameter and/or it can be filtered by tax class. This call returns an array of objects, but detailed information about each object’s attributes might not be included. See https://devdocs.magento.com/codelinks/attributes.html#GroupRepositoryInterface to determine which call to use to get detailed information about all attributes for an object.",
        "operationId": "customerGroupRepositoryV1GetListGet",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "searchCriteria[filterGroups][0][filters][0][field]",
            "in": "query",
            "type": "string",
            "description": "Field"
          },
          {
            "name": "searchCriteria[filterGroups][0][filters][0][value]",
            "in": "query",
            "type": "string",
            "description": "Value"
          },
          {
            "name": "searchCriteria[filterGroups][0][filters][0][conditionType]",
            "in": "query",
            "type": "string",
            "description": "Condition type"
          },
          {
            "name": "searchCriteria[sortOrders][0][field]",
            "in": "query",
            "type": "string",
            "description": "Sorting field."
          },
          {
            "name": "searchCriteria[sortOrders][0][direction]",
            "in": "query",
            "type": "string",
            "description": "Sorting direction."
          },
          {
            "name": "searchCriteria[pageSize]",
            "in": "query",
            "type": "integer",
            "description": "Page size."
          },
          {
            "name": "searchCriteria[currentPage]",
            "in": "query",
            "type": "integer",
            "description": "Current page."
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/customer-data-group-search-results-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "500": {
            "description": "Internal Server error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/customerGroups": {
      "post": {
        "tags": [
          "customerGroupRepositoryV1"
        ],
        "description": "Save customer group.",
        "operationId": "customerGroupRepositoryV1SavePost",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "customerGroupRepositoryV1SavePostBody",
            "in": "body",
            "schema": {
              "required": [
                "group"
              ],
              "properties": {
                "group": {
                  "$ref": "#/definitions/customer-data-group-interface"
                }
              },
              "type": "object",
              "xml": {
                "name": "request"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/customer-data-group-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "500": {
            "description": "Internal Server error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/customerGroups/default/{storeId}": {
      "get": {
        "tags": [
          "customerGroupManagementV1"
        ],
        "description": "Get default customer group.",
        "operationId": "customerGroupManagementV1GetDefaultGroupGet",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "storeId",
            "in": "path",
            "type": "integer",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/customer-data-group-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "500": {
            "description": "Internal Server error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/customerGroups/default": {
      "get": {
        "tags": [
          "customerGroupManagementV1"
        ],
        "description": "Get default customer group.",
        "operationId": "customerGroupManagementV1GetDefaultGroupGet",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "storeId",
            "in": "query",
            "type": "integer",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/customer-data-group-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "500": {
            "description": "Internal Server error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/customerGroups/{id}/permissions": {
      "get": {
        "tags": [
          "customerGroupManagementV1"
        ],
        "description": "Check if customer group can be deleted.",
        "operationId": "customerGroupManagementV1IsReadonlyGet",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "integer",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "boolean"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "500": {
            "description": "Internal Server error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/customerGroups/default/{id}": {
      "put": {
        "tags": [
          "customerCustomerGroupConfigV1"
        ],
        "description": "Set system default customer group.",
        "operationId": "customerCustomerGroupConfigV1SetDefaultCustomerGroupPut",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "integer",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "integer"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "500": {
            "description": "Internal Server error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/attributeMetadata/customer/attribute/{attributeCode}": {
      "get": {
        "tags": [
          "customerCustomerMetadataV1"
        ],
        "description": "Retrieve attribute metadata.",
        "operationId": "customerCustomerMetadataV1GetAttributeMetadataGet",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "attributeCode",
            "in": "path",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/customer-data-attribute-metadata-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "500": {
            "description": "Internal Server error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/attributeMetadata/customer/form/{formCode}": {
      "get": {
        "tags": [
          "customerCustomerMetadataV1"
        ],
        "description": "Retrieve all attributes filtered by form code",
        "operationId": "customerCustomerMetadataV1GetAttributesGet",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "formCode",
            "in": "path",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/customer-data-attribute-metadata-interface"
              }
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "500": {
            "description": "Internal Server error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/attributeMetadata/customer": {
      "get": {
        "tags": [
          "customerCustomerMetadataV1"
        ],
        "description": "Get all attribute metadata.",
        "operationId": "customerCustomerMetadataV1GetAllAttributesMetadataGet",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/customer-data-attribute-metadata-interface"
              }
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "500": {
            "description": "Internal Server error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/attributeMetadata/customer/custom": {
      "get": {
        "tags": [
          "customerCustomerMetadataV1"
        ],
        "description": "Get custom attributes metadata for the given data interface.",
        "operationId": "customerCustomerMetadataV1GetCustomAttributesMetadataGet",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "dataInterfaceName",
            "in": "query",
            "type": "string",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/customer-data-attribute-metadata-interface"
              }
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "500": {
            "description": "Internal Server error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/attributeMetadata/customerAddress/attribute/{attributeCode}": {
      "get": {
        "tags": [
          "customerAddressMetadataV1"
        ],
        "description": "Retrieve attribute metadata.",
        "operationId": "customerAddressMetadataV1GetAttributeMetadataGet",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "attributeCode",
            "in": "path",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/customer-data-attribute-metadata-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "500": {
            "description": "Internal Server error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/attributeMetadata/customerAddress/form/{formCode}": {
      "get": {
        "tags": [
          "customerAddressMetadataV1"
        ],
        "description": "Retrieve all attributes filtered by form code",
        "operationId": "customerAddressMetadataV1GetAttributesGet",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "formCode",
            "in": "path",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/customer-data-attribute-metadata-interface"
              }
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "500": {
            "description": "Internal Server error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/attributeMetadata/customerAddress": {
      "get": {
        "tags": [
          "customerAddressMetadataV1"
        ],
        "description": "Get all attribute metadata.",
        "operationId": "customerAddressMetadataV1GetAllAttributesMetadataGet",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/customer-data-attribute-metadata-interface"
              }
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "500": {
            "description": "Internal Server error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/attributeMetadata/customerAddress/custom": {
      "get": {
        "tags": [
          "customerAddressMetadataV1"
        ],
        "description": "Get custom attributes metadata for the given data interface.",
        "operationId": "customerAddressMetadataV1GetCustomAttributesMetadataGet",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "dataInterfaceName",
            "in": "query",
            "type": "string",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/customer-data-attribute-metadata-interface"
              }
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "500": {
            "description": "Internal Server error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/customers/{customerId}": {
      "get": {
        "tags": [
          "customerCustomerRepositoryV1"
        ],
        "description": "Get customer by Customer ID.",
        "operationId": "customerCustomerRepositoryV1GetByIdGet",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "type": "integer",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/customer-data-customer-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "500": {
            "description": "Internal Server error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      },
      "put": {
        "tags": [
          "customerCustomerRepositoryV1"
        ],
        "description": "Create or update a customer.",
        "operationId": "customerCustomerRepositoryV1SavePut",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "customerCustomerRepositoryV1SavePutBody",
            "in": "body",
            "schema": {
              "required": [
                "customer"
              ],
              "properties": {
                "customer": {
                  "$ref": "#/definitions/customer-data-customer-interface"
                },
                "passwordHash": {
                  "type": "string"
                }
              },
              "type": "object",
              "xml": {
                "name": "request"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/customer-data-customer-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "500": {
            "description": "Internal Server error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "customerCustomerRepositoryV1"
        ],
        "description": "Delete customer by Customer ID.",
        "operationId": "customerCustomerRepositoryV1DeleteByIdDelete",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "type": "integer",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "boolean",
              "description": "true on success"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "500": {
            "description": "Internal Server error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/customers/me": {
      "put": {
        "tags": [
          "customerCustomerRepositoryV1"
        ],
        "description": "Create or update a customer.",
        "operationId": "customerCustomerRepositoryV1SavePut",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "customerCustomerRepositoryV1SavePutBody",
            "in": "body",
            "schema": {
              "required": [
                "customer"
              ],
              "properties": {
                "customer": {
                  "$ref": "#/definitions/customer-data-customer-interface"
                },
                "passwordHash": {
                  "type": "string"
                }
              },
              "type": "object",
              "xml": {
                "name": "request"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/customer-data-customer-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "500": {
            "description": "Internal Server error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      },
      "get": {
        "tags": [
          "customerCustomerRepositoryV1"
        ],
        "description": "Get customer by Customer ID.",
        "operationId": "customerCustomerRepositoryV1GetByIdGet",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/customer-data-customer-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "500": {
            "description": "Internal Server error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/customers/search": {
      "get": {
        "tags": [
          "customerCustomerRepositoryV1"
        ],
        "description": "Retrieve customers which match a specified criteria. This call returns an array of objects, but detailed information about each object’s attributes might not be included. See https://devdocs.magento.com/codelinks/attributes.html#CustomerRepositoryInterface to determine which call to use to get detailed information about all attributes for an object.",
        "operationId": "customerCustomerRepositoryV1GetListGet",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "searchCriteria[filterGroups][0][filters][0][field]",
            "in": "query",
            "type": "string",
            "description": "Field"
          },
          {
            "name": "searchCriteria[filterGroups][0][filters][0][value]",
            "in": "query",
            "type": "string",
            "description": "Value"
          },
          {
            "name": "searchCriteria[filterGroups][0][filters][0][conditionType]",
            "in": "query",
            "type": "string",
            "description": "Condition type"
          },
          {
            "name": "searchCriteria[sortOrders][0][field]",
            "in": "query",
            "type": "string",
            "description": "Sorting field."
          },
          {
            "name": "searchCriteria[sortOrders][0][direction]",
            "in": "query",
            "type": "string",
            "description": "Sorting direction."
          },
          {
            "name": "searchCriteria[pageSize]",
            "in": "query",
            "type": "integer",
            "description": "Page size."
          },
          {
            "name": "searchCriteria[currentPage]",
            "in": "query",
            "type": "integer",
            "description": "Current page."
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/customer-data-customer-search-results-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "500": {
            "description": "Internal Server error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/customers": {
      "post": {
        "tags": [
          "customerAccountManagementV1"
        ],
        "description": "Create customer account. Perform necessary business operations like sending email.",
        "operationId": "customerAccountManagementV1CreateAccountPost",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "customerAccountManagementV1CreateAccountPostBody",
            "in": "body",
            "schema": {
              "required": [
                "customer"
              ],
              "properties": {
                "customer": {
                  "$ref": "#/definitions/customer-data-customer-interface"
                },
                "password": {
                  "type": "string"
                },
                "redirectUrl": {
                  "type": "string"
                }
              },
              "type": "object",
              "xml": {
                "name": "request"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/customer-data-customer-interface"
            }
          },
          "500": {
            "description": "Internal Server error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/customers/me/activate": {
      "put": {
        "tags": [
          "customerAccountManagementV1"
        ],
        "description": "Activate a customer account using a key that was sent in a confirmation email.",
        "operationId": "customerAccountManagementV1ActivateByIdPut",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "customerAccountManagementV1ActivateByIdPutBody",
            "in": "body",
            "schema": {
              "required": [
                "confirmationKey"
              ],
              "properties": {
                "confirmationKey": {
                  "type": "string"
                }
              },
              "type": "object",
              "xml": {
                "name": "request"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/customer-data-customer-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "500": {
            "description": "Internal Server error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/customers/{email}/activate": {
      "put": {
        "tags": [
          "customerAccountManagementV1"
        ],
        "description": "Activate a customer account using a key that was sent in a confirmation email.",
        "operationId": "customerAccountManagementV1ActivatePut",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "email",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "customerAccountManagementV1ActivatePutBody",
            "in": "body",
            "schema": {
              "required": [
                "confirmationKey"
              ],
              "properties": {
                "confirmationKey": {
                  "type": "string"
                }
              },
              "type": "object",
              "xml": {
                "name": "request"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/customer-data-customer-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "500": {
            "description": "Internal Server error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/customers/me/password": {
      "put": {
        "tags": [
          "customerAccountManagementV1"
        ],
        "description": "Change customer password.",
        "operationId": "customerAccountManagementV1ChangePasswordByIdPut",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "customerAccountManagementV1ChangePasswordByIdPutBody",
            "in": "body",
            "schema": {
              "required": [
                "currentPassword",
                "newPassword"
              ],
              "properties": {
                "currentPassword": {
                  "type": "string"
                },
                "newPassword": {
                  "type": "string"
                }
              },
              "type": "object",
              "xml": {
                "name": "request"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "boolean",
              "description": "true on success"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "500": {
            "description": "Internal Server error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/customers/{customerId}/password/resetLinkToken/{resetPasswordLinkToken}": {
      "get": {
        "tags": [
          "customerAccountManagementV1"
        ],
        "description": "Check if password reset token is valid.",
        "operationId": "customerAccountManagementV1ValidateResetPasswordLinkTokenGet",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "type": "integer",
            "required": true,
            "description": "If null is given then a customer will be matched by the RP token."
          },
          {
            "name": "resetPasswordLinkToken",
            "in": "path",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "boolean",
              "description": "True if the token is valid"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "500": {
            "description": "Internal Server error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/customers/password": {
      "put": {
        "tags": [
          "customerAccountManagementV1"
        ],
        "description": "Send an email to the customer with a password reset link.",
        "operationId": "customerAccountManagementV1InitiatePasswordResetPut",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "customerAccountManagementV1InitiatePasswordResetPutBody",
            "in": "body",
            "schema": {
              "required": [
                "email",
                "template"
              ],
              "properties": {
                "email": {
                  "type": "string"
                },
                "template": {
                  "type": "string"
                },
                "websiteId": {
                  "type": "integer"
                }
              },
              "type": "object",
              "xml": {
                "name": "request"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "boolean",
              "description": "true on success"
            }
          },
          "500": {
            "description": "Internal Server error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/customers/resetPassword": {
      "post": {
        "tags": [
          "customerAccountManagementV1"
        ],
        "description": "Reset customer password.",
        "operationId": "customerAccountManagementV1ResetPasswordPost",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "customerAccountManagementV1ResetPasswordPostBody",
            "in": "body",
            "schema": {
              "required": [
                "email",
                "resetToken",
                "newPassword"
              ],
              "properties": {
                "email": {
                  "type": "string",
                  "description": "If empty value given then the customer will be matched by the RP token."
                },
                "resetToken": {
                  "type": "string"
                },
                "newPassword": {
                  "type": "string"
                }
              },
              "type": "object",
              "xml": {
                "name": "request"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "boolean",
              "description": "true on success"
            }
          },
          "500": {
            "description": "Internal Server error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/customers/{customerId}/confirm": {
      "get": {
        "tags": [
          "customerAccountManagementV1"
        ],
        "description": "Gets the account confirmation status.",
        "operationId": "customerAccountManagementV1GetConfirmationStatusGet",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "type": "integer",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "string"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "500": {
            "description": "Internal Server error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/customers/confirm": {
      "post": {
        "tags": [
          "customerAccountManagementV1"
        ],
        "description": "Resend confirmation email.",
        "operationId": "customerAccountManagementV1ResendConfirmationPost",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "customerAccountManagementV1ResendConfirmationPostBody",
            "in": "body",
            "schema": {
              "required": [
                "email",
                "websiteId"
              ],
              "properties": {
                "email": {
                  "type": "string"
                },
                "websiteId": {
                  "type": "integer"
                },
                "redirectUrl": {
                  "type": "string"
                }
              },
              "type": "object",
              "xml": {
                "name": "request"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "boolean",
              "description": "true on success"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "500": {
            "description": "Internal Server error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/customers/validate": {
      "put": {
        "tags": [
          "customerAccountManagementV1"
        ],
        "description": "Validate customer data.",
        "operationId": "customerAccountManagementV1ValidatePut",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "customerAccountManagementV1ValidatePutBody",
            "in": "body",
            "schema": {
              "required": [
                "customer"
              ],
              "properties": {
                "customer": {
                  "$ref": "#/definitions/customer-data-customer-interface"
                }
              },
              "type": "object",
              "xml": {
                "name": "request"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/customer-data-validation-results-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "500": {
            "description": "Internal Server error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/customers/{customerId}/permissions/readonly": {
      "get": {
        "tags": [
          "customerAccountManagementV1"
        ],
        "description": "Check if customer can be deleted.",
        "operationId": "customerAccountManagementV1IsReadonlyGet",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "type": "integer",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "boolean"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "500": {
            "description": "Internal Server error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/customers/isEmailAvailable": {
      "post": {
        "tags": [
          "customerAccountManagementV1"
        ],
        "description": "Check if given email is associated with a customer account in given website.",
        "operationId": "customerAccountManagementV1IsEmailAvailablePost",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "customerAccountManagementV1IsEmailAvailablePostBody",
            "in": "body",
            "schema": {
              "required": [
                "customerEmail"
              ],
              "properties": {
                "customerEmail": {
                  "type": "string"
                },
                "websiteId": {
                  "type": "integer",
                  "description": "If not set, will use the current websiteId"
                }
              },
              "type": "object",
              "xml": {
                "name": "request"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "boolean"
            }
          },
          "500": {
            "description": "Internal Server error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/customers/me/billingAddress": {
      "get": {
        "tags": [
          "customerAccountManagementV1"
        ],
        "description": "Retrieve default billing address for the given customerId.",
        "operationId": "customerAccountManagementV1GetDefaultBillingAddressGet",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/customer-data-address-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "500": {
            "description": "Internal Server error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/customers/{customerId}/billingAddress": {
      "get": {
        "tags": [
          "customerAccountManagementV1"
        ],
        "description": "Retrieve default billing address for the given customerId.",
        "operationId": "customerAccountManagementV1GetDefaultBillingAddressGet",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "type": "integer",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/customer-data-address-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "500": {
            "description": "Internal Server error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/customers/me/shippingAddress": {
      "get": {
        "tags": [
          "customerAccountManagementV1"
        ],
        "description": "Retrieve default shipping address for the given customerId.",
        "operationId": "customerAccountManagementV1GetDefaultShippingAddressGet",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/customer-data-address-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "500": {
            "description": "Internal Server error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/customers/{customerId}/shippingAddress": {
      "get": {
        "tags": [
          "customerAccountManagementV1"
        ],
        "description": "Retrieve default shipping address for the given customerId.",
        "operationId": "customerAccountManagementV1GetDefaultShippingAddressGet",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "type": "integer",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/customer-data-address-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "500": {
            "description": "Internal Server error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/customers/addresses/{addressId}": {
      "get": {
        "tags": [
          "customerAddressRepositoryV1"
        ],
        "description": "Retrieve customer address.",
        "operationId": "customerAddressRepositoryV1GetByIdGet",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "addressId",
            "in": "path",
            "type": "integer",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/customer-data-address-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "500": {
            "description": "Internal Server error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/addresses/{addressId}": {
      "delete": {
        "tags": [
          "customerAddressRepositoryV1"
        ],
        "description": "Delete customer address by ID.",
        "operationId": "customerAddressRepositoryV1DeleteByIdDelete",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "addressId",
            "in": "path",
            "type": "integer",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "boolean",
              "description": "true on success"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "500": {
            "description": "Internal Server error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/search": {
      "get": {
        "tags": [
          "searchV1"
        ],
        "description": "Make Full Text Search and return found Documents",
        "operationId": "searchV1SearchGet",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "searchCriteria[requestName]",
            "in": "query",
            "type": "string"
          },
          {
            "name": "searchCriteria[filterGroups][0][filters][0][field]",
            "in": "query",
            "type": "string",
            "description": "Field"
          },
          {
            "name": "searchCriteria[filterGroups][0][filters][0][value]",
            "in": "query",
            "type": "string",
            "description": "Value"
          },
          {
            "name": "searchCriteria[filterGroups][0][filters][0][conditionType]",
            "in": "query",
            "type": "string",
            "description": "Condition type"
          },
          {
            "name": "searchCriteria[sortOrders][0][field]",
            "in": "query",
            "type": "string",
            "description": "Sorting field."
          },
          {
            "name": "searchCriteria[sortOrders][0][direction]",
            "in": "query",
            "type": "string",
            "description": "Sorting direction."
          },
          {
            "name": "searchCriteria[pageSize]",
            "in": "query",
            "type": "integer",
            "description": "Page size."
          },
          {
            "name": "searchCriteria[currentPage]",
            "in": "query",
            "type": "integer",
            "description": "Current page."
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/framework-search-search-result-interface"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/cmsPage/{pageId}": {
      "get": {
        "tags": [
          "cmsPageRepositoryV1"
        ],
        "description": "Retrieve page.",
        "operationId": "cmsPageRepositoryV1GetByIdGet",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "pageId",
            "in": "path",
            "type": "integer",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/cms-data-page-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "500": {
            "description": "Internal Server error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "cmsPageRepositoryV1"
        ],
        "description": "Delete page by ID.",
        "operationId": "cmsPageRepositoryV1DeleteByIdDelete",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "pageId",
            "in": "path",
            "type": "integer",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "boolean",
              "description": "true on success"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "500": {
            "description": "Internal Server error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/cmsPage/search": {
      "get": {
        "tags": [
          "cmsPageRepositoryV1"
        ],
        "description": "Retrieve pages matching the specified criteria.",
        "operationId": "cmsPageRepositoryV1GetListGet",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "searchCriteria[filterGroups][0][filters][0][field]",
            "in": "query",
            "type": "string",
            "description": "Field"
          },
          {
            "name": "searchCriteria[filterGroups][0][filters][0][value]",
            "in": "query",
            "type": "string",
            "description": "Value"
          },
          {
            "name": "searchCriteria[filterGroups][0][filters][0][conditionType]",
            "in": "query",
            "type": "string",
            "description": "Condition type"
          },
          {
            "name": "searchCriteria[sortOrders][0][field]",
            "in": "query",
            "type": "string",
            "description": "Sorting field."
          },
          {
            "name": "searchCriteria[sortOrders][0][direction]",
            "in": "query",
            "type": "string",
            "description": "Sorting direction."
          },
          {
            "name": "searchCriteria[pageSize]",
            "in": "query",
            "type": "integer",
            "description": "Page size."
          },
          {
            "name": "searchCriteria[currentPage]",
            "in": "query",
            "type": "integer",
            "description": "Current page."
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/cms-data-page-search-results-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "500": {
            "description": "Internal Server error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/cmsPage": {
      "post": {
        "tags": [
          "cmsPageRepositoryV1"
        ],
        "description": "Save page.",
        "operationId": "cmsPageRepositoryV1SavePost",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "cmsPageRepositoryV1SavePostBody",
            "in": "body",
            "schema": {
              "required": [
                "page"
              ],
              "properties": {
                "page": {
                  "$ref": "#/definitions/cms-data-page-interface"
                }
              },
              "type": "object",
              "xml": {
                "name": "request"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/cms-data-page-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "500": {
            "description": "Internal Server error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/cmsPage/{id}": {
      "put": {
        "tags": [
          "cmsPageRepositoryV1"
        ],
        "description": "Save page.",
        "operationId": "cmsPageRepositoryV1SavePut",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "cmsPageRepositoryV1SavePutBody",
            "in": "body",
            "schema": {
              "required": [
                "page"
              ],
              "properties": {
                "page": {
                  "$ref": "#/definitions/cms-data-page-interface"
                }
              },
              "type": "object",
              "xml": {
                "name": "request"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/cms-data-page-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "500": {
            "description": "Internal Server error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/cmsBlock/{blockId}": {
      "get": {
        "tags": [
          "cmsBlockRepositoryV1"
        ],
        "description": "Retrieve block.",
        "operationId": "cmsBlockRepositoryV1GetByIdGet",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "blockId",
            "in": "path",
            "type": "integer",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/cms-data-block-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "500": {
            "description": "Internal Server error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "cmsBlockRepositoryV1"
        ],
        "description": "Delete block by ID.",
        "operationId": "cmsBlockRepositoryV1DeleteByIdDelete",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "blockId",
            "in": "path",
            "type": "integer",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "boolean",
              "description": "true on success"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "500": {
            "description": "Internal Server error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/cmsBlock/search": {
      "get": {
        "tags": [
          "cmsBlockRepositoryV1"
        ],
        "description": "Retrieve blocks matching the specified criteria.",
        "operationId": "cmsBlockRepositoryV1GetListGet",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "searchCriteria[filterGroups][0][filters][0][field]",
            "in": "query",
            "type": "string",
            "description": "Field"
          },
          {
            "name": "searchCriteria[filterGroups][0][filters][0][value]",
            "in": "query",
            "type": "string",
            "description": "Value"
          },
          {
            "name": "searchCriteria[filterGroups][0][filters][0][conditionType]",
            "in": "query",
            "type": "string",
            "description": "Condition type"
          },
          {
            "name": "searchCriteria[sortOrders][0][field]",
            "in": "query",
            "type": "string",
            "description": "Sorting field."
          },
          {
            "name": "searchCriteria[sortOrders][0][direction]",
            "in": "query",
            "type": "string",
            "description": "Sorting direction."
          },
          {
            "name": "searchCriteria[pageSize]",
            "in": "query",
            "type": "integer",
            "description": "Page size."
          },
          {
            "name": "searchCriteria[currentPage]",
            "in": "query",
            "type": "integer",
            "description": "Current page."
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/cms-data-block-search-results-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "500": {
            "description": "Internal Server error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/cmsBlock": {
      "post": {
        "tags": [
          "cmsBlockRepositoryV1"
        ],
        "description": "Save block.",
        "operationId": "cmsBlockRepositoryV1SavePost",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "cmsBlockRepositoryV1SavePostBody",
            "in": "body",
            "schema": {
              "required": [
                "block"
              ],
              "properties": {
                "block": {
                  "$ref": "#/definitions/cms-data-block-interface"
                }
              },
              "type": "object",
              "xml": {
                "name": "request"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/cms-data-block-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "500": {
            "description": "Internal Server error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/cmsBlock/{id}": {
      "put": {
        "tags": [
          "cmsBlockRepositoryV1"
        ],
        "description": "Save block.",
        "operationId": "cmsBlockRepositoryV1SavePut",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "cmsBlockRepositoryV1SavePutBody",
            "in": "body",
            "schema": {
              "required": [
                "block"
              ],
              "properties": {
                "block": {
                  "$ref": "#/definitions/cms-data-block-interface"
                }
              },
              "type": "object",
              "xml": {
                "name": "request"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/cms-data-block-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "500": {
            "description": "Internal Server error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/products": {
      "post": {
        "tags": [
          "catalogProductRepositoryV1"
        ],
        "description": "Create product",
        "operationId": "catalogProductRepositoryV1SavePost",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "catalogProductRepositoryV1SavePostBody",
            "in": "body",
            "schema": {
              "required": [
                "product"
              ],
              "properties": {
                "product": {
                  "$ref": "#/definitions/catalog-data-product-interface"
                },
                "saveOptions": {
                  "type": "boolean"
                }
              },
              "type": "object",
              "xml": {
                "name": "request"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/catalog-data-product-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      },
      "get": {
        "tags": [
          "catalogProductRepositoryV1"
        ],
        "description": "Get product list",
        "operationId": "catalogProductRepositoryV1GetListGet",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "searchCriteria[filterGroups][0][filters][0][field]",
            "in": "query",
            "type": "string",
            "description": "Field"
          },
          {
            "name": "searchCriteria[filterGroups][0][filters][0][value]",
            "in": "query",
            "type": "string",
            "description": "Value"
          },
          {
            "name": "searchCriteria[filterGroups][0][filters][0][conditionType]",
            "in": "query",
            "type": "string",
            "description": "Condition type"
          },
          {
            "name": "searchCriteria[sortOrders][0][field]",
            "in": "query",
            "type": "string",
            "description": "Sorting field."
          },
          {
            "name": "searchCriteria[sortOrders][0][direction]",
            "in": "query",
            "type": "string",
            "description": "Sorting direction."
          },
          {
            "name": "searchCriteria[pageSize]",
            "in": "query",
            "type": "integer",
            "description": "Page size."
          },
          {
            "name": "searchCriteria[currentPage]",
            "in": "query",
            "type": "integer",
            "description": "Current page."
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/catalog-data-product-search-results-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/products/{sku}": {
      "put": {
        "tags": [
          "catalogProductRepositoryV1"
        ],
        "description": "Create product",
        "operationId": "catalogProductRepositoryV1SavePut",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "sku",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "catalogProductRepositoryV1SavePutBody",
            "in": "body",
            "schema": {
              "required": [
                "product"
              ],
              "properties": {
                "product": {
                  "$ref": "#/definitions/catalog-data-product-interface"
                },
                "saveOptions": {
                  "type": "boolean"
                }
              },
              "type": "object",
              "xml": {
                "name": "request"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/catalog-data-product-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "catalogProductRepositoryV1"
        ],
        "description": "",
        "operationId": "catalogProductRepositoryV1DeleteByIdDelete",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "sku",
            "in": "path",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "boolean",
              "description": "Will returned True if deleted"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      },
      "get": {
        "tags": [
          "catalogProductRepositoryV1"
        ],
        "description": "Get info about product by product SKU",
        "operationId": "catalogProductRepositoryV1GetGet",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "sku",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "editMode",
            "in": "query",
            "type": "boolean",
            "required": false
          },
          {
            "name": "storeId",
            "in": "query",
            "type": "integer",
            "required": false
          },
          {
            "name": "forceReload",
            "in": "query",
            "type": "boolean",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/catalog-data-product-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/products/attributes/types": {
      "get": {
        "tags": [
          "catalogProductAttributeTypesListV1"
        ],
        "description": "Retrieve list of product attribute types",
        "operationId": "catalogProductAttributeTypesListV1GetItemsGet",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/catalog-data-product-attribute-type-interface"
              }
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/products/attributes/{attributeCode}": {
      "get": {
        "tags": [
          "catalogProductAttributeRepositoryV1"
        ],
        "description": "Retrieve specific attribute",
        "operationId": "catalogProductAttributeRepositoryV1GetGet",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "attributeCode",
            "in": "path",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/catalog-data-product-attribute-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      },
      "put": {
        "tags": [
          "catalogProductAttributeRepositoryV1"
        ],
        "description": "Save attribute data",
        "operationId": "catalogProductAttributeRepositoryV1SavePut",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "attributeCode",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "catalogProductAttributeRepositoryV1SavePutBody",
            "in": "body",
            "schema": {
              "required": [
                "attribute"
              ],
              "properties": {
                "attribute": {
                  "$ref": "#/definitions/catalog-data-product-attribute-interface"
                }
              },
              "type": "object",
              "xml": {
                "name": "request"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/catalog-data-product-attribute-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "catalogProductAttributeRepositoryV1"
        ],
        "description": "Delete Attribute by id",
        "operationId": "catalogProductAttributeRepositoryV1DeleteByIdDelete",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "attributeCode",
            "in": "path",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "boolean"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/products/attributes": {
      "get": {
        "tags": [
          "catalogProductAttributeRepositoryV1"
        ],
        "description": "Retrieve all attributes for entity type",
        "operationId": "catalogProductAttributeRepositoryV1GetListGet",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "searchCriteria[filterGroups][0][filters][0][field]",
            "in": "query",
            "type": "string",
            "description": "Field"
          },
          {
            "name": "searchCriteria[filterGroups][0][filters][0][value]",
            "in": "query",
            "type": "string",
            "description": "Value"
          },
          {
            "name": "searchCriteria[filterGroups][0][filters][0][conditionType]",
            "in": "query",
            "type": "string",
            "description": "Condition type"
          },
          {
            "name": "searchCriteria[sortOrders][0][field]",
            "in": "query",
            "type": "string",
            "description": "Sorting field."
          },
          {
            "name": "searchCriteria[sortOrders][0][direction]",
            "in": "query",
            "type": "string",
            "description": "Sorting direction."
          },
          {
            "name": "searchCriteria[pageSize]",
            "in": "query",
            "type": "integer",
            "description": "Page size."
          },
          {
            "name": "searchCriteria[currentPage]",
            "in": "query",
            "type": "integer",
            "description": "Current page."
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/catalog-data-product-attribute-search-results-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      },
      "post": {
        "tags": [
          "catalogProductAttributeRepositoryV1"
        ],
        "description": "Save attribute data",
        "operationId": "catalogProductAttributeRepositoryV1SavePost",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "catalogProductAttributeRepositoryV1SavePostBody",
            "in": "body",
            "schema": {
              "required": [
                "attribute"
              ],
              "properties": {
                "attribute": {
                  "$ref": "#/definitions/catalog-data-product-attribute-interface"
                }
              },
              "type": "object",
              "xml": {
                "name": "request"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/catalog-data-product-attribute-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/categories/attributes/{attributeCode}": {
      "get": {
        "tags": [
          "catalogCategoryAttributeRepositoryV1"
        ],
        "description": "Retrieve specific attribute",
        "operationId": "catalogCategoryAttributeRepositoryV1GetGet",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "attributeCode",
            "in": "path",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/catalog-data-category-attribute-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/categories/attributes": {
      "get": {
        "tags": [
          "catalogCategoryAttributeRepositoryV1"
        ],
        "description": "Retrieve all attributes for entity type",
        "operationId": "catalogCategoryAttributeRepositoryV1GetListGet",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "searchCriteria[filterGroups][0][filters][0][field]",
            "in": "query",
            "type": "string",
            "description": "Field"
          },
          {
            "name": "searchCriteria[filterGroups][0][filters][0][value]",
            "in": "query",
            "type": "string",
            "description": "Value"
          },
          {
            "name": "searchCriteria[filterGroups][0][filters][0][conditionType]",
            "in": "query",
            "type": "string",
            "description": "Condition type"
          },
          {
            "name": "searchCriteria[sortOrders][0][field]",
            "in": "query",
            "type": "string",
            "description": "Sorting field."
          },
          {
            "name": "searchCriteria[sortOrders][0][direction]",
            "in": "query",
            "type": "string",
            "description": "Sorting direction."
          },
          {
            "name": "searchCriteria[pageSize]",
            "in": "query",
            "type": "integer",
            "description": "Page size."
          },
          {
            "name": "searchCriteria[currentPage]",
            "in": "query",
            "type": "integer",
            "description": "Current page."
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/catalog-data-category-attribute-search-results-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/categories/attributes/{attributeCode}/options": {
      "get": {
        "tags": [
          "catalogCategoryAttributeOptionManagementV1"
        ],
        "description": "Retrieve list of attribute options",
        "operationId": "catalogCategoryAttributeOptionManagementV1GetItemsGet",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "attributeCode",
            "in": "path",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/eav-data-attribute-option-interface"
              }
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/products/types": {
      "get": {
        "tags": [
          "catalogProductTypeListV1"
        ],
        "description": "Retrieve available product types",
        "operationId": "catalogProductTypeListV1GetProductTypesGet",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/catalog-data-product-type-interface"
              }
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/products/attribute-sets/sets/list": {
      "get": {
        "tags": [
          "catalogAttributeSetRepositoryV1"
        ],
        "description": "Retrieve list of Attribute Sets",
        "operationId": "catalogAttributeSetRepositoryV1GetListGet",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "searchCriteria[filterGroups][0][filters][0][field]",
            "in": "query",
            "type": "string",
            "description": "Field"
          },
          {
            "name": "searchCriteria[filterGroups][0][filters][0][value]",
            "in": "query",
            "type": "string",
            "description": "Value"
          },
          {
            "name": "searchCriteria[filterGroups][0][filters][0][conditionType]",
            "in": "query",
            "type": "string",
            "description": "Condition type"
          },
          {
            "name": "searchCriteria[sortOrders][0][field]",
            "in": "query",
            "type": "string",
            "description": "Sorting field."
          },
          {
            "name": "searchCriteria[sortOrders][0][direction]",
            "in": "query",
            "type": "string",
            "description": "Sorting direction."
          },
          {
            "name": "searchCriteria[pageSize]",
            "in": "query",
            "type": "integer",
            "description": "Page size."
          },
          {
            "name": "searchCriteria[currentPage]",
            "in": "query",
            "type": "integer",
            "description": "Current page."
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/eav-data-attribute-set-search-results-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/products/attribute-sets/{attributeSetId}": {
      "get": {
        "tags": [
          "catalogAttributeSetRepositoryV1"
        ],
        "description": "Retrieve attribute set information based on given ID",
        "operationId": "catalogAttributeSetRepositoryV1GetGet",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "attributeSetId",
            "in": "path",
            "type": "integer",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/eav-data-attribute-set-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "catalogAttributeSetRepositoryV1"
        ],
        "description": "Remove attribute set by given ID",
        "operationId": "catalogAttributeSetRepositoryV1DeleteByIdDelete",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "attributeSetId",
            "in": "path",
            "type": "integer",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "boolean"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      },
      "put": {
        "tags": [
          "catalogAttributeSetRepositoryV1"
        ],
        "description": "Save attribute set data",
        "operationId": "catalogAttributeSetRepositoryV1SavePut",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "attributeSetId",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "catalogAttributeSetRepositoryV1SavePutBody",
            "in": "body",
            "schema": {
              "required": [
                "attributeSet"
              ],
              "properties": {
                "attributeSet": {
                  "$ref": "#/definitions/eav-data-attribute-set-interface"
                }
              },
              "type": "object",
              "xml": {
                "name": "request"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/eav-data-attribute-set-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "500": {
            "description": "Internal Server error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/products/attribute-sets": {
      "post": {
        "tags": [
          "catalogAttributeSetManagementV1"
        ],
        "description": "Create attribute set from data",
        "operationId": "catalogAttributeSetManagementV1CreatePost",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "catalogAttributeSetManagementV1CreatePostBody",
            "in": "body",
            "schema": {
              "required": [
                "attributeSet",
                "skeletonId"
              ],
              "properties": {
                "attributeSet": {
                  "$ref": "#/definitions/eav-data-attribute-set-interface"
                },
                "skeletonId": {
                  "type": "integer"
                }
              },
              "type": "object",
              "xml": {
                "name": "request"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/eav-data-attribute-set-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/products/attribute-sets/{attributeSetId}/attributes": {
      "get": {
        "tags": [
          "catalogProductAttributeManagementV1"
        ],
        "description": "Retrieve related attributes based on given attribute set ID",
        "operationId": "catalogProductAttributeManagementV1GetAttributesGet",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "attributeSetId",
            "in": "path",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/catalog-data-product-attribute-interface"
              }
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/products/attribute-sets/attributes": {
      "post": {
        "tags": [
          "catalogProductAttributeManagementV1"
        ],
        "description": "Assign attribute to attribute set",
        "operationId": "catalogProductAttributeManagementV1AssignPost",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "catalogProductAttributeManagementV1AssignPostBody",
            "in": "body",
            "schema": {
              "required": [
                "attributeSetId",
                "attributeGroupId",
                "attributeCode",
                "sortOrder"
              ],
              "properties": {
                "attributeSetId": {
                  "type": "integer"
                },
                "attributeGroupId": {
                  "type": "integer"
                },
                "attributeCode": {
                  "type": "string"
                },
                "sortOrder": {
                  "type": "integer"
                }
              },
              "type": "object",
              "xml": {
                "name": "request"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "integer"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/products/attribute-sets/{attributeSetId}/attributes/{attributeCode}": {
      "delete": {
        "tags": [
          "catalogProductAttributeManagementV1"
        ],
        "description": "Remove attribute from attribute set",
        "operationId": "catalogProductAttributeManagementV1UnassignDelete",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "attributeSetId",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "attributeCode",
            "in": "path",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "boolean"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/products/attribute-sets/groups/list": {
      "get": {
        "tags": [
          "catalogProductAttributeGroupRepositoryV1"
        ],
        "description": "Retrieve list of attribute groups",
        "operationId": "catalogProductAttributeGroupRepositoryV1GetListGet",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "searchCriteria[filterGroups][0][filters][0][field]",
            "in": "query",
            "type": "string",
            "description": "Field"
          },
          {
            "name": "searchCriteria[filterGroups][0][filters][0][value]",
            "in": "query",
            "type": "string",
            "description": "Value"
          },
          {
            "name": "searchCriteria[filterGroups][0][filters][0][conditionType]",
            "in": "query",
            "type": "string",
            "description": "Condition type"
          },
          {
            "name": "searchCriteria[sortOrders][0][field]",
            "in": "query",
            "type": "string",
            "description": "Sorting field."
          },
          {
            "name": "searchCriteria[sortOrders][0][direction]",
            "in": "query",
            "type": "string",
            "description": "Sorting direction."
          },
          {
            "name": "searchCriteria[pageSize]",
            "in": "query",
            "type": "integer",
            "description": "Page size."
          },
          {
            "name": "searchCriteria[currentPage]",
            "in": "query",
            "type": "integer",
            "description": "Current page."
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/eav-data-attribute-group-search-results-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/products/attribute-sets/groups": {
      "post": {
        "tags": [
          "catalogProductAttributeGroupRepositoryV1"
        ],
        "description": "Save attribute group",
        "operationId": "catalogProductAttributeGroupRepositoryV1SavePost",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "catalogProductAttributeGroupRepositoryV1SavePostBody",
            "in": "body",
            "schema": {
              "required": [
                "group"
              ],
              "properties": {
                "group": {
                  "$ref": "#/definitions/eav-data-attribute-group-interface"
                }
              },
              "type": "object",
              "xml": {
                "name": "request"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/eav-data-attribute-group-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/products/attribute-sets/{attributeSetId}/groups": {
      "put": {
        "tags": [
          "catalogProductAttributeGroupRepositoryV1"
        ],
        "description": "Save attribute group",
        "operationId": "catalogProductAttributeGroupRepositoryV1SavePut",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "attributeSetId",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "catalogProductAttributeGroupRepositoryV1SavePutBody",
            "in": "body",
            "schema": {
              "required": [
                "group"
              ],
              "properties": {
                "group": {
                  "$ref": "#/definitions/eav-data-attribute-group-interface"
                }
              },
              "type": "object",
              "xml": {
                "name": "request"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/eav-data-attribute-group-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/products/attribute-sets/groups/{groupId}": {
      "delete": {
        "tags": [
          "catalogProductAttributeGroupRepositoryV1"
        ],
        "description": "Remove attribute group by id",
        "operationId": "catalogProductAttributeGroupRepositoryV1DeleteByIdDelete",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "type": "integer",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "boolean"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/products/attributes/{attributeCode}/options": {
      "get": {
        "tags": [
          "catalogProductAttributeOptionManagementV1"
        ],
        "description": "Retrieve list of attribute options",
        "operationId": "catalogProductAttributeOptionManagementV1GetItemsGet",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "attributeCode",
            "in": "path",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/eav-data-attribute-option-interface"
              }
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      },
      "post": {
        "tags": [
          "catalogProductAttributeOptionManagementV1"
        ],
        "description": "Add option to attribute",
        "operationId": "catalogProductAttributeOptionManagementV1AddPost",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "attributeCode",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "catalogProductAttributeOptionManagementV1AddPostBody",
            "in": "body",
            "schema": {
              "required": [
                "option"
              ],
              "properties": {
                "option": {
                  "$ref": "#/definitions/eav-data-attribute-option-interface"
                }
              },
              "type": "object",
              "xml": {
                "name": "request"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "string"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/products/attributes/{attributeCode}/options/{optionId}": {
      "delete": {
        "tags": [
          "catalogProductAttributeOptionManagementV1"
        ],
        "description": "Delete option from attribute",
        "operationId": "catalogProductAttributeOptionManagementV1DeleteDelete",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "attributeCode",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "optionId",
            "in": "path",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "boolean"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/products/media/types/{attributeSetName}": {
      "get": {
        "tags": [
          "catalogProductMediaAttributeManagementV1"
        ],
        "description": "Retrieve the list of media attributes (fronted input type is media_image) assigned to the given attribute set.",
        "operationId": "catalogProductMediaAttributeManagementV1GetListGet",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "attributeSetName",
            "in": "path",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "array",
              "description": "list of media attributes",
              "items": {
                "$ref": "#/definitions/catalog-data-product-attribute-interface"
              }
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/products/{sku}/media/{entryId}": {
      "get": {
        "tags": [
          "catalogProductAttributeMediaGalleryManagementV1"
        ],
        "description": "Return information about gallery entry",
        "operationId": "catalogProductAttributeMediaGalleryManagementV1GetGet",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "sku",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "entryId",
            "in": "path",
            "type": "integer",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/catalog-data-product-attribute-media-gallery-entry-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      },
      "put": {
        "tags": [
          "catalogProductAttributeMediaGalleryManagementV1"
        ],
        "description": "Update gallery entry",
        "operationId": "catalogProductAttributeMediaGalleryManagementV1UpdatePut",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "sku",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "entryId",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "catalogProductAttributeMediaGalleryManagementV1UpdatePutBody",
            "in": "body",
            "schema": {
              "required": [
                "entry"
              ],
              "properties": {
                "entry": {
                  "$ref": "#/definitions/catalog-data-product-attribute-media-gallery-entry-interface"
                }
              },
              "type": "object",
              "xml": {
                "name": "request"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "boolean"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "catalogProductAttributeMediaGalleryManagementV1"
        ],
        "description": "Remove gallery entry",
        "operationId": "catalogProductAttributeMediaGalleryManagementV1RemoveDelete",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "sku",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "entryId",
            "in": "path",
            "type": "integer",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "boolean"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/products/{sku}/media": {
      "post": {
        "tags": [
          "catalogProductAttributeMediaGalleryManagementV1"
        ],
        "description": "Create new gallery entry",
        "operationId": "catalogProductAttributeMediaGalleryManagementV1CreatePost",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "sku",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "catalogProductAttributeMediaGalleryManagementV1CreatePostBody",
            "in": "body",
            "schema": {
              "required": [
                "entry"
              ],
              "properties": {
                "entry": {
                  "$ref": "#/definitions/catalog-data-product-attribute-media-gallery-entry-interface"
                }
              },
              "type": "object",
              "xml": {
                "name": "request"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "integer",
              "description": "gallery entry ID"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      },
      "get": {
        "tags": [
          "catalogProductAttributeMediaGalleryManagementV1"
        ],
        "description": "Retrieve the list of gallery entries associated with given product",
        "operationId": "catalogProductAttributeMediaGalleryManagementV1GetListGet",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "sku",
            "in": "path",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/catalog-data-product-attribute-media-gallery-entry-interface"
              }
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/products/{sku}/group-prices/{customerGroupId}/tiers": {
      "get": {
        "tags": [
          "catalogProductTierPriceManagementV1"
        ],
        "description": "Get tier price of product",
        "operationId": "catalogProductTierPriceManagementV1GetListGet",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "sku",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "customerGroupId",
            "in": "path",
            "type": "string",
            "required": true,
            "description": "'all' can be used to specify 'ALL GROUPS'"
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/catalog-data-product-tier-price-interface"
              }
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/products/{sku}/group-prices/{customerGroupId}/tiers/{qty}/price/{price}": {
      "post": {
        "tags": [
          "catalogProductTierPriceManagementV1"
        ],
        "description": "Create tier price for product",
        "operationId": "catalogProductTierPriceManagementV1AddPost",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "sku",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "customerGroupId",
            "in": "path",
            "type": "string",
            "required": true,
            "description": "'all' can be used to specify 'ALL GROUPS'"
          },
          {
            "name": "price",
            "in": "path",
            "type": "number",
            "required": true
          },
          {
            "name": "qty",
            "in": "path",
            "type": "number",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "boolean"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/products/{sku}/group-prices/{customerGroupId}/tiers/{qty}": {
      "delete": {
        "tags": [
          "catalogProductTierPriceManagementV1"
        ],
        "description": "Remove tier price from product",
        "operationId": "catalogProductTierPriceManagementV1RemoveDelete",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "sku",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "customerGroupId",
            "in": "path",
            "type": "string",
            "required": true,
            "description": "'all' can be used to specify 'ALL GROUPS'"
          },
          {
            "name": "qty",
            "in": "path",
            "type": "number",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "boolean"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/products/tier-prices-information": {
      "post": {
        "tags": [
          "catalogTierPriceStorageV1"
        ],
        "description": "Return product prices. In case of at least one of skus is not found exception will be thrown.",
        "operationId": "catalogTierPriceStorageV1GetPost",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "catalogTierPriceStorageV1GetPostBody",
            "in": "body",
            "schema": {
              "required": [
                "skus"
              ],
              "properties": {
                "skus": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "type": "object",
              "xml": {
                "name": "request"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/catalog-data-tier-price-interface"
              }
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/products/tier-prices": {
      "post": {
        "tags": [
          "catalogTierPriceStorageV1"
        ],
        "description": "Add or update product prices. If any items will have invalid price, price type, website id, sku, customer group or quantity, they will be marked as failed and excluded from update list and \\Magento\\Catalog\\Api\\Data\\PriceUpdateResultInterface[] with problem description will be returned. If there were no failed items during update empty array will be returned. If error occurred during the update exception will be thrown.",
        "operationId": "catalogTierPriceStorageV1UpdatePost",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "catalogTierPriceStorageV1UpdatePostBody",
            "in": "body",
            "schema": {
              "required": [
                "prices"
              ],
              "properties": {
                "prices": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/catalog-data-tier-price-interface"
                  }
                }
              },
              "type": "object",
              "xml": {
                "name": "request"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/catalog-data-price-update-result-interface"
              }
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      },
      "put": {
        "tags": [
          "catalogTierPriceStorageV1"
        ],
        "description": "Remove existing tier prices and replace them with the new ones. If any items will have invalid price, price type, website id, sku, customer group or quantity, they will be marked as failed and excluded from replace list and \\Magento\\Catalog\\Api\\Data\\PriceUpdateResultInterface[] with problem description will be returned. If there were no failed items during update empty array will be returned. If error occurred during the update exception will be thrown.",
        "operationId": "catalogTierPriceStorageV1ReplacePut",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "catalogTierPriceStorageV1ReplacePutBody",
            "in": "body",
            "schema": {
              "required": [
                "prices"
              ],
              "properties": {
                "prices": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/catalog-data-tier-price-interface"
                  }
                }
              },
              "type": "object",
              "xml": {
                "name": "request"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/catalog-data-price-update-result-interface"
              }
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/products/tier-prices-delete": {
      "post": {
        "tags": [
          "catalogTierPriceStorageV1"
        ],
        "description": "Delete product tier prices. If any items will have invalid price, price type, website id, sku, customer group or quantity, they will be marked as failed and excluded from delete list and \\Magento\\Catalog\\Api\\Data\\PriceUpdateResultInterface[] with problem description will be returned. If there were no failed items during update empty array will be returned. If error occurred during the update exception will be thrown.",
        "operationId": "catalogTierPriceStorageV1DeletePost",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "catalogTierPriceStorageV1DeletePostBody",
            "in": "body",
            "schema": {
              "required": [
                "prices"
              ],
              "properties": {
                "prices": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/catalog-data-tier-price-interface"
                  }
                }
              },
              "type": "object",
              "xml": {
                "name": "request"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/catalog-data-price-update-result-interface"
              }
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/products/base-prices-information": {
      "post": {
        "tags": [
          "catalogBasePriceStorageV1"
        ],
        "description": "Return product prices. In case of at least one of skus is not found exception will be thrown.",
        "operationId": "catalogBasePriceStorageV1GetPost",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "catalogBasePriceStorageV1GetPostBody",
            "in": "body",
            "schema": {
              "required": [
                "skus"
              ],
              "properties": {
                "skus": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "type": "object",
              "xml": {
                "name": "request"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/catalog-data-base-price-interface"
              }
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/products/base-prices": {
      "post": {
        "tags": [
          "catalogBasePriceStorageV1"
        ],
        "description": "Add or update product prices. Input item should correspond \\Magento\\Catalog\\Api\\Data\\CostInterface. If any items will have invalid price, store id or sku, they will be marked as failed and excluded from update list and \\Magento\\Catalog\\Api\\Data\\PriceUpdateResultInterface[] with problem description will be returned. If there were no failed items during update empty array will be returned. If error occurred during the update exception will be thrown.",
        "operationId": "catalogBasePriceStorageV1UpdatePost",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "catalogBasePriceStorageV1UpdatePostBody",
            "in": "body",
            "schema": {
              "required": [
                "prices"
              ],
              "properties": {
                "prices": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/catalog-data-base-price-interface"
                  }
                }
              },
              "type": "object",
              "xml": {
                "name": "request"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/catalog-data-price-update-result-interface"
              }
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/products/cost-information": {
      "post": {
        "tags": [
          "catalogCostStorageV1"
        ],
        "description": "Return product prices. In case of at least one of skus is not found exception will be thrown.",
        "operationId": "catalogCostStorageV1GetPost",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "catalogCostStorageV1GetPostBody",
            "in": "body",
            "schema": {
              "required": [
                "skus"
              ],
              "properties": {
                "skus": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "type": "object",
              "xml": {
                "name": "request"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/catalog-data-cost-interface"
              }
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/products/cost": {
      "post": {
        "tags": [
          "catalogCostStorageV1"
        ],
        "description": "Add or update product cost. Input item should correspond to \\Magento\\Catalog\\Api\\Data\\CostInterface. If any items will have invalid cost, store id or sku, they will be marked as failed and excluded from update list and \\Magento\\Catalog\\Api\\Data\\PriceUpdateResultInterface[] with problem description will be returned. If there were no failed items during update empty array will be returned. If error occurred during the update exception will be thrown.",
        "operationId": "catalogCostStorageV1UpdatePost",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "catalogCostStorageV1UpdatePostBody",
            "in": "body",
            "schema": {
              "required": [
                "prices"
              ],
              "properties": {
                "prices": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/catalog-data-cost-interface"
                  }
                }
              },
              "type": "object",
              "xml": {
                "name": "request"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/catalog-data-price-update-result-interface"
              }
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/products/cost-delete": {
      "post": {
        "tags": [
          "catalogCostStorageV1"
        ],
        "description": "Delete product cost. In case of at least one of skus is not found exception will be thrown. If error occurred during the delete exception will be thrown.",
        "operationId": "catalogCostStorageV1DeletePost",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "catalogCostStorageV1DeletePostBody",
            "in": "body",
            "schema": {
              "required": [
                "skus"
              ],
              "properties": {
                "skus": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "type": "object",
              "xml": {
                "name": "request"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "boolean",
              "description": "Will return True if deleted."
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/products/special-price-information": {
      "post": {
        "tags": [
          "catalogSpecialPriceStorageV1"
        ],
        "description": "Return product's special price. In case of at least one of skus is not found exception will be thrown.",
        "operationId": "catalogSpecialPriceStorageV1GetPost",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "catalogSpecialPriceStorageV1GetPostBody",
            "in": "body",
            "schema": {
              "required": [
                "skus"
              ],
              "properties": {
                "skus": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "type": "object",
              "xml": {
                "name": "request"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/catalog-data-special-price-interface"
              }
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/products/special-price": {
      "post": {
        "tags": [
          "catalogSpecialPriceStorageV1"
        ],
        "description": "Add or update product's special price. If any items will have invalid price, store id, sku or dates, they will be marked as failed and excluded from update list and \\Magento\\Catalog\\Api\\Data\\PriceUpdateResultInterface[] with problem description will be returned. If there were no failed items during update empty array will be returned. If error occurred during the update exception will be thrown.",
        "operationId": "catalogSpecialPriceStorageV1UpdatePost",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "catalogSpecialPriceStorageV1UpdatePostBody",
            "in": "body",
            "schema": {
              "required": [
                "prices"
              ],
              "properties": {
                "prices": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/catalog-data-special-price-interface"
                  }
                }
              },
              "type": "object",
              "xml": {
                "name": "request"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/catalog-data-price-update-result-interface"
              }
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/products/special-price-delete": {
      "post": {
        "tags": [
          "catalogSpecialPriceStorageV1"
        ],
        "description": "Delete product's special price. If any items will have invalid price, store id, sku or dates, they will be marked as failed and excluded from delete list and \\Magento\\Catalog\\Api\\Data\\PriceUpdateResultInterface[] with problem description will be returned. If there were no failed items during update empty array will be returned. If error occurred during the delete exception will be thrown.",
        "operationId": "catalogSpecialPriceStorageV1DeletePost",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "catalogSpecialPriceStorageV1DeletePostBody",
            "in": "body",
            "schema": {
              "required": [
                "prices"
              ],
              "properties": {
                "prices": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/catalog-data-special-price-interface"
                  }
                }
              },
              "type": "object",
              "xml": {
                "name": "request"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/catalog-data-price-update-result-interface"
              }
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/categories/{categoryId}": {
      "delete": {
        "tags": [
          "catalogCategoryRepositoryV1"
        ],
        "description": "Delete category by identifier",
        "operationId": "catalogCategoryRepositoryV1DeleteByIdentifierDelete",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "categoryId",
            "in": "path",
            "type": "integer",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "boolean",
              "description": "Will returned True if deleted"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      },
      "get": {
        "tags": [
          "catalogCategoryRepositoryV1"
        ],
        "description": "Get info about category by category id",
        "operationId": "catalogCategoryRepositoryV1GetGet",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "categoryId",
            "in": "path",
            "type": "integer",
            "required": true
          },
          {
            "name": "storeId",
            "in": "query",
            "type": "integer",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/catalog-data-category-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/categories": {
      "post": {
        "tags": [
          "catalogCategoryRepositoryV1"
        ],
        "description": "Create category service",
        "operationId": "catalogCategoryRepositoryV1SavePost",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "catalogCategoryRepositoryV1SavePostBody",
            "in": "body",
            "schema": {
              "required": [
                "category"
              ],
              "properties": {
                "category": {
                  "$ref": "#/definitions/catalog-data-category-interface"
                }
              },
              "type": "object",
              "xml": {
                "name": "request"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/catalog-data-category-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      },
      "get": {
        "tags": [
          "catalogCategoryManagementV1"
        ],
        "description": "Retrieve list of categories",
        "operationId": "catalogCategoryManagementV1GetTreeGet",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "rootCategoryId",
            "in": "query",
            "type": "integer",
            "required": false
          },
          {
            "name": "depth",
            "in": "query",
            "type": "integer",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/catalog-data-category-tree-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/categories/{id}": {
      "put": {
        "tags": [
          "catalogCategoryRepositoryV1"
        ],
        "description": "Create category service",
        "operationId": "catalogCategoryRepositoryV1SavePut",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "catalogCategoryRepositoryV1SavePutBody",
            "in": "body",
            "schema": {
              "required": [
                "category"
              ],
              "properties": {
                "category": {
                  "$ref": "#/definitions/catalog-data-category-interface"
                }
              },
              "type": "object",
              "xml": {
                "name": "request"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/catalog-data-category-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/categories/{categoryId}/move": {
      "put": {
        "tags": [
          "catalogCategoryManagementV1"
        ],
        "description": "Move category",
        "operationId": "catalogCategoryManagementV1MovePut",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "categoryId",
            "in": "path",
            "type": "integer",
            "required": true
          },
          {
            "name": "catalogCategoryManagementV1MovePutBody",
            "in": "body",
            "schema": {
              "required": [
                "parentId"
              ],
              "properties": {
                "parentId": {
                  "type": "integer"
                },
                "afterId": {
                  "type": "integer"
                }
              },
              "type": "object",
              "xml": {
                "name": "request"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "boolean"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "500": {
            "description": "Internal Server error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/categories/list": {
      "get": {
        "tags": [
          "catalogCategoryListV1"
        ],
        "description": "Get category list",
        "operationId": "catalogCategoryListV1GetListGet",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "searchCriteria[filterGroups][0][filters][0][field]",
            "in": "query",
            "type": "string",
            "description": "Field"
          },
          {
            "name": "searchCriteria[filterGroups][0][filters][0][value]",
            "in": "query",
            "type": "string",
            "description": "Value"
          },
          {
            "name": "searchCriteria[filterGroups][0][filters][0][conditionType]",
            "in": "query",
            "type": "string",
            "description": "Condition type"
          },
          {
            "name": "searchCriteria[sortOrders][0][field]",
            "in": "query",
            "type": "string",
            "description": "Sorting field."
          },
          {
            "name": "searchCriteria[sortOrders][0][direction]",
            "in": "query",
            "type": "string",
            "description": "Sorting direction."
          },
          {
            "name": "searchCriteria[pageSize]",
            "in": "query",
            "type": "integer",
            "description": "Page size."
          },
          {
            "name": "searchCriteria[currentPage]",
            "in": "query",
            "type": "integer",
            "description": "Current page."
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/catalog-data-category-search-results-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/products/options/types": {
      "get": {
        "tags": [
          "catalogProductCustomOptionTypeListV1"
        ],
        "description": "Get custom option types",
        "operationId": "catalogProductCustomOptionTypeListV1GetItemsGet",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/catalog-data-product-custom-option-type-interface"
              }
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/products/{sku}/options": {
      "get": {
        "tags": [
          "catalogProductCustomOptionRepositoryV1"
        ],
        "description": "Get the list of custom options for a specific product",
        "operationId": "catalogProductCustomOptionRepositoryV1GetListGet",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "sku",
            "in": "path",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/catalog-data-product-custom-option-interface"
              }
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/products/{sku}/options/{optionId}": {
      "get": {
        "tags": [
          "catalogProductCustomOptionRepositoryV1"
        ],
        "description": "Get custom option for a specific product",
        "operationId": "catalogProductCustomOptionRepositoryV1GetGet",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "sku",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "optionId",
            "in": "path",
            "type": "integer",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/catalog-data-product-custom-option-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "catalogProductCustomOptionRepositoryV1"
        ],
        "description": "",
        "operationId": "catalogProductCustomOptionRepositoryV1DeleteByIdentifierDelete",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "sku",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "optionId",
            "in": "path",
            "type": "integer",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "boolean"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/products/options": {
      "post": {
        "tags": [
          "catalogProductCustomOptionRepositoryV1"
        ],
        "description": "Save Custom Option",
        "operationId": "catalogProductCustomOptionRepositoryV1SavePost",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "catalogProductCustomOptionRepositoryV1SavePostBody",
            "in": "body",
            "schema": {
              "required": [
                "option"
              ],
              "properties": {
                "option": {
                  "$ref": "#/definitions/catalog-data-product-custom-option-interface"
                }
              },
              "type": "object",
              "xml": {
                "name": "request"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/catalog-data-product-custom-option-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/products/options/{optionId}": {
      "put": {
        "tags": [
          "catalogProductCustomOptionRepositoryV1"
        ],
        "description": "Save Custom Option",
        "operationId": "catalogProductCustomOptionRepositoryV1SavePut",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "optionId",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "catalogProductCustomOptionRepositoryV1SavePutBody",
            "in": "body",
            "schema": {
              "required": [
                "option"
              ],
              "properties": {
                "option": {
                  "$ref": "#/definitions/catalog-data-product-custom-option-interface"
                }
              },
              "type": "object",
              "xml": {
                "name": "request"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/catalog-data-product-custom-option-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/products/links/types": {
      "get": {
        "tags": [
          "catalogProductLinkTypeListV1"
        ],
        "description": "Retrieve information about available product link types",
        "operationId": "catalogProductLinkTypeListV1GetItemsGet",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/catalog-data-product-link-type-interface"
              }
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/products/links/{type}/attributes": {
      "get": {
        "tags": [
          "catalogProductLinkTypeListV1"
        ],
        "description": "Provide a list of the product link type attributes",
        "operationId": "catalogProductLinkTypeListV1GetItemAttributesGet",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "type",
            "in": "path",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/catalog-data-product-link-attribute-interface"
              }
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/products/{sku}/links/{type}": {
      "get": {
        "tags": [
          "catalogProductLinkManagementV1"
        ],
        "description": "Provide the list of links for a specific product",
        "operationId": "catalogProductLinkManagementV1GetLinkedItemsByTypeGet",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "sku",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "type",
            "in": "path",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/catalog-data-product-link-interface"
              }
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/products/{sku}/links": {
      "post": {
        "tags": [
          "catalogProductLinkManagementV1"
        ],
        "description": "Assign a product link to another product",
        "operationId": "catalogProductLinkManagementV1SetProductLinksPost",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "sku",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "catalogProductLinkManagementV1SetProductLinksPostBody",
            "in": "body",
            "schema": {
              "required": [
                "items"
              ],
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/catalog-data-product-link-interface"
                  }
                }
              },
              "type": "object",
              "xml": {
                "name": "request"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "boolean"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      },
      "put": {
        "tags": [
          "catalogProductLinkRepositoryV1"
        ],
        "description": "Save product link",
        "operationId": "catalogProductLinkRepositoryV1SavePut",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "sku",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "catalogProductLinkRepositoryV1SavePutBody",
            "in": "body",
            "schema": {
              "required": [
                "entity"
              ],
              "properties": {
                "entity": {
                  "$ref": "#/definitions/catalog-data-product-link-interface"
                }
              },
              "type": "object",
              "xml": {
                "name": "request"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "boolean"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/products/{sku}/links/{type}/{linkedProductSku}": {
      "delete": {
        "tags": [
          "catalogProductLinkRepositoryV1"
        ],
        "description": "",
        "operationId": "catalogProductLinkRepositoryV1DeleteByIdDelete",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "sku",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "type",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "linkedProductSku",
            "in": "path",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "boolean"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/categories/{categoryId}/products": {
      "get": {
        "tags": [
          "catalogCategoryLinkManagementV1"
        ],
        "description": "Get products assigned to category",
        "operationId": "catalogCategoryLinkManagementV1GetAssignedProductsGet",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "categoryId",
            "in": "path",
            "type": "integer",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/catalog-data-category-product-link-interface"
              }
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      },
      "post": {
        "tags": [
          "catalogCategoryLinkRepositoryV1"
        ],
        "description": "Assign a product to the required category",
        "operationId": "catalogCategoryLinkRepositoryV1SavePost",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "categoryId",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "catalogCategoryLinkRepositoryV1SavePostBody",
            "in": "body",
            "schema": {
              "required": [
                "productLink"
              ],
              "properties": {
                "productLink": {
                  "$ref": "#/definitions/catalog-data-category-product-link-interface"
                }
              },
              "type": "object",
              "xml": {
                "name": "request"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "boolean",
              "description": "will returned True if assigned"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      },
      "put": {
        "tags": [
          "catalogCategoryLinkRepositoryV1"
        ],
        "description": "Assign a product to the required category",
        "operationId": "catalogCategoryLinkRepositoryV1SavePut",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "categoryId",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "catalogCategoryLinkRepositoryV1SavePutBody",
            "in": "body",
            "schema": {
              "required": [
                "productLink"
              ],
              "properties": {
                "productLink": {
                  "$ref": "#/definitions/catalog-data-category-product-link-interface"
                }
              },
              "type": "object",
              "xml": {
                "name": "request"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "boolean",
              "description": "will returned True if assigned"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/categories/{categoryId}/products/{sku}": {
      "delete": {
        "tags": [
          "catalogCategoryLinkRepositoryV1"
        ],
        "description": "Remove the product assignment from the category by category id and sku",
        "operationId": "catalogCategoryLinkRepositoryV1DeleteByIdsDelete",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "categoryId",
            "in": "path",
            "type": "integer",
            "required": true
          },
          {
            "name": "sku",
            "in": "path",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "boolean",
              "description": "will returned True if products successfully deleted"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/products/{sku}/websites": {
      "post": {
        "tags": [
          "catalogProductWebsiteLinkRepositoryV1"
        ],
        "description": "Assign a product to the website",
        "operationId": "catalogProductWebsiteLinkRepositoryV1SavePost",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "sku",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "catalogProductWebsiteLinkRepositoryV1SavePostBody",
            "in": "body",
            "schema": {
              "required": [
                "productWebsiteLink"
              ],
              "properties": {
                "productWebsiteLink": {
                  "$ref": "#/definitions/catalog-data-product-website-link-interface"
                }
              },
              "type": "object",
              "xml": {
                "name": "request"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "boolean",
              "description": "will returned True if website successfully assigned to product"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      },
      "put": {
        "tags": [
          "catalogProductWebsiteLinkRepositoryV1"
        ],
        "description": "Assign a product to the website",
        "operationId": "catalogProductWebsiteLinkRepositoryV1SavePut",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "sku",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "catalogProductWebsiteLinkRepositoryV1SavePutBody",
            "in": "body",
            "schema": {
              "required": [
                "productWebsiteLink"
              ],
              "properties": {
                "productWebsiteLink": {
                  "$ref": "#/definitions/catalog-data-product-website-link-interface"
                }
              },
              "type": "object",
              "xml": {
                "name": "request"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "boolean",
              "description": "will returned True if website successfully assigned to product"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/products/{sku}/websites/{websiteId}": {
      "delete": {
        "tags": [
          "catalogProductWebsiteLinkRepositoryV1"
        ],
        "description": "Remove the website assignment from the product by product sku",
        "operationId": "catalogProductWebsiteLinkRepositoryV1DeleteByIdDelete",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "sku",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "websiteId",
            "in": "path",
            "type": "integer",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "boolean",
              "description": "will returned True if website successfully unassigned from product"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/products-render-info": {
      "get": {
        "tags": [
          "catalogProductRenderListV1"
        ],
        "description": "Collect and retrieve the list of product render info. This info contains raw prices and formatted prices, product name, stock status, store_id, etc.",
        "operationId": "catalogProductRenderListV1GetListGet",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "searchCriteria[filterGroups][0][filters][0][field]",
            "in": "query",
            "type": "string",
            "description": "Field"
          },
          {
            "name": "searchCriteria[filterGroups][0][filters][0][value]",
            "in": "query",
            "type": "string",
            "description": "Value"
          },
          {
            "name": "searchCriteria[filterGroups][0][filters][0][conditionType]",
            "in": "query",
            "type": "string",
            "description": "Condition type"
          },
          {
            "name": "searchCriteria[sortOrders][0][field]",
            "in": "query",
            "type": "string",
            "description": "Sorting field."
          },
          {
            "name": "searchCriteria[sortOrders][0][direction]",
            "in": "query",
            "type": "string",
            "description": "Sorting direction."
          },
          {
            "name": "searchCriteria[pageSize]",
            "in": "query",
            "type": "integer",
            "description": "Page size."
          },
          {
            "name": "searchCriteria[currentPage]",
            "in": "query",
            "type": "integer",
            "description": "Current page."
          },
          {
            "name": "storeId",
            "in": "query",
            "type": "integer",
            "required": true
          },
          {
            "name": "currencyCode",
            "in": "query",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/catalog-data-product-render-search-results-interface"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/carts/{cartId}": {
      "get": {
        "tags": [
          "quoteCartRepositoryV1"
        ],
        "description": "Enables an administrative user to return information for a specified cart.",
        "operationId": "quoteCartRepositoryV1GetGet",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "cartId",
            "in": "path",
            "type": "integer",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/quote-data-cart-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      },
      "put": {
        "tags": [
          "quoteCartManagementV1"
        ],
        "description": "Assigns a specified customer to a specified shopping cart.",
        "operationId": "quoteCartManagementV1AssignCustomerPut",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "cartId",
            "in": "path",
            "type": "integer",
            "required": true,
            "description": "The cart ID."
          },
          {
            "name": "quoteCartManagementV1AssignCustomerPutBody",
            "in": "body",
            "schema": {
              "required": [
                "customerId",
                "storeId"
              ],
              "properties": {
                "customerId": {
                  "type": "integer",
                  "description": "The customer ID."
                },
                "storeId": {
                  "type": "integer"
                }
              },
              "type": "object",
              "xml": {
                "name": "request"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "boolean"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/carts/search": {
      "get": {
        "tags": [
          "quoteCartRepositoryV1"
        ],
        "description": "Enables administrative users to list carts that match specified search criteria. This call returns an array of objects, but detailed information about each object’s attributes might not be included.  See https://devdocs.magento.com/codelinks/attributes.html#CartRepositoryInterface to determine which call to use to get detailed information about all attributes for an object.",
        "operationId": "quoteCartRepositoryV1GetListGet",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "searchCriteria[filterGroups][0][filters][0][field]",
            "in": "query",
            "type": "string",
            "description": "Field"
          },
          {
            "name": "searchCriteria[filterGroups][0][filters][0][value]",
            "in": "query",
            "type": "string",
            "description": "Value"
          },
          {
            "name": "searchCriteria[filterGroups][0][filters][0][conditionType]",
            "in": "query",
            "type": "string",
            "description": "Condition type"
          },
          {
            "name": "searchCriteria[sortOrders][0][field]",
            "in": "query",
            "type": "string",
            "description": "Sorting field."
          },
          {
            "name": "searchCriteria[sortOrders][0][direction]",
            "in": "query",
            "type": "string",
            "description": "Sorting direction."
          },
          {
            "name": "searchCriteria[pageSize]",
            "in": "query",
            "type": "integer",
            "description": "Page size."
          },
          {
            "name": "searchCriteria[currentPage]",
            "in": "query",
            "type": "integer",
            "description": "Current page."
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/quote-data-cart-search-results-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/carts/mine": {
      "put": {
        "tags": [
          "quoteCartRepositoryV1"
        ],
        "description": "Save quote",
        "operationId": "quoteCartRepositoryV1SavePut",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "quoteCartRepositoryV1SavePutBody",
            "in": "body",
            "schema": {
              "required": [
                "quote"
              ],
              "properties": {
                "quote": {
                  "$ref": "#/definitions/quote-data-cart-interface"
                }
              },
              "type": "object",
              "xml": {
                "name": "request"
              }
            }
          }
        ],
        "responses": {
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      },
      "post": {
        "tags": [
          "quoteCartManagementV1"
        ],
        "description": "Creates an empty cart and quote for a specified customer if customer does not have a cart yet.",
        "operationId": "quoteCartManagementV1CreateEmptyCartForCustomerPost",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "integer",
              "description": "new cart ID if customer did not have a cart or ID of the existing cart otherwise."
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      },
      "get": {
        "tags": [
          "quoteCartManagementV1"
        ],
        "description": "Returns information for the cart for a specified customer.",
        "operationId": "quoteCartManagementV1GetCartForCustomerGet",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/quote-data-cart-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/carts/": {
      "post": {
        "tags": [
          "quoteCartManagementV1"
        ],
        "description": "Creates an empty cart and quote for a guest.",
        "operationId": "quoteCartManagementV1CreateEmptyCartPost",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "integer",
              "description": "Cart ID."
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/customers/{customerId}/carts": {
      "post": {
        "tags": [
          "quoteCartManagementV1"
        ],
        "description": "Creates an empty cart and quote for a specified customer if customer does not have a cart yet.",
        "operationId": "quoteCartManagementV1CreateEmptyCartForCustomerPost",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "type": "integer",
            "required": true,
            "description": "The customer ID."
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "integer",
              "description": "new cart ID if customer did not have a cart or ID of the existing cart otherwise."
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/carts/mine/order": {
      "put": {
        "tags": [
          "quoteCartManagementV1"
        ],
        "description": "Places an order for a specified cart.",
        "operationId": "quoteCartManagementV1PlaceOrderPut",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "quoteCartManagementV1PlaceOrderPutBody",
            "in": "body",
            "schema": {
              "properties": {
                "paymentMethod": {
                  "$ref": "#/definitions/quote-data-payment-interface"
                }
              },
              "type": "object",
              "xml": {
                "name": "request"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "integer",
              "description": "Order ID."
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/carts/{cartId}/order": {
      "put": {
        "tags": [
          "quoteCartManagementV1"
        ],
        "description": "Places an order for a specified cart.",
        "operationId": "quoteCartManagementV1PlaceOrderPut",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "cartId",
            "in": "path",
            "type": "integer",
            "required": true,
            "description": "The cart ID."
          },
          {
            "name": "quoteCartManagementV1PlaceOrderPutBody",
            "in": "body",
            "schema": {
              "properties": {
                "paymentMethod": {
                  "$ref": "#/definitions/quote-data-payment-interface"
                }
              },
              "type": "object",
              "xml": {
                "name": "request"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "integer",
              "description": "Order ID."
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/guest-carts/{cartId}": {
      "get": {
        "tags": [
          "quoteGuestCartRepositoryV1"
        ],
        "description": "Enable a guest user to return information for a specified cart.",
        "operationId": "quoteGuestCartRepositoryV1GetGet",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "cartId",
            "in": "path",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/quote-data-cart-interface"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      },
      "put": {
        "tags": [
          "quoteGuestCartManagementV1"
        ],
        "description": "Assign a specified customer to a specified shopping cart.",
        "operationId": "quoteGuestCartManagementV1AssignCustomerPut",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "cartId",
            "in": "path",
            "type": "string",
            "required": true,
            "description": "The cart ID."
          },
          {
            "name": "quoteGuestCartManagementV1AssignCustomerPutBody",
            "in": "body",
            "schema": {
              "required": [
                "customerId",
                "storeId"
              ],
              "properties": {
                "customerId": {
                  "type": "integer",
                  "description": "The customer ID."
                },
                "storeId": {
                  "type": "integer"
                }
              },
              "type": "object",
              "xml": {
                "name": "request"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "boolean"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/guest-carts": {
      "post": {
        "tags": [
          "quoteGuestCartManagementV1"
        ],
        "description": "Enable an customer or guest user to create an empty cart and quote for an anonymous customer.",
        "operationId": "quoteGuestCartManagementV1CreateEmptyCartPost",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "string",
              "description": "Cart ID."
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/guest-carts/{cartId}/order": {
      "put": {
        "tags": [
          "quoteGuestCartManagementV1"
        ],
        "description": "Place an order for a specified cart.",
        "operationId": "quoteGuestCartManagementV1PlaceOrderPut",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "cartId",
            "in": "path",
            "type": "string",
            "required": true,
            "description": "The cart ID."
          },
          {
            "name": "quoteGuestCartManagementV1PlaceOrderPutBody",
            "in": "body",
            "schema": {
              "properties": {
                "paymentMethod": {
                  "$ref": "#/definitions/quote-data-payment-interface"
                }
              },
              "type": "object",
              "xml": {
                "name": "request"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "integer",
              "description": "Order ID."
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/carts/{cartId}/shipping-methods": {
      "get": {
        "tags": [
          "quoteShippingMethodManagementV1"
        ],
        "description": "Lists applicable shipping methods for a specified quote.",
        "operationId": "quoteShippingMethodManagementV1GetListGet",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "cartId",
            "in": "path",
            "type": "integer",
            "required": true,
            "description": "The shopping cart ID."
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "array",
              "description": "An array of shipping methods.",
              "items": {
                "$ref": "#/definitions/quote-data-shipping-method-interface"
              }
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/carts/{cartId}/estimate-shipping-methods-by-address-id": {
      "post": {
        "tags": [
          "quoteShippingMethodManagementV1"
        ],
        "description": "Estimate shipping",
        "operationId": "quoteShippingMethodManagementV1EstimateByAddressIdPost",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "cartId",
            "in": "path",
            "type": "integer",
            "required": true,
            "description": "The shopping cart ID."
          },
          {
            "name": "quoteShippingMethodManagementV1EstimateByAddressIdPostBody",
            "in": "body",
            "schema": {
              "required": [
                "addressId"
              ],
              "properties": {
                "addressId": {
                  "type": "integer",
                  "description": "The estimate address id"
                }
              },
              "type": "object",
              "xml": {
                "name": "request"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "array",
              "description": "An array of shipping methods.",
              "items": {
                "$ref": "#/definitions/quote-data-shipping-method-interface"
              }
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/carts/mine/shipping-methods": {
      "get": {
        "tags": [
          "quoteShippingMethodManagementV1"
        ],
        "description": "Lists applicable shipping methods for a specified quote.",
        "operationId": "quoteShippingMethodManagementV1GetListGet",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "array",
              "description": "An array of shipping methods.",
              "items": {
                "$ref": "#/definitions/quote-data-shipping-method-interface"
              }
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/carts/mine/estimate-shipping-methods-by-address-id": {
      "post": {
        "tags": [
          "quoteShippingMethodManagementV1"
        ],
        "description": "Estimate shipping",
        "operationId": "quoteShippingMethodManagementV1EstimateByAddressIdPost",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "quoteShippingMethodManagementV1EstimateByAddressIdPostBody",
            "in": "body",
            "schema": {
              "required": [
                "addressId"
              ],
              "properties": {
                "addressId": {
                  "type": "integer",
                  "description": "The estimate address id"
                }
              },
              "type": "object",
              "xml": {
                "name": "request"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "array",
              "description": "An array of shipping methods.",
              "items": {
                "$ref": "#/definitions/quote-data-shipping-method-interface"
              }
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/carts/{cartId}/estimate-shipping-methods": {
      "post": {
        "tags": [
          "quoteShipmentEstimationV1"
        ],
        "description": "Estimate shipping by address and return list of available shipping methods",
        "operationId": "quoteShipmentEstimationV1EstimateByExtendedAddressPost",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "cartId",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "quoteShipmentEstimationV1EstimateByExtendedAddressPostBody",
            "in": "body",
            "schema": {
              "required": [
                "address"
              ],
              "properties": {
                "address": {
                  "$ref": "#/definitions/quote-data-address-interface"
                }
              },
              "type": "object",
              "xml": {
                "name": "request"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "array",
              "description": "An array of shipping methods",
              "items": {
                "$ref": "#/definitions/quote-data-shipping-method-interface"
              }
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/carts/mine/estimate-shipping-methods": {
      "post": {
        "tags": [
          "quoteShipmentEstimationV1"
        ],
        "description": "Estimate shipping by address and return list of available shipping methods",
        "operationId": "quoteShipmentEstimationV1EstimateByExtendedAddressPost",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "quoteShipmentEstimationV1EstimateByExtendedAddressPostBody",
            "in": "body",
            "schema": {
              "required": [
                "address"
              ],
              "properties": {
                "address": {
                  "$ref": "#/definitions/quote-data-address-interface"
                }
              },
              "type": "object",
              "xml": {
                "name": "request"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "array",
              "description": "An array of shipping methods",
              "items": {
                "$ref": "#/definitions/quote-data-shipping-method-interface"
              }
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/guest-carts/{cartId}/shipping-methods": {
      "get": {
        "tags": [
          "quoteGuestShippingMethodManagementV1"
        ],
        "description": "List applicable shipping methods for a specified quote.",
        "operationId": "quoteGuestShippingMethodManagementV1GetListGet",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "cartId",
            "in": "path",
            "type": "string",
            "required": true,
            "description": "The shopping cart ID."
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "array",
              "description": "An array of shipping methods.",
              "items": {
                "$ref": "#/definitions/quote-data-shipping-method-interface"
              }
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/guest-carts/{cartId}/estimate-shipping-methods": {
      "post": {
        "tags": [
          "quoteGuestShipmentEstimationV1"
        ],
        "description": "Estimate shipping by address and return list of available shipping methods",
        "operationId": "quoteGuestShipmentEstimationV1EstimateByExtendedAddressPost",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "cartId",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "quoteGuestShipmentEstimationV1EstimateByExtendedAddressPostBody",
            "in": "body",
            "schema": {
              "required": [
                "address"
              ],
              "properties": {
                "address": {
                  "$ref": "#/definitions/quote-data-address-interface"
                }
              },
              "type": "object",
              "xml": {
                "name": "request"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "array",
              "description": "An array of shipping methods",
              "items": {
                "$ref": "#/definitions/quote-data-shipping-method-interface"
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/carts/{cartId}/items": {
      "get": {
        "tags": [
          "quoteCartItemRepositoryV1"
        ],
        "description": "Lists items that are assigned to a specified cart.",
        "operationId": "quoteCartItemRepositoryV1GetListGet",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "cartId",
            "in": "path",
            "type": "integer",
            "required": true,
            "description": "The cart ID."
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "array",
              "description": "Array of items.",
              "items": {
                "$ref": "#/definitions/quote-data-cart-item-interface"
              }
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/carts/{quoteId}/items": {
      "post": {
        "tags": [
          "quoteCartItemRepositoryV1"
        ],
        "description": "Add/update the specified cart item.",
        "operationId": "quoteCartItemRepositoryV1SavePost",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "quoteId",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "quoteCartItemRepositoryV1SavePostBody",
            "in": "body",
            "schema": {
              "required": [
                "cartItem"
              ],
              "properties": {
                "cartItem": {
                  "$ref": "#/definitions/quote-data-cart-item-interface"
                }
              },
              "type": "object",
              "xml": {
                "name": "request"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/quote-data-cart-item-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/carts/{cartId}/items/{itemId}": {
      "put": {
        "tags": [
          "quoteCartItemRepositoryV1"
        ],
        "description": "Add/update the specified cart item.",
        "operationId": "quoteCartItemRepositoryV1SavePut",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "cartId",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "itemId",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "quoteCartItemRepositoryV1SavePutBody",
            "in": "body",
            "schema": {
              "required": [
                "cartItem"
              ],
              "properties": {
                "cartItem": {
                  "$ref": "#/definitions/quote-data-cart-item-interface"
                }
              },
              "type": "object",
              "xml": {
                "name": "request"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/quote-data-cart-item-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "quoteCartItemRepositoryV1"
        ],
        "description": "Removes the specified item from the specified cart.",
        "operationId": "quoteCartItemRepositoryV1DeleteByIdDelete",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "cartId",
            "in": "path",
            "type": "integer",
            "required": true,
            "description": "The cart ID."
          },
          {
            "name": "itemId",
            "in": "path",
            "type": "integer",
            "required": true,
            "description": "The item ID of the item to be removed."
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "boolean"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/carts/mine/items": {
      "get": {
        "tags": [
          "quoteCartItemRepositoryV1"
        ],
        "description": "Lists items that are assigned to a specified cart.",
        "operationId": "quoteCartItemRepositoryV1GetListGet",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "array",
              "description": "Array of items.",
              "items": {
                "$ref": "#/definitions/quote-data-cart-item-interface"
              }
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      },
      "post": {
        "tags": [
          "quoteCartItemRepositoryV1"
        ],
        "description": "Add/update the specified cart item.",
        "operationId": "quoteCartItemRepositoryV1SavePost",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "quoteCartItemRepositoryV1SavePostBody",
            "in": "body",
            "schema": {
              "required": [
                "cartItem"
              ],
              "properties": {
                "cartItem": {
                  "$ref": "#/definitions/quote-data-cart-item-interface"
                }
              },
              "type": "object",
              "xml": {
                "name": "request"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/quote-data-cart-item-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/carts/mine/items/{itemId}": {
      "put": {
        "tags": [
          "quoteCartItemRepositoryV1"
        ],
        "description": "Add/update the specified cart item.",
        "operationId": "quoteCartItemRepositoryV1SavePut",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "itemId",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "quoteCartItemRepositoryV1SavePutBody",
            "in": "body",
            "schema": {
              "required": [
                "cartItem"
              ],
              "properties": {
                "cartItem": {
                  "$ref": "#/definitions/quote-data-cart-item-interface"
                }
              },
              "type": "object",
              "xml": {
                "name": "request"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/quote-data-cart-item-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "quoteCartItemRepositoryV1"
        ],
        "description": "Removes the specified item from the specified cart.",
        "operationId": "quoteCartItemRepositoryV1DeleteByIdDelete",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "itemId",
            "in": "path",
            "type": "integer",
            "required": true,
            "description": "The item ID of the item to be removed."
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "boolean"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/guest-carts/{cartId}/items": {
      "get": {
        "tags": [
          "quoteGuestCartItemRepositoryV1"
        ],
        "description": "List items that are assigned to a specified cart.",
        "operationId": "quoteGuestCartItemRepositoryV1GetListGet",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "cartId",
            "in": "path",
            "type": "string",
            "required": true,
            "description": "The cart ID."
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "array",
              "description": "Array of items.",
              "items": {
                "$ref": "#/definitions/quote-data-cart-item-interface"
              }
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      },
      "post": {
        "tags": [
          "quoteGuestCartItemRepositoryV1"
        ],
        "description": "Add/update the specified cart item.",
        "operationId": "quoteGuestCartItemRepositoryV1SavePost",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "cartId",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "quoteGuestCartItemRepositoryV1SavePostBody",
            "in": "body",
            "schema": {
              "required": [
                "cartItem"
              ],
              "properties": {
                "cartItem": {
                  "$ref": "#/definitions/quote-data-cart-item-interface"
                }
              },
              "type": "object",
              "xml": {
                "name": "request"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/quote-data-cart-item-interface"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/guest-carts/{cartId}/items/{itemId}": {
      "put": {
        "tags": [
          "quoteGuestCartItemRepositoryV1"
        ],
        "description": "Add/update the specified cart item.",
        "operationId": "quoteGuestCartItemRepositoryV1SavePut",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "cartId",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "itemId",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "quoteGuestCartItemRepositoryV1SavePutBody",
            "in": "body",
            "schema": {
              "required": [
                "cartItem"
              ],
              "properties": {
                "cartItem": {
                  "$ref": "#/definitions/quote-data-cart-item-interface"
                }
              },
              "type": "object",
              "xml": {
                "name": "request"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/quote-data-cart-item-interface"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "quoteGuestCartItemRepositoryV1"
        ],
        "description": "Remove the specified item from the specified cart.",
        "operationId": "quoteGuestCartItemRepositoryV1DeleteByIdDelete",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "cartId",
            "in": "path",
            "type": "string",
            "required": true,
            "description": "The cart ID."
          },
          {
            "name": "itemId",
            "in": "path",
            "type": "integer",
            "required": true,
            "description": "The item ID of the item to be removed."
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "boolean"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/carts/{cartId}/selected-payment-method": {
      "get": {
        "tags": [
          "quotePaymentMethodManagementV1"
        ],
        "description": "Returns the payment method for a specified shopping cart.",
        "operationId": "quotePaymentMethodManagementV1GetGet",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "cartId",
            "in": "path",
            "type": "integer",
            "required": true,
            "description": "The cart ID."
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/quote-data-payment-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      },
      "put": {
        "tags": [
          "quotePaymentMethodManagementV1"
        ],
        "description": "Adds a specified payment method to a specified shopping cart.",
        "operationId": "quotePaymentMethodManagementV1SetPut",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "cartId",
            "in": "path",
            "type": "integer",
            "required": true,
            "description": "The cart ID."
          },
          {
            "name": "quotePaymentMethodManagementV1SetPutBody",
            "in": "body",
            "schema": {
              "required": [
                "method"
              ],
              "properties": {
                "method": {
                  "$ref": "#/definitions/quote-data-payment-interface"
                }
              },
              "type": "object",
              "xml": {
                "name": "request"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "string",
              "description": "redirect url or error message."
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/carts/{cartId}/payment-methods": {
      "get": {
        "tags": [
          "quotePaymentMethodManagementV1"
        ],
        "description": "Lists available payment methods for a specified shopping cart. This call returns an array of objects, but detailed information about each object’s attributes might not be included.  See https://devdocs.magento.com/codelinks/attributes.html#PaymentMethodManagementInterface to determine which call to use to get detailed information about all attributes for an object.",
        "operationId": "quotePaymentMethodManagementV1GetListGet",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "cartId",
            "in": "path",
            "type": "integer",
            "required": true,
            "description": "The cart ID."
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "array",
              "description": "Array of payment methods.",
              "items": {
                "$ref": "#/definitions/quote-data-payment-method-interface"
              }
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/carts/mine/selected-payment-method": {
      "get": {
        "tags": [
          "quotePaymentMethodManagementV1"
        ],
        "description": "Returns the payment method for a specified shopping cart.",
        "operationId": "quotePaymentMethodManagementV1GetGet",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/quote-data-payment-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      },
      "put": {
        "tags": [
          "quotePaymentMethodManagementV1"
        ],
        "description": "Adds a specified payment method to a specified shopping cart.",
        "operationId": "quotePaymentMethodManagementV1SetPut",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "quotePaymentMethodManagementV1SetPutBody",
            "in": "body",
            "schema": {
              "required": [
                "method"
              ],
              "properties": {
                "method": {
                  "$ref": "#/definitions/quote-data-payment-interface"
                }
              },
              "type": "object",
              "xml": {
                "name": "request"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "string",
              "description": "redirect url or error message."
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/carts/mine/payment-methods": {
      "get": {
        "tags": [
          "quotePaymentMethodManagementV1"
        ],
        "description": "Lists available payment methods for a specified shopping cart. This call returns an array of objects, but detailed information about each object’s attributes might not be included.  See https://devdocs.magento.com/codelinks/attributes.html#PaymentMethodManagementInterface to determine which call to use to get detailed information about all attributes for an object.",
        "operationId": "quotePaymentMethodManagementV1GetListGet",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "array",
              "description": "Array of payment methods.",
              "items": {
                "$ref": "#/definitions/quote-data-payment-method-interface"
              }
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/guest-carts/{cartId}/selected-payment-method": {
      "get": {
        "tags": [
          "quoteGuestPaymentMethodManagementV1"
        ],
        "description": "Return the payment method for a specified shopping cart.",
        "operationId": "quoteGuestPaymentMethodManagementV1GetGet",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "cartId",
            "in": "path",
            "type": "string",
            "required": true,
            "description": "The cart ID."
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/quote-data-payment-interface"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      },
      "put": {
        "tags": [
          "quoteGuestPaymentMethodManagementV1"
        ],
        "description": "Add a specified payment method to a specified shopping cart.",
        "operationId": "quoteGuestPaymentMethodManagementV1SetPut",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "cartId",
            "in": "path",
            "type": "string",
            "required": true,
            "description": "The cart ID."
          },
          {
            "name": "quoteGuestPaymentMethodManagementV1SetPutBody",
            "in": "body",
            "schema": {
              "required": [
                "method"
              ],
              "properties": {
                "method": {
                  "$ref": "#/definitions/quote-data-payment-interface"
                }
              },
              "type": "object",
              "xml": {
                "name": "request"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "integer",
              "description": "Payment method ID."
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/guest-carts/{cartId}/payment-methods": {
      "get": {
        "tags": [
          "quoteGuestPaymentMethodManagementV1"
        ],
        "description": "List available payment methods for a specified shopping cart. This call returns an array of objects, but detailed information about each object’s attributes might not be included.  See https://devdocs.magento.com/codelinks/attributes.html#GuestPaymentMethodManagementInterface to determine which call to use to get detailed information about all attributes for an object.",
        "operationId": "quoteGuestPaymentMethodManagementV1GetListGet",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "cartId",
            "in": "path",
            "type": "string",
            "required": true,
            "description": "The cart ID."
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "array",
              "description": "Array of payment methods.",
              "items": {
                "$ref": "#/definitions/quote-data-payment-method-interface"
              }
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/carts/{cartId}/billing-address": {
      "get": {
        "tags": [
          "quoteBillingAddressManagementV1"
        ],
        "description": "Returns the billing address for a specified quote.",
        "operationId": "quoteBillingAddressManagementV1GetGet",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "cartId",
            "in": "path",
            "type": "integer",
            "required": true,
            "description": "The cart ID."
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/quote-data-address-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      },
      "post": {
        "tags": [
          "quoteBillingAddressManagementV1"
        ],
        "description": "Assigns a specified billing address to a specified cart.",
        "operationId": "quoteBillingAddressManagementV1AssignPost",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "cartId",
            "in": "path",
            "type": "integer",
            "required": true,
            "description": "The cart ID."
          },
          {
            "name": "quoteBillingAddressManagementV1AssignPostBody",
            "in": "body",
            "schema": {
              "required": [
                "address"
              ],
              "properties": {
                "address": {
                  "$ref": "#/definitions/quote-data-address-interface"
                },
                "useForShipping": {
                  "type": "boolean"
                }
              },
              "type": "object",
              "xml": {
                "name": "request"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "integer",
              "description": "Address ID."
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/carts/mine/billing-address": {
      "get": {
        "tags": [
          "quoteBillingAddressManagementV1"
        ],
        "description": "Returns the billing address for a specified quote.",
        "operationId": "quoteBillingAddressManagementV1GetGet",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/quote-data-address-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      },
      "post": {
        "tags": [
          "quoteBillingAddressManagementV1"
        ],
        "description": "Assigns a specified billing address to a specified cart.",
        "operationId": "quoteBillingAddressManagementV1AssignPost",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "quoteBillingAddressManagementV1AssignPostBody",
            "in": "body",
            "schema": {
              "required": [
                "address"
              ],
              "properties": {
                "address": {
                  "$ref": "#/definitions/quote-data-address-interface"
                },
                "useForShipping": {
                  "type": "boolean"
                }
              },
              "type": "object",
              "xml": {
                "name": "request"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "integer",
              "description": "Address ID."
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/guest-carts/{cartId}/billing-address": {
      "get": {
        "tags": [
          "quoteGuestBillingAddressManagementV1"
        ],
        "description": "Return the billing address for a specified quote.",
        "operationId": "quoteGuestBillingAddressManagementV1GetGet",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "cartId",
            "in": "path",
            "type": "string",
            "required": true,
            "description": "The cart ID."
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/quote-data-address-interface"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      },
      "post": {
        "tags": [
          "quoteGuestBillingAddressManagementV1"
        ],
        "description": "Assign a specified billing address to a specified cart.",
        "operationId": "quoteGuestBillingAddressManagementV1AssignPost",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "cartId",
            "in": "path",
            "type": "string",
            "required": true,
            "description": "The cart ID."
          },
          {
            "name": "quoteGuestBillingAddressManagementV1AssignPostBody",
            "in": "body",
            "schema": {
              "required": [
                "address"
              ],
              "properties": {
                "address": {
                  "$ref": "#/definitions/quote-data-address-interface"
                },
                "useForShipping": {
                  "type": "boolean"
                }
              },
              "type": "object",
              "xml": {
                "name": "request"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "integer",
              "description": "Address ID."
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/carts/{cartId}/coupons": {
      "get": {
        "tags": [
          "quoteCouponManagementV1"
        ],
        "description": "Returns information for a coupon in a specified cart.",
        "operationId": "quoteCouponManagementV1GetGet",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "cartId",
            "in": "path",
            "type": "integer",
            "required": true,
            "description": "The cart ID."
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "string",
              "description": "The coupon code data."
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "quoteCouponManagementV1"
        ],
        "description": "Deletes a coupon from a specified cart.",
        "operationId": "quoteCouponManagementV1RemoveDelete",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "cartId",
            "in": "path",
            "type": "integer",
            "required": true,
            "description": "The cart ID."
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "boolean"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/carts/{cartId}/coupons/{couponCode}": {
      "put": {
        "tags": [
          "quoteCouponManagementV1"
        ],
        "description": "Adds a coupon by code to a specified cart.",
        "operationId": "quoteCouponManagementV1SetPut",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "cartId",
            "in": "path",
            "type": "integer",
            "required": true,
            "description": "The cart ID."
          },
          {
            "name": "couponCode",
            "in": "path",
            "type": "string",
            "required": true,
            "description": "The coupon code data."
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "boolean"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/carts/mine/coupons": {
      "get": {
        "tags": [
          "quoteCouponManagementV1"
        ],
        "description": "Returns information for a coupon in a specified cart.",
        "operationId": "quoteCouponManagementV1GetGet",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "string",
              "description": "The coupon code data."
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "quoteCouponManagementV1"
        ],
        "description": "Deletes a coupon from a specified cart.",
        "operationId": "quoteCouponManagementV1RemoveDelete",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "boolean"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/carts/mine/coupons/{couponCode}": {
      "put": {
        "tags": [
          "quoteCouponManagementV1"
        ],
        "description": "Adds a coupon by code to a specified cart.",
        "operationId": "quoteCouponManagementV1SetPut",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "couponCode",
            "in": "path",
            "type": "string",
            "required": true,
            "description": "The coupon code data."
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "boolean"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/guest-carts/{cartId}/coupons": {
      "get": {
        "tags": [
          "quoteGuestCouponManagementV1"
        ],
        "description": "Return information for a coupon in a specified cart.",
        "operationId": "quoteGuestCouponManagementV1GetGet",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "cartId",
            "in": "path",
            "type": "string",
            "required": true,
            "description": "The cart ID."
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "string",
              "description": "The coupon code data."
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "quoteGuestCouponManagementV1"
        ],
        "description": "Delete a coupon from a specified cart.",
        "operationId": "quoteGuestCouponManagementV1RemoveDelete",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "cartId",
            "in": "path",
            "type": "string",
            "required": true,
            "description": "The cart ID."
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "boolean"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/guest-carts/{cartId}/coupons/{couponCode}": {
      "put": {
        "tags": [
          "quoteGuestCouponManagementV1"
        ],
        "description": "Add a coupon by code to a specified cart.",
        "operationId": "quoteGuestCouponManagementV1SetPut",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "cartId",
            "in": "path",
            "type": "string",
            "required": true,
            "description": "The cart ID."
          },
          {
            "name": "couponCode",
            "in": "path",
            "type": "string",
            "required": true,
            "description": "The coupon code data."
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "boolean"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/carts/{cartId}/totals": {
      "get": {
        "tags": [
          "quoteCartTotalRepositoryV1"
        ],
        "description": "Returns quote totals data for a specified cart.",
        "operationId": "quoteCartTotalRepositoryV1GetGet",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "cartId",
            "in": "path",
            "type": "integer",
            "required": true,
            "description": "The cart ID."
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/quote-data-totals-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/carts/mine/totals": {
      "get": {
        "tags": [
          "quoteCartTotalRepositoryV1"
        ],
        "description": "Returns quote totals data for a specified cart.",
        "operationId": "quoteCartTotalRepositoryV1GetGet",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/quote-data-totals-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/guest-carts/{cartId}/collect-totals": {
      "put": {
        "tags": [
          "quoteGuestCartTotalManagementV1"
        ],
        "description": "Set shipping/billing methods and additional data for cart and collect totals for guest.",
        "operationId": "quoteGuestCartTotalManagementV1CollectTotalsPut",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "cartId",
            "in": "path",
            "type": "string",
            "required": true,
            "description": "The cart ID."
          },
          {
            "name": "quoteGuestCartTotalManagementV1CollectTotalsPutBody",
            "in": "body",
            "schema": {
              "required": [
                "paymentMethod"
              ],
              "properties": {
                "paymentMethod": {
                  "$ref": "#/definitions/quote-data-payment-interface"
                },
                "shippingCarrierCode": {
                  "type": "string",
                  "description": "The carrier code."
                },
                "shippingMethodCode": {
                  "type": "string",
                  "description": "The shipping method code."
                },
                "additionalData": {
                  "$ref": "#/definitions/quote-data-totals-additional-data-interface"
                }
              },
              "type": "object",
              "xml": {
                "name": "request"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/quote-data-totals-interface"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/guest-carts/{cartId}/totals": {
      "get": {
        "tags": [
          "quoteGuestCartTotalRepositoryV1"
        ],
        "description": "Return quote totals data for a specified cart.",
        "operationId": "quoteGuestCartTotalRepositoryV1GetGet",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "cartId",
            "in": "path",
            "type": "string",
            "required": true,
            "description": "The cart ID."
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/quote-data-totals-interface"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/carts/mine/collect-totals": {
      "put": {
        "tags": [
          "quoteCartTotalManagementV1"
        ],
        "description": "Set shipping/billing methods and additional data for cart and collect totals.",
        "operationId": "quoteCartTotalManagementV1CollectTotalsPut",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "quoteCartTotalManagementV1CollectTotalsPutBody",
            "in": "body",
            "schema": {
              "required": [
                "paymentMethod"
              ],
              "properties": {
                "paymentMethod": {
                  "$ref": "#/definitions/quote-data-payment-interface"
                },
                "shippingCarrierCode": {
                  "type": "string",
                  "description": "The carrier code."
                },
                "shippingMethodCode": {
                  "type": "string",
                  "description": "The shipping method code."
                },
                "additionalData": {
                  "$ref": "#/definitions/quote-data-totals-additional-data-interface"
                }
              },
              "type": "object",
              "xml": {
                "name": "request"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/quote-data-totals-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/stockItems/{productSku}": {
      "get": {
        "tags": [
          "catalogInventoryStockRegistryV1"
        ],
        "description": "",
        "operationId": "catalogInventoryStockRegistryV1GetStockItemBySkuGet",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "productSku",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "scopeId",
            "in": "query",
            "type": "integer",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/catalog-inventory-data-stock-item-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/products/{productSku}/stockItems/{itemId}": {
      "put": {
        "tags": [
          "catalogInventoryStockRegistryV1"
        ],
        "description": "",
        "operationId": "catalogInventoryStockRegistryV1UpdateStockItemBySkuPut",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "productSku",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "itemId",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "catalogInventoryStockRegistryV1UpdateStockItemBySkuPutBody",
            "in": "body",
            "schema": {
              "required": [
                "stockItem"
              ],
              "properties": {
                "stockItem": {
                  "$ref": "#/definitions/catalog-inventory-data-stock-item-interface"
                }
              },
              "type": "object",
              "xml": {
                "name": "request"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "integer"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/stockItems/lowStock/": {
      "get": {
        "tags": [
          "catalogInventoryStockRegistryV1"
        ],
        "description": "Retrieves a list of SKU's with low inventory qty",
        "operationId": "catalogInventoryStockRegistryV1GetLowStockItemsGet",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "scopeId",
            "in": "query",
            "type": "integer",
            "required": true
          },
          {
            "name": "qty",
            "in": "query",
            "type": "number",
            "required": true
          },
          {
            "name": "currentPage",
            "in": "query",
            "type": "integer",
            "required": false
          },
          {
            "name": "pageSize",
            "in": "query",
            "type": "integer",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/catalog-inventory-data-stock-item-collection-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/stockStatuses/{productSku}": {
      "get": {
        "tags": [
          "catalogInventoryStockRegistryV1"
        ],
        "description": "",
        "operationId": "catalogInventoryStockRegistryV1GetStockStatusBySkuGet",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "productSku",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "scopeId",
            "in": "query",
            "type": "integer",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/catalog-inventory-data-stock-status-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/bundle-products/{sku}/links/{optionId}": {
      "post": {
        "tags": [
          "bundleProductLinkManagementV1"
        ],
        "description": "Add child product to specified Bundle option by product sku",
        "operationId": "bundleProductLinkManagementV1AddChildByProductSkuPost",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "sku",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "optionId",
            "in": "path",
            "type": "integer",
            "required": true
          },
          {
            "name": "bundleProductLinkManagementV1AddChildByProductSkuPostBody",
            "in": "body",
            "schema": {
              "required": [
                "linkedProduct"
              ],
              "properties": {
                "linkedProduct": {
                  "$ref": "#/definitions/bundle-data-link-interface"
                }
              },
              "type": "object",
              "xml": {
                "name": "request"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "integer"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/bundle-products/{sku}/links/{id}": {
      "put": {
        "tags": [
          "bundleProductLinkManagementV1"
        ],
        "description": "",
        "operationId": "bundleProductLinkManagementV1SaveChildPut",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "sku",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "id",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "bundleProductLinkManagementV1SaveChildPutBody",
            "in": "body",
            "schema": {
              "required": [
                "linkedProduct"
              ],
              "properties": {
                "linkedProduct": {
                  "$ref": "#/definitions/bundle-data-link-interface"
                }
              },
              "type": "object",
              "xml": {
                "name": "request"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "boolean"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/bundle-products/{productSku}/children": {
      "get": {
        "tags": [
          "bundleProductLinkManagementV1"
        ],
        "description": "Get all children for Bundle product",
        "operationId": "bundleProductLinkManagementV1GetChildrenGet",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "productSku",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "optionId",
            "in": "query",
            "type": "integer",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/bundle-data-link-interface"
              }
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/bundle-products/{sku}/options/{optionId}/children/{childSku}": {
      "delete": {
        "tags": [
          "bundleProductLinkManagementV1"
        ],
        "description": "Remove product from Bundle product option",
        "operationId": "bundleProductLinkManagementV1RemoveChildDelete",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "sku",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "optionId",
            "in": "path",
            "type": "integer",
            "required": true
          },
          {
            "name": "childSku",
            "in": "path",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "boolean"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/bundle-products/{sku}/options/all": {
      "get": {
        "tags": [
          "bundleProductOptionRepositoryV1"
        ],
        "description": "Get all options for bundle product",
        "operationId": "bundleProductOptionRepositoryV1GetListGet",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "sku",
            "in": "path",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/bundle-data-option-interface"
              }
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/bundle-products/{sku}/options/{optionId}": {
      "get": {
        "tags": [
          "bundleProductOptionRepositoryV1"
        ],
        "description": "Get option for bundle product",
        "operationId": "bundleProductOptionRepositoryV1GetGet",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "sku",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "optionId",
            "in": "path",
            "type": "integer",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/bundle-data-option-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "bundleProductOptionRepositoryV1"
        ],
        "description": "Remove bundle option",
        "operationId": "bundleProductOptionRepositoryV1DeleteByIdDelete",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "sku",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "optionId",
            "in": "path",
            "type": "integer",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "boolean"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/bundle-products/options/types": {
      "get": {
        "tags": [
          "bundleProductOptionTypeListV1"
        ],
        "description": "Get all types for options for bundle products",
        "operationId": "bundleProductOptionTypeListV1GetItemsGet",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/bundle-data-option-type-interface"
              }
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/bundle-products/options/add": {
      "post": {
        "tags": [
          "bundleProductOptionManagementV1"
        ],
        "description": "Add new option for bundle product",
        "operationId": "bundleProductOptionManagementV1SavePost",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "bundleProductOptionManagementV1SavePostBody",
            "in": "body",
            "schema": {
              "required": [
                "option"
              ],
              "properties": {
                "option": {
                  "$ref": "#/definitions/bundle-data-option-interface"
                }
              },
              "type": "object",
              "xml": {
                "name": "request"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "integer"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/bundle-products/options/{optionId}": {
      "put": {
        "tags": [
          "bundleProductOptionManagementV1"
        ],
        "description": "Add new option for bundle product",
        "operationId": "bundleProductOptionManagementV1SavePut",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "optionId",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "bundleProductOptionManagementV1SavePutBody",
            "in": "body",
            "schema": {
              "required": [
                "option"
              ],
              "properties": {
                "option": {
                  "$ref": "#/definitions/bundle-data-option-interface"
                }
              },
              "type": "object",
              "xml": {
                "name": "request"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "integer"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/orders/{id}": {
      "get": {
        "tags": [
          "salesOrderRepositoryV1"
        ],
        "description": "Loads a specified order.",
        "operationId": "salesOrderRepositoryV1GetGet",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "integer",
            "required": true,
            "description": "The order ID."
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/sales-data-order-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/orders": {
      "get": {
        "tags": [
          "salesOrderRepositoryV1"
        ],
        "description": "Lists orders that match specified search criteria. This call returns an array of objects, but detailed information about each object’s attributes might not be included. See https://devdocs.magento.com/codelinks/attributes.html#OrderRepositoryInterface to determine which call to use to get detailed information about all attributes for an object.",
        "operationId": "salesOrderRepositoryV1GetListGet",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "searchCriteria[filterGroups][0][filters][0][field]",
            "in": "query",
            "type": "string",
            "description": "Field"
          },
          {
            "name": "searchCriteria[filterGroups][0][filters][0][value]",
            "in": "query",
            "type": "string",
            "description": "Value"
          },
          {
            "name": "searchCriteria[filterGroups][0][filters][0][conditionType]",
            "in": "query",
            "type": "string",
            "description": "Condition type"
          },
          {
            "name": "searchCriteria[sortOrders][0][field]",
            "in": "query",
            "type": "string",
            "description": "Sorting field."
          },
          {
            "name": "searchCriteria[sortOrders][0][direction]",
            "in": "query",
            "type": "string",
            "description": "Sorting direction."
          },
          {
            "name": "searchCriteria[pageSize]",
            "in": "query",
            "type": "integer",
            "description": "Page size."
          },
          {
            "name": "searchCriteria[currentPage]",
            "in": "query",
            "type": "integer",
            "description": "Current page."
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/sales-data-order-search-result-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/orders/create": {
      "put": {
        "tags": [
          "salesOrderRepositoryV1"
        ],
        "description": "Performs persist operations for a specified order.",
        "operationId": "salesOrderRepositoryV1SavePut",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "salesOrderRepositoryV1SavePutBody",
            "in": "body",
            "schema": {
              "required": [
                "entity"
              ],
              "properties": {
                "entity": {
                  "$ref": "#/definitions/sales-data-order-interface"
                }
              },
              "type": "object",
              "xml": {
                "name": "request"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/sales-data-order-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/orders/": {
      "post": {
        "tags": [
          "salesOrderRepositoryV1"
        ],
        "description": "Performs persist operations for a specified order.",
        "operationId": "salesOrderRepositoryV1SavePost",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "salesOrderRepositoryV1SavePostBody",
            "in": "body",
            "schema": {
              "required": [
                "entity"
              ],
              "properties": {
                "entity": {
                  "$ref": "#/definitions/sales-data-order-interface"
                }
              },
              "type": "object",
              "xml": {
                "name": "request"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/sales-data-order-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/orders/{id}/statuses": {
      "get": {
        "tags": [
          "salesOrderManagementV1"
        ],
        "description": "Gets the status for a specified order.",
        "operationId": "salesOrderManagementV1GetStatusGet",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "integer",
            "required": true,
            "description": "The order ID."
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "string",
              "description": "Order status."
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/orders/{id}/cancel": {
      "post": {
        "tags": [
          "salesOrderManagementV1"
        ],
        "description": "Cancels a specified order.",
        "operationId": "salesOrderManagementV1CancelPost",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "integer",
            "required": true,
            "description": "The order ID."
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "boolean"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/orders/{id}/emails": {
      "post": {
        "tags": [
          "salesOrderManagementV1"
        ],
        "description": "Emails a user a specified order.",
        "operationId": "salesOrderManagementV1NotifyPost",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "integer",
            "required": true,
            "description": "The order ID."
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "boolean"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/orders/{id}/hold": {
      "post": {
        "tags": [
          "salesOrderManagementV1"
        ],
        "description": "Holds a specified order.",
        "operationId": "salesOrderManagementV1HoldPost",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "integer",
            "required": true,
            "description": "The order ID."
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "boolean"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/orders/{id}/unhold": {
      "post": {
        "tags": [
          "salesOrderManagementV1"
        ],
        "description": "Releases a specified order from hold status.",
        "operationId": "salesOrderManagementV1UnHoldPost",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "integer",
            "required": true,
            "description": "The order ID."
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "boolean"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/orders/{id}/comments": {
      "post": {
        "tags": [
          "salesOrderManagementV1"
        ],
        "description": "Adds a comment to a specified order.",
        "operationId": "salesOrderManagementV1AddCommentPost",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "integer",
            "required": true,
            "description": "The order ID."
          },
          {
            "name": "salesOrderManagementV1AddCommentPostBody",
            "in": "body",
            "schema": {
              "required": [
                "statusHistory"
              ],
              "properties": {
                "statusHistory": {
                  "$ref": "#/definitions/sales-data-order-status-history-interface"
                }
              },
              "type": "object",
              "xml": {
                "name": "request"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "boolean"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      },
      "get": {
        "tags": [
          "salesOrderManagementV1"
        ],
        "description": "Lists comments for a specified order.",
        "operationId": "salesOrderManagementV1GetCommentsListGet",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "integer",
            "required": true,
            "description": "The order ID."
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/sales-data-order-status-history-search-result-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/orders/{parent_id}": {
      "put": {
        "tags": [
          "salesOrderAddressRepositoryV1"
        ],
        "description": "Performs persist operations for a specified order address.",
        "operationId": "salesOrderAddressRepositoryV1SavePut",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "parent_id",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "salesOrderAddressRepositoryV1SavePutBody",
            "in": "body",
            "schema": {
              "required": [
                "entity"
              ],
              "properties": {
                "entity": {
                  "$ref": "#/definitions/sales-data-order-address-interface"
                }
              },
              "type": "object",
              "xml": {
                "name": "request"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/sales-data-order-address-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/orders/items/{id}": {
      "get": {
        "tags": [
          "salesOrderItemRepositoryV1"
        ],
        "description": "Loads a specified order item.",
        "operationId": "salesOrderItemRepositoryV1GetGet",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "integer",
            "required": true,
            "description": "The order item ID."
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/sales-data-order-item-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/orders/items": {
      "get": {
        "tags": [
          "salesOrderItemRepositoryV1"
        ],
        "description": "Lists order items that match specified search criteria. This call returns an array of objects, but detailed information about each object’s attributes might not be included. See https://devdocs.magento.com/codelinks/attributes.html#OrderItemRepositoryInterface to determine which call to use to get detailed information about all attributes for an object.",
        "operationId": "salesOrderItemRepositoryV1GetListGet",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "searchCriteria[filterGroups][0][filters][0][field]",
            "in": "query",
            "type": "string",
            "description": "Field"
          },
          {
            "name": "searchCriteria[filterGroups][0][filters][0][value]",
            "in": "query",
            "type": "string",
            "description": "Value"
          },
          {
            "name": "searchCriteria[filterGroups][0][filters][0][conditionType]",
            "in": "query",
            "type": "string",
            "description": "Condition type"
          },
          {
            "name": "searchCriteria[sortOrders][0][field]",
            "in": "query",
            "type": "string",
            "description": "Sorting field."
          },
          {
            "name": "searchCriteria[sortOrders][0][direction]",
            "in": "query",
            "type": "string",
            "description": "Sorting direction."
          },
          {
            "name": "searchCriteria[pageSize]",
            "in": "query",
            "type": "integer",
            "description": "Page size."
          },
          {
            "name": "searchCriteria[currentPage]",
            "in": "query",
            "type": "integer",
            "description": "Current page."
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/sales-data-order-item-search-result-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/invoices/{id}": {
      "get": {
        "tags": [
          "salesInvoiceRepositoryV1"
        ],
        "description": "Loads a specified invoice.",
        "operationId": "salesInvoiceRepositoryV1GetGet",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "integer",
            "required": true,
            "description": "The invoice ID."
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/sales-data-invoice-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/invoices": {
      "get": {
        "tags": [
          "salesInvoiceRepositoryV1"
        ],
        "description": "Lists invoices that match specified search criteria. This call returns an array of objects, but detailed information about each object’s attributes might not be included. See https://devdocs.magento.com/codelinks/attributes.html#InvoiceRepositoryInterface to determine which call to use to get detailed information about all attributes for an object.",
        "operationId": "salesInvoiceRepositoryV1GetListGet",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "searchCriteria[filterGroups][0][filters][0][field]",
            "in": "query",
            "type": "string",
            "description": "Field"
          },
          {
            "name": "searchCriteria[filterGroups][0][filters][0][value]",
            "in": "query",
            "type": "string",
            "description": "Value"
          },
          {
            "name": "searchCriteria[filterGroups][0][filters][0][conditionType]",
            "in": "query",
            "type": "string",
            "description": "Condition type"
          },
          {
            "name": "searchCriteria[sortOrders][0][field]",
            "in": "query",
            "type": "string",
            "description": "Sorting field."
          },
          {
            "name": "searchCriteria[sortOrders][0][direction]",
            "in": "query",
            "type": "string",
            "description": "Sorting direction."
          },
          {
            "name": "searchCriteria[pageSize]",
            "in": "query",
            "type": "integer",
            "description": "Page size."
          },
          {
            "name": "searchCriteria[currentPage]",
            "in": "query",
            "type": "integer",
            "description": "Current page."
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/sales-data-invoice-search-result-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/invoices/": {
      "post": {
        "tags": [
          "salesInvoiceRepositoryV1"
        ],
        "description": "Performs persist operations for a specified invoice.",
        "operationId": "salesInvoiceRepositoryV1SavePost",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "salesInvoiceRepositoryV1SavePostBody",
            "in": "body",
            "schema": {
              "required": [
                "entity"
              ],
              "properties": {
                "entity": {
                  "$ref": "#/definitions/sales-data-invoice-interface"
                }
              },
              "type": "object",
              "xml": {
                "name": "request"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/sales-data-invoice-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/invoices/{id}/comments": {
      "get": {
        "tags": [
          "salesInvoiceManagementV1"
        ],
        "description": "Lists comments for a specified invoice.",
        "operationId": "salesInvoiceManagementV1GetCommentsListGet",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "integer",
            "required": true,
            "description": "The invoice ID."
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/sales-data-invoice-comment-search-result-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/invoices/{id}/emails": {
      "post": {
        "tags": [
          "salesInvoiceManagementV1"
        ],
        "description": "Emails a user a specified invoice.",
        "operationId": "salesInvoiceManagementV1NotifyPost",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "integer",
            "required": true,
            "description": "The invoice ID."
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "boolean"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/invoices/{id}/void": {
      "post": {
        "tags": [
          "salesInvoiceManagementV1"
        ],
        "description": "Voids a specified invoice.",
        "operationId": "salesInvoiceManagementV1SetVoidPost",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "integer",
            "required": true,
            "description": "The invoice ID."
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "boolean"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/invoices/{id}/capture": {
      "post": {
        "tags": [
          "salesInvoiceManagementV1"
        ],
        "description": "Sets invoice capture.",
        "operationId": "salesInvoiceManagementV1SetCapturePost",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "integer",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "string"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/invoices/comments": {
      "post": {
        "tags": [
          "salesInvoiceCommentRepositoryV1"
        ],
        "description": "Performs persist operations for a specified invoice comment.",
        "operationId": "salesInvoiceCommentRepositoryV1SavePost",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "salesInvoiceCommentRepositoryV1SavePostBody",
            "in": "body",
            "schema": {
              "required": [
                "entity"
              ],
              "properties": {
                "entity": {
                  "$ref": "#/definitions/sales-data-invoice-comment-interface"
                }
              },
              "type": "object",
              "xml": {
                "name": "request"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/sales-data-invoice-comment-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/invoice/{invoiceId}/refund": {
      "post": {
        "tags": [
          "salesRefundInvoiceV1"
        ],
        "description": "Create refund for invoice",
        "operationId": "salesRefundInvoiceV1ExecutePost",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "invoiceId",
            "in": "path",
            "type": "integer",
            "required": true
          },
          {
            "name": "salesRefundInvoiceV1ExecutePostBody",
            "in": "body",
            "schema": {
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/sales-data-creditmemo-item-creation-interface"
                  }
                },
                "isOnline": {
                  "type": "boolean"
                },
                "notify": {
                  "type": "boolean"
                },
                "appendComment": {
                  "type": "boolean"
                },
                "comment": {
                  "$ref": "#/definitions/sales-data-creditmemo-comment-creation-interface"
                },
                "arguments": {
                  "$ref": "#/definitions/sales-data-creditmemo-creation-arguments-interface"
                }
              },
              "type": "object",
              "xml": {
                "name": "request"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "integer"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/creditmemo/{id}/comments": {
      "get": {
        "tags": [
          "salesCreditmemoManagementV1"
        ],
        "description": "Lists comments for a specified credit memo.",
        "operationId": "salesCreditmemoManagementV1GetCommentsListGet",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "integer",
            "required": true,
            "description": "The credit memo ID."
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/sales-data-creditmemo-comment-search-result-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      },
      "post": {
        "tags": [
          "salesCreditmemoCommentRepositoryV1"
        ],
        "description": "Performs persist operations for a specified entity.",
        "operationId": "salesCreditmemoCommentRepositoryV1SavePost",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "salesCreditmemoCommentRepositoryV1SavePostBody",
            "in": "body",
            "schema": {
              "required": [
                "entity"
              ],
              "properties": {
                "entity": {
                  "$ref": "#/definitions/sales-data-creditmemo-comment-interface"
                }
              },
              "type": "object",
              "xml": {
                "name": "request"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/sales-data-creditmemo-comment-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/creditmemo/{id}": {
      "put": {
        "tags": [
          "salesCreditmemoManagementV1"
        ],
        "description": "Cancels a specified credit memo.",
        "operationId": "salesCreditmemoManagementV1CancelPut",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "integer",
            "required": true,
            "description": "The credit memo ID."
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "boolean"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "500": {
            "description": "Internal Server error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      },
      "get": {
        "tags": [
          "salesCreditmemoRepositoryV1"
        ],
        "description": "Loads a specified credit memo.",
        "operationId": "salesCreditmemoRepositoryV1GetGet",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "integer",
            "required": true,
            "description": "The credit memo ID."
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/sales-data-creditmemo-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/creditmemo/{id}/emails": {
      "post": {
        "tags": [
          "salesCreditmemoManagementV1"
        ],
        "description": "Emails a user a specified credit memo.",
        "operationId": "salesCreditmemoManagementV1NotifyPost",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "integer",
            "required": true,
            "description": "The credit memo ID."
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "boolean"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/creditmemo/refund": {
      "post": {
        "tags": [
          "salesCreditmemoManagementV1"
        ],
        "description": "Prepare creditmemo to refund and save it.",
        "operationId": "salesCreditmemoManagementV1RefundPost",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "salesCreditmemoManagementV1RefundPostBody",
            "in": "body",
            "schema": {
              "required": [
                "creditmemo"
              ],
              "properties": {
                "creditmemo": {
                  "$ref": "#/definitions/sales-data-creditmemo-interface"
                },
                "offlineRequested": {
                  "type": "boolean"
                }
              },
              "type": "object",
              "xml": {
                "name": "request"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/sales-data-creditmemo-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/creditmemos": {
      "get": {
        "tags": [
          "salesCreditmemoRepositoryV1"
        ],
        "description": "Lists credit memos that match specified search criteria. This call returns an array of objects, but detailed information about each object’s attributes might not be included. See https://devdocs.magento.com/codelinks/attributes.html#CreditmemoRepositoryInterface to determine which call to use to get detailed information about all attributes for an object.",
        "operationId": "salesCreditmemoRepositoryV1GetListGet",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "searchCriteria[filterGroups][0][filters][0][field]",
            "in": "query",
            "type": "string",
            "description": "Field"
          },
          {
            "name": "searchCriteria[filterGroups][0][filters][0][value]",
            "in": "query",
            "type": "string",
            "description": "Value"
          },
          {
            "name": "searchCriteria[filterGroups][0][filters][0][conditionType]",
            "in": "query",
            "type": "string",
            "description": "Condition type"
          },
          {
            "name": "searchCriteria[sortOrders][0][field]",
            "in": "query",
            "type": "string",
            "description": "Sorting field."
          },
          {
            "name": "searchCriteria[sortOrders][0][direction]",
            "in": "query",
            "type": "string",
            "description": "Sorting direction."
          },
          {
            "name": "searchCriteria[pageSize]",
            "in": "query",
            "type": "integer",
            "description": "Page size."
          },
          {
            "name": "searchCriteria[currentPage]",
            "in": "query",
            "type": "integer",
            "description": "Current page."
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/sales-data-creditmemo-search-result-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/creditmemo": {
      "post": {
        "tags": [
          "salesCreditmemoRepositoryV1"
        ],
        "description": "Performs persist operations for a specified credit memo.",
        "operationId": "salesCreditmemoRepositoryV1SavePost",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "salesCreditmemoRepositoryV1SavePostBody",
            "in": "body",
            "schema": {
              "required": [
                "entity"
              ],
              "properties": {
                "entity": {
                  "$ref": "#/definitions/sales-data-creditmemo-interface"
                }
              },
              "type": "object",
              "xml": {
                "name": "request"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/sales-data-creditmemo-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/order/{orderId}/refund": {
      "post": {
        "tags": [
          "salesRefundOrderV1"
        ],
        "description": "Create offline refund for order",
        "operationId": "salesRefundOrderV1ExecutePost",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "type": "integer",
            "required": true
          },
          {
            "name": "salesRefundOrderV1ExecutePostBody",
            "in": "body",
            "schema": {
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/sales-data-creditmemo-item-creation-interface"
                  }
                },
                "notify": {
                  "type": "boolean"
                },
                "appendComment": {
                  "type": "boolean"
                },
                "comment": {
                  "$ref": "#/definitions/sales-data-creditmemo-comment-creation-interface"
                },
                "arguments": {
                  "$ref": "#/definitions/sales-data-creditmemo-creation-arguments-interface"
                }
              },
              "type": "object",
              "xml": {
                "name": "request"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "integer"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/shipment/{id}": {
      "get": {
        "tags": [
          "salesShipmentRepositoryV1"
        ],
        "description": "Loads a specified shipment.",
        "operationId": "salesShipmentRepositoryV1GetGet",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "integer",
            "required": true,
            "description": "The shipment ID."
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/sales-data-shipment-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/shipments": {
      "get": {
        "tags": [
          "salesShipmentRepositoryV1"
        ],
        "description": "Lists shipments that match specified search criteria. This call returns an array of objects, but detailed information about each object’s attributes might not be included. See https://devdocs.magento.com/codelinks/attributes.html#ShipmentRepositoryInterface to determine which call to use to get detailed information about all attributes for an object.",
        "operationId": "salesShipmentRepositoryV1GetListGet",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "searchCriteria[filterGroups][0][filters][0][field]",
            "in": "query",
            "type": "string",
            "description": "Field"
          },
          {
            "name": "searchCriteria[filterGroups][0][filters][0][value]",
            "in": "query",
            "type": "string",
            "description": "Value"
          },
          {
            "name": "searchCriteria[filterGroups][0][filters][0][conditionType]",
            "in": "query",
            "type": "string",
            "description": "Condition type"
          },
          {
            "name": "searchCriteria[sortOrders][0][field]",
            "in": "query",
            "type": "string",
            "description": "Sorting field."
          },
          {
            "name": "searchCriteria[sortOrders][0][direction]",
            "in": "query",
            "type": "string",
            "description": "Sorting direction."
          },
          {
            "name": "searchCriteria[pageSize]",
            "in": "query",
            "type": "integer",
            "description": "Page size."
          },
          {
            "name": "searchCriteria[currentPage]",
            "in": "query",
            "type": "integer",
            "description": "Current page."
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/sales-data-shipment-search-result-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/shipment/": {
      "post": {
        "tags": [
          "salesShipmentRepositoryV1"
        ],
        "description": "Performs persist operations for a specified shipment.",
        "operationId": "salesShipmentRepositoryV1SavePost",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "salesShipmentRepositoryV1SavePostBody",
            "in": "body",
            "schema": {
              "required": [
                "entity"
              ],
              "properties": {
                "entity": {
                  "$ref": "#/definitions/sales-data-shipment-interface"
                }
              },
              "type": "object",
              "xml": {
                "name": "request"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/sales-data-shipment-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/shipment/{id}/comments": {
      "get": {
        "tags": [
          "salesShipmentManagementV1"
        ],
        "description": "Lists comments for a specified shipment.",
        "operationId": "salesShipmentManagementV1GetCommentsListGet",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "integer",
            "required": true,
            "description": "The shipment ID."
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/sales-data-shipment-comment-search-result-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      },
      "post": {
        "tags": [
          "salesShipmentCommentRepositoryV1"
        ],
        "description": "Performs persist operations for a specified shipment comment.",
        "operationId": "salesShipmentCommentRepositoryV1SavePost",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "salesShipmentCommentRepositoryV1SavePostBody",
            "in": "body",
            "schema": {
              "required": [
                "entity"
              ],
              "properties": {
                "entity": {
                  "$ref": "#/definitions/sales-data-shipment-comment-interface"
                }
              },
              "type": "object",
              "xml": {
                "name": "request"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/sales-data-shipment-comment-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/shipment/{id}/emails": {
      "post": {
        "tags": [
          "salesShipmentManagementV1"
        ],
        "description": "Emails user a specified shipment.",
        "operationId": "salesShipmentManagementV1NotifyPost",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "integer",
            "required": true,
            "description": "The shipment ID."
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "boolean"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/shipment/{id}/label": {
      "get": {
        "tags": [
          "salesShipmentManagementV1"
        ],
        "description": "Gets a specified shipment label.",
        "operationId": "salesShipmentManagementV1GetLabelGet",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "integer",
            "required": true,
            "description": "The shipment label ID."
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "string",
              "description": "Shipment label."
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/shipment/track": {
      "post": {
        "tags": [
          "salesShipmentTrackRepositoryV1"
        ],
        "description": "Performs persist operations for a specified shipment track.",
        "operationId": "salesShipmentTrackRepositoryV1SavePost",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "salesShipmentTrackRepositoryV1SavePostBody",
            "in": "body",
            "schema": {
              "required": [
                "entity"
              ],
              "properties": {
                "entity": {
                  "$ref": "#/definitions/sales-data-shipment-track-interface"
                }
              },
              "type": "object",
              "xml": {
                "name": "request"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/sales-data-shipment-track-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/shipment/track/{id}": {
      "delete": {
        "tags": [
          "salesShipmentTrackRepositoryV1"
        ],
        "description": "Deletes a specified shipment track by ID.",
        "operationId": "salesShipmentTrackRepositoryV1DeleteByIdDelete",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "integer",
            "required": true,
            "description": "The shipment track ID."
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "boolean"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/order/{orderId}/ship": {
      "post": {
        "tags": [
          "salesShipOrderV1"
        ],
        "description": "Creates new Shipment for given Order.",
        "operationId": "salesShipOrderV1ExecutePost",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "type": "integer",
            "required": true
          },
          {
            "name": "salesShipOrderV1ExecutePostBody",
            "in": "body",
            "schema": {
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/sales-data-shipment-item-creation-interface"
                  }
                },
                "notify": {
                  "type": "boolean"
                },
                "appendComment": {
                  "type": "boolean"
                },
                "comment": {
                  "$ref": "#/definitions/sales-data-shipment-comment-creation-interface"
                },
                "tracks": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/sales-data-shipment-track-creation-interface"
                  }
                },
                "packages": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/sales-data-shipment-package-creation-interface"
                  }
                },
                "arguments": {
                  "$ref": "#/definitions/sales-data-shipment-creation-arguments-interface"
                }
              },
              "type": "object",
              "xml": {
                "name": "request"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "integer",
              "description": "Id of created Shipment."
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/transactions/{id}": {
      "get": {
        "tags": [
          "salesTransactionRepositoryV1"
        ],
        "description": "Loads a specified transaction.",
        "operationId": "salesTransactionRepositoryV1GetGet",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "integer",
            "required": true,
            "description": "The transaction ID."
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/sales-data-transaction-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/transactions": {
      "get": {
        "tags": [
          "salesTransactionRepositoryV1"
        ],
        "description": "Lists transactions that match specified search criteria. This call returns an array of objects, but detailed information about each object’s attributes might not be included. See https://devdocs.magento.com/codelinks/attributes.html#TransactionRepositoryInterface to determine which call to use to get detailed information about all attributes for an object.",
        "operationId": "salesTransactionRepositoryV1GetListGet",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "searchCriteria[filterGroups][0][filters][0][field]",
            "in": "query",
            "type": "string",
            "description": "Field"
          },
          {
            "name": "searchCriteria[filterGroups][0][filters][0][value]",
            "in": "query",
            "type": "string",
            "description": "Value"
          },
          {
            "name": "searchCriteria[filterGroups][0][filters][0][conditionType]",
            "in": "query",
            "type": "string",
            "description": "Condition type"
          },
          {
            "name": "searchCriteria[sortOrders][0][field]",
            "in": "query",
            "type": "string",
            "description": "Sorting field."
          },
          {
            "name": "searchCriteria[sortOrders][0][direction]",
            "in": "query",
            "type": "string",
            "description": "Sorting direction."
          },
          {
            "name": "searchCriteria[pageSize]",
            "in": "query",
            "type": "integer",
            "description": "Page size."
          },
          {
            "name": "searchCriteria[currentPage]",
            "in": "query",
            "type": "integer",
            "description": "Current page."
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/sales-data-transaction-search-result-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/order/{orderId}/invoice": {
      "post": {
        "tags": [
          "salesInvoiceOrderV1"
        ],
        "description": "",
        "operationId": "salesInvoiceOrderV1ExecutePost",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "type": "integer",
            "required": true
          },
          {
            "name": "salesInvoiceOrderV1ExecutePostBody",
            "in": "body",
            "schema": {
              "properties": {
                "capture": {
                  "type": "boolean"
                },
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/sales-data-invoice-item-creation-interface"
                  }
                },
                "notify": {
                  "type": "boolean"
                },
                "appendComment": {
                  "type": "boolean"
                },
                "comment": {
                  "$ref": "#/definitions/sales-data-invoice-comment-creation-interface"
                },
                "arguments": {
                  "$ref": "#/definitions/sales-data-invoice-creation-arguments-interface"
                }
              },
              "type": "object",
              "xml": {
                "name": "request"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "integer"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/guest-carts/{cartId}/shipping-information": {
      "post": {
        "tags": [
          "checkoutGuestShippingInformationManagementV1"
        ],
        "description": "",
        "operationId": "checkoutGuestShippingInformationManagementV1SaveAddressInformationPost",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "cartId",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "checkoutGuestShippingInformationManagementV1SaveAddressInformationPostBody",
            "in": "body",
            "schema": {
              "required": [
                "addressInformation"
              ],
              "properties": {
                "addressInformation": {
                  "$ref": "#/definitions/checkout-data-shipping-information-interface"
                }
              },
              "type": "object",
              "xml": {
                "name": "request"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/checkout-data-payment-details-interface"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/carts/mine/shipping-information": {
      "post": {
        "tags": [
          "checkoutShippingInformationManagementV1"
        ],
        "description": "",
        "operationId": "checkoutShippingInformationManagementV1SaveAddressInformationPost",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "checkoutShippingInformationManagementV1SaveAddressInformationPostBody",
            "in": "body",
            "schema": {
              "required": [
                "addressInformation"
              ],
              "properties": {
                "addressInformation": {
                  "$ref": "#/definitions/checkout-data-shipping-information-interface"
                }
              },
              "type": "object",
              "xml": {
                "name": "request"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/checkout-data-payment-details-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/carts/{cartId}/shipping-information": {
      "post": {
        "tags": [
          "checkoutShippingInformationManagementV1"
        ],
        "description": "",
        "operationId": "checkoutShippingInformationManagementV1SaveAddressInformationPost",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "cartId",
            "in": "path",
            "type": "integer",
            "required": true
          },
          {
            "name": "checkoutShippingInformationManagementV1SaveAddressInformationPostBody",
            "in": "body",
            "schema": {
              "required": [
                "addressInformation"
              ],
              "properties": {
                "addressInformation": {
                  "$ref": "#/definitions/checkout-data-shipping-information-interface"
                }
              },
              "type": "object",
              "xml": {
                "name": "request"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/checkout-data-payment-details-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/carts/{cartId}/totals-information": {
      "post": {
        "tags": [
          "checkoutTotalsInformationManagementV1"
        ],
        "description": "Calculate quote totals based on address and shipping method.",
        "operationId": "checkoutTotalsInformationManagementV1CalculatePost",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "cartId",
            "in": "path",
            "type": "integer",
            "required": true
          },
          {
            "name": "checkoutTotalsInformationManagementV1CalculatePostBody",
            "in": "body",
            "schema": {
              "required": [
                "addressInformation"
              ],
              "properties": {
                "addressInformation": {
                  "$ref": "#/definitions/checkout-data-totals-information-interface"
                }
              },
              "type": "object",
              "xml": {
                "name": "request"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/quote-data-totals-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/carts/mine/totals-information": {
      "post": {
        "tags": [
          "checkoutTotalsInformationManagementV1"
        ],
        "description": "Calculate quote totals based on address and shipping method.",
        "operationId": "checkoutTotalsInformationManagementV1CalculatePost",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "checkoutTotalsInformationManagementV1CalculatePostBody",
            "in": "body",
            "schema": {
              "required": [
                "addressInformation"
              ],
              "properties": {
                "addressInformation": {
                  "$ref": "#/definitions/checkout-data-totals-information-interface"
                }
              },
              "type": "object",
              "xml": {
                "name": "request"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/quote-data-totals-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/guest-carts/{cartId}/totals-information": {
      "post": {
        "tags": [
          "checkoutGuestTotalsInformationManagementV1"
        ],
        "description": "Calculate quote totals based on address and shipping method.",
        "operationId": "checkoutGuestTotalsInformationManagementV1CalculatePost",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "cartId",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "checkoutGuestTotalsInformationManagementV1CalculatePostBody",
            "in": "body",
            "schema": {
              "required": [
                "addressInformation"
              ],
              "properties": {
                "addressInformation": {
                  "$ref": "#/definitions/checkout-data-totals-information-interface"
                }
              },
              "type": "object",
              "xml": {
                "name": "request"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/quote-data-totals-interface"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/guest-carts/{cartId}/payment-information": {
      "post": {
        "tags": [
          "checkoutGuestPaymentInformationManagementV1"
        ],
        "description": "Set payment information and place order for a specified cart.",
        "operationId": "checkoutGuestPaymentInformationManagementV1SavePaymentInformationAndPlaceOrderPost",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "cartId",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "checkoutGuestPaymentInformationManagementV1SavePaymentInformationAndPlaceOrderPostBody",
            "in": "body",
            "schema": {
              "required": [
                "email",
                "paymentMethod"
              ],
              "properties": {
                "email": {
                  "type": "string"
                },
                "paymentMethod": {
                  "$ref": "#/definitions/quote-data-payment-interface"
                },
                "billingAddress": {
                  "$ref": "#/definitions/quote-data-address-interface"
                }
              },
              "type": "object",
              "xml": {
                "name": "request"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "integer",
              "description": "Order ID."
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      },
      "get": {
        "tags": [
          "checkoutGuestPaymentInformationManagementV1"
        ],
        "description": "Get payment information",
        "operationId": "checkoutGuestPaymentInformationManagementV1GetPaymentInformationGet",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "cartId",
            "in": "path",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/checkout-data-payment-details-interface"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/guest-carts/{cartId}/set-payment-information": {
      "post": {
        "tags": [
          "checkoutGuestPaymentInformationManagementV1"
        ],
        "description": "Set payment information for a specified cart.",
        "operationId": "checkoutGuestPaymentInformationManagementV1SavePaymentInformationPost",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "cartId",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "checkoutGuestPaymentInformationManagementV1SavePaymentInformationPostBody",
            "in": "body",
            "schema": {
              "required": [
                "email",
                "paymentMethod"
              ],
              "properties": {
                "email": {
                  "type": "string"
                },
                "paymentMethod": {
                  "$ref": "#/definitions/quote-data-payment-interface"
                },
                "billingAddress": {
                  "$ref": "#/definitions/quote-data-address-interface"
                }
              },
              "type": "object",
              "xml": {
                "name": "request"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "integer",
              "description": "Order ID."
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/carts/mine/payment-information": {
      "post": {
        "tags": [
          "checkoutPaymentInformationManagementV1"
        ],
        "description": "Set payment information and place order for a specified cart.",
        "operationId": "checkoutPaymentInformationManagementV1SavePaymentInformationAndPlaceOrderPost",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "checkoutPaymentInformationManagementV1SavePaymentInformationAndPlaceOrderPostBody",
            "in": "body",
            "schema": {
              "required": [
                "paymentMethod"
              ],
              "properties": {
                "paymentMethod": {
                  "$ref": "#/definitions/quote-data-payment-interface"
                },
                "billingAddress": {
                  "$ref": "#/definitions/quote-data-address-interface"
                }
              },
              "type": "object",
              "xml": {
                "name": "request"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "integer",
              "description": "Order ID."
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      },
      "get": {
        "tags": [
          "checkoutPaymentInformationManagementV1"
        ],
        "description": "Get payment information",
        "operationId": "checkoutPaymentInformationManagementV1GetPaymentInformationGet",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/checkout-data-payment-details-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/carts/mine/set-payment-information": {
      "post": {
        "tags": [
          "checkoutPaymentInformationManagementV1"
        ],
        "description": "Set payment information for a specified cart.",
        "operationId": "checkoutPaymentInformationManagementV1SavePaymentInformationPost",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "checkoutPaymentInformationManagementV1SavePaymentInformationPostBody",
            "in": "body",
            "schema": {
              "required": [
                "paymentMethod"
              ],
              "properties": {
                "paymentMethod": {
                  "$ref": "#/definitions/quote-data-payment-interface"
                },
                "billingAddress": {
                  "$ref": "#/definitions/quote-data-address-interface"
                }
              },
              "type": "object",
              "xml": {
                "name": "request"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "integer",
              "description": "Order ID."
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/products/{sku}/downloadable-links": {
      "get": {
        "tags": [
          "downloadableLinkRepositoryV1"
        ],
        "description": "List of links with associated samples",
        "operationId": "downloadableLinkRepositoryV1GetListGet",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "sku",
            "in": "path",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/downloadable-data-link-interface"
              }
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      },
      "post": {
        "tags": [
          "downloadableLinkRepositoryV1"
        ],
        "description": "Update downloadable link of the given product (link type and its resources cannot be changed)",
        "operationId": "downloadableLinkRepositoryV1SavePost",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "sku",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "downloadableLinkRepositoryV1SavePostBody",
            "in": "body",
            "schema": {
              "required": [
                "link"
              ],
              "properties": {
                "link": {
                  "$ref": "#/definitions/downloadable-data-link-interface"
                },
                "isGlobalScopeContent": {
                  "type": "boolean"
                }
              },
              "type": "object",
              "xml": {
                "name": "request"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "integer"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/products/{sku}/downloadable-links/{id}": {
      "put": {
        "tags": [
          "downloadableLinkRepositoryV1"
        ],
        "description": "Update downloadable link of the given product (link type and its resources cannot be changed)",
        "operationId": "downloadableLinkRepositoryV1SavePut",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "sku",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "id",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "downloadableLinkRepositoryV1SavePutBody",
            "in": "body",
            "schema": {
              "required": [
                "link"
              ],
              "properties": {
                "link": {
                  "$ref": "#/definitions/downloadable-data-link-interface"
                },
                "isGlobalScopeContent": {
                  "type": "boolean"
                }
              },
              "type": "object",
              "xml": {
                "name": "request"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "integer"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/products/downloadable-links/{id}": {
      "delete": {
        "tags": [
          "downloadableLinkRepositoryV1"
        ],
        "description": "Delete downloadable link",
        "operationId": "downloadableLinkRepositoryV1DeleteDelete",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "integer",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "boolean"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/products/{sku}/downloadable-links/samples": {
      "get": {
        "tags": [
          "downloadableSampleRepositoryV1"
        ],
        "description": "List of samples for downloadable product",
        "operationId": "downloadableSampleRepositoryV1GetListGet",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "sku",
            "in": "path",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/downloadable-data-sample-interface"
              }
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      },
      "post": {
        "tags": [
          "downloadableSampleRepositoryV1"
        ],
        "description": "Update downloadable sample of the given product",
        "operationId": "downloadableSampleRepositoryV1SavePost",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "sku",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "downloadableSampleRepositoryV1SavePostBody",
            "in": "body",
            "schema": {
              "required": [
                "sample"
              ],
              "properties": {
                "sample": {
                  "$ref": "#/definitions/downloadable-data-sample-interface"
                },
                "isGlobalScopeContent": {
                  "type": "boolean"
                }
              },
              "type": "object",
              "xml": {
                "name": "request"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "integer"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/products/{sku}/downloadable-links/samples/{id}": {
      "put": {
        "tags": [
          "downloadableSampleRepositoryV1"
        ],
        "description": "Update downloadable sample of the given product",
        "operationId": "downloadableSampleRepositoryV1SavePut",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "sku",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "id",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "downloadableSampleRepositoryV1SavePutBody",
            "in": "body",
            "schema": {
              "required": [
                "sample"
              ],
              "properties": {
                "sample": {
                  "$ref": "#/definitions/downloadable-data-sample-interface"
                },
                "isGlobalScopeContent": {
                  "type": "boolean"
                }
              },
              "type": "object",
              "xml": {
                "name": "request"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "integer"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/products/downloadable-links/samples/{id}": {
      "delete": {
        "tags": [
          "downloadableSampleRepositoryV1"
        ],
        "description": "Delete downloadable sample",
        "operationId": "downloadableSampleRepositoryV1DeleteDelete",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "integer",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "boolean"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/configurable-products/{sku}/children": {
      "get": {
        "tags": [
          "configurableProductLinkManagementV1"
        ],
        "description": "Get all children for Configurable product",
        "operationId": "configurableProductLinkManagementV1GetChildrenGet",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "sku",
            "in": "path",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/catalog-data-product-interface"
              }
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/configurable-products/{sku}/children/{childSku}": {
      "delete": {
        "tags": [
          "configurableProductLinkManagementV1"
        ],
        "description": "Remove configurable product option",
        "operationId": "configurableProductLinkManagementV1RemoveChildDelete",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "sku",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "childSku",
            "in": "path",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "boolean"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/configurable-products/{sku}/child": {
      "post": {
        "tags": [
          "configurableProductLinkManagementV1"
        ],
        "description": "",
        "operationId": "configurableProductLinkManagementV1AddChildPost",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "sku",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "configurableProductLinkManagementV1AddChildPostBody",
            "in": "body",
            "schema": {
              "required": [
                "childSku"
              ],
              "properties": {
                "childSku": {
                  "type": "string"
                }
              },
              "type": "object",
              "xml": {
                "name": "request"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "boolean"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/configurable-products/variation": {
      "put": {
        "tags": [
          "configurableProductConfigurableProductManagementV1"
        ],
        "description": "Generate variation based on same product",
        "operationId": "configurableProductConfigurableProductManagementV1GenerateVariationPut",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "configurableProductConfigurableProductManagementV1GenerateVariationPutBody",
            "in": "body",
            "schema": {
              "required": [
                "product",
                "options"
              ],
              "properties": {
                "product": {
                  "$ref": "#/definitions/catalog-data-product-interface"
                },
                "options": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/configurable-product-data-option-interface"
                  }
                }
              },
              "type": "object",
              "xml": {
                "name": "request"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/catalog-data-product-interface"
              }
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/configurable-products/{sku}/options/{id}": {
      "get": {
        "tags": [
          "configurableProductOptionRepositoryV1"
        ],
        "description": "Get option for configurable product",
        "operationId": "configurableProductOptionRepositoryV1GetGet",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "sku",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "id",
            "in": "path",
            "type": "integer",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/configurable-product-data-option-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      },
      "put": {
        "tags": [
          "configurableProductOptionRepositoryV1"
        ],
        "description": "Save option",
        "operationId": "configurableProductOptionRepositoryV1SavePut",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "sku",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "id",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "configurableProductOptionRepositoryV1SavePutBody",
            "in": "body",
            "schema": {
              "required": [
                "option"
              ],
              "properties": {
                "option": {
                  "$ref": "#/definitions/configurable-product-data-option-interface"
                }
              },
              "type": "object",
              "xml": {
                "name": "request"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "integer"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "500": {
            "description": "Internal Server error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "configurableProductOptionRepositoryV1"
        ],
        "description": "Remove option from configurable product",
        "operationId": "configurableProductOptionRepositoryV1DeleteByIdDelete",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "sku",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "id",
            "in": "path",
            "type": "integer",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "boolean"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/configurable-products/{sku}/options/all": {
      "get": {
        "tags": [
          "configurableProductOptionRepositoryV1"
        ],
        "description": "Get all options for configurable product",
        "operationId": "configurableProductOptionRepositoryV1GetListGet",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "sku",
            "in": "path",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/configurable-product-data-option-interface"
              }
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/configurable-products/{sku}/options": {
      "post": {
        "tags": [
          "configurableProductOptionRepositoryV1"
        ],
        "description": "Save option",
        "operationId": "configurableProductOptionRepositoryV1SavePost",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "sku",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "configurableProductOptionRepositoryV1SavePostBody",
            "in": "body",
            "schema": {
              "required": [
                "option"
              ],
              "properties": {
                "option": {
                  "$ref": "#/definitions/configurable-product-data-option-interface"
                }
              },
              "type": "object",
              "xml": {
                "name": "request"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "integer"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "500": {
            "description": "Internal Server error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/integration/admin/token": {
      "post": {
        "tags": [
          "integrationAdminTokenServiceV1"
        ],
        "description": "Create access token for admin given the admin credentials.",
        "operationId": "integrationAdminTokenServiceV1CreateAdminAccessTokenPost",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "integrationAdminTokenServiceV1CreateAdminAccessTokenPostBody",
            "in": "body",
            "schema": {
              "required": [
                "username",
                "password"
              ],
              "properties": {
                "username": {
                  "type": "string"
                },
                "password": {
                  "type": "string"
                }
              },
              "type": "object",
              "xml": {
                "name": "request"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "string",
              "description": "Token created"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "500": {
            "description": "Internal Server error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/integration/customer/token": {
      "post": {
        "tags": [
          "integrationCustomerTokenServiceV1"
        ],
        "description": "Create access token for admin given the customer credentials.",
        "operationId": "integrationCustomerTokenServiceV1CreateCustomerAccessTokenPost",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "integrationCustomerTokenServiceV1CreateCustomerAccessTokenPostBody",
            "in": "body",
            "schema": {
              "required": [
                "username",
                "password"
              ],
              "properties": {
                "username": {
                  "type": "string"
                },
                "password": {
                  "type": "string"
                }
              },
              "type": "object",
              "xml": {
                "name": "request"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "string",
              "description": "Token created"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/bulk/{bulkUuid}/detailed-status": {
      "get": {
        "tags": [
          "asynchronousOperationsBulkStatusV1"
        ],
        "description": "Get Bulk summary data with list of operations items full data.",
        "operationId": "asynchronousOperationsBulkStatusV1GetBulkDetailedStatusGet",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "bulkUuid",
            "in": "path",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/asynchronous-operations-data-detailed-bulk-operations-status-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/bulk/{bulkUuid}/status": {
      "get": {
        "tags": [
          "asynchronousOperationsBulkStatusV1"
        ],
        "description": "Get Bulk summary data with list of operations items short data.",
        "operationId": "asynchronousOperationsBulkStatusV1GetBulkShortStatusGet",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "bulkUuid",
            "in": "path",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/asynchronous-operations-data-bulk-operations-status-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/bulk/{bulkUuid}/operation-status/{status}": {
      "get": {
        "tags": [
          "asynchronousOperationsBulkStatusV1"
        ],
        "description": "Get operations count by bulk uuid and status.",
        "operationId": "asynchronousOperationsBulkStatusV1GetOperationsCountByBulkIdAndStatusGet",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "bulkUuid",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "status",
            "in": "path",
            "type": "integer",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "integer"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/bulk": {
      "get": {
        "tags": [
          "asynchronousOperationsOperationRepositoryV1"
        ],
        "description": "Lists the bulk operation items that match specified search criteria.",
        "operationId": "asynchronousOperationsOperationRepositoryV1GetListGet",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "searchCriteria[filterGroups][0][filters][0][field]",
            "in": "query",
            "type": "string",
            "description": "Field"
          },
          {
            "name": "searchCriteria[filterGroups][0][filters][0][value]",
            "in": "query",
            "type": "string",
            "description": "Value"
          },
          {
            "name": "searchCriteria[filterGroups][0][filters][0][conditionType]",
            "in": "query",
            "type": "string",
            "description": "Condition type"
          },
          {
            "name": "searchCriteria[sortOrders][0][field]",
            "in": "query",
            "type": "string",
            "description": "Sorting field."
          },
          {
            "name": "searchCriteria[sortOrders][0][direction]",
            "in": "query",
            "type": "string",
            "description": "Sorting direction."
          },
          {
            "name": "searchCriteria[pageSize]",
            "in": "query",
            "type": "integer",
            "description": "Page size."
          },
          {
            "name": "searchCriteria[currentPage]",
            "in": "query",
            "type": "integer",
            "description": "Current page."
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/asynchronous-operations-data-operation-search-results-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/taxRates": {
      "post": {
        "tags": [
          "taxTaxRateRepositoryV1"
        ],
        "description": "Create or update tax rate",
        "operationId": "taxTaxRateRepositoryV1SavePost",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "taxTaxRateRepositoryV1SavePostBody",
            "in": "body",
            "schema": {
              "required": [
                "taxRate"
              ],
              "properties": {
                "taxRate": {
                  "$ref": "#/definitions/tax-data-tax-rate-interface"
                }
              },
              "type": "object",
              "xml": {
                "name": "request"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/tax-data-tax-rate-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "500": {
            "description": "Internal Server error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      },
      "put": {
        "tags": [
          "taxTaxRateRepositoryV1"
        ],
        "description": "Create or update tax rate",
        "operationId": "taxTaxRateRepositoryV1SavePut",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "taxTaxRateRepositoryV1SavePutBody",
            "in": "body",
            "schema": {
              "required": [
                "taxRate"
              ],
              "properties": {
                "taxRate": {
                  "$ref": "#/definitions/tax-data-tax-rate-interface"
                }
              },
              "type": "object",
              "xml": {
                "name": "request"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/tax-data-tax-rate-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "500": {
            "description": "Internal Server error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/taxRates/{rateId}": {
      "get": {
        "tags": [
          "taxTaxRateRepositoryV1"
        ],
        "description": "Get tax rate",
        "operationId": "taxTaxRateRepositoryV1GetGet",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "rateId",
            "in": "path",
            "type": "integer",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/tax-data-tax-rate-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "taxTaxRateRepositoryV1"
        ],
        "description": "Delete tax rate",
        "operationId": "taxTaxRateRepositoryV1DeleteByIdDelete",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "rateId",
            "in": "path",
            "type": "integer",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "boolean"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "500": {
            "description": "Internal Server error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/taxRates/search": {
      "get": {
        "tags": [
          "taxTaxRateRepositoryV1"
        ],
        "description": "Search TaxRates This call returns an array of objects, but detailed information about each object’s attributes might not be included. See https://devdocs.magento.com/codelinks/attributes.html#TaxRateRepositoryInterface to determine which call to use to get detailed information about all attributes for an object.",
        "operationId": "taxTaxRateRepositoryV1GetListGet",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "searchCriteria[filterGroups][0][filters][0][field]",
            "in": "query",
            "type": "string",
            "description": "Field"
          },
          {
            "name": "searchCriteria[filterGroups][0][filters][0][value]",
            "in": "query",
            "type": "string",
            "description": "Value"
          },
          {
            "name": "searchCriteria[filterGroups][0][filters][0][conditionType]",
            "in": "query",
            "type": "string",
            "description": "Condition type"
          },
          {
            "name": "searchCriteria[sortOrders][0][field]",
            "in": "query",
            "type": "string",
            "description": "Sorting field."
          },
          {
            "name": "searchCriteria[sortOrders][0][direction]",
            "in": "query",
            "type": "string",
            "description": "Sorting direction."
          },
          {
            "name": "searchCriteria[pageSize]",
            "in": "query",
            "type": "integer",
            "description": "Page size."
          },
          {
            "name": "searchCriteria[currentPage]",
            "in": "query",
            "type": "integer",
            "description": "Current page."
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/tax-data-tax-rate-search-results-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/taxRules": {
      "post": {
        "tags": [
          "taxTaxRuleRepositoryV1"
        ],
        "description": "Save TaxRule",
        "operationId": "taxTaxRuleRepositoryV1SavePost",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "taxTaxRuleRepositoryV1SavePostBody",
            "in": "body",
            "schema": {
              "required": [
                "rule"
              ],
              "properties": {
                "rule": {
                  "$ref": "#/definitions/tax-data-tax-rule-interface"
                }
              },
              "type": "object",
              "xml": {
                "name": "request"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/tax-data-tax-rule-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "500": {
            "description": "Internal Server error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      },
      "put": {
        "tags": [
          "taxTaxRuleRepositoryV1"
        ],
        "description": "Save TaxRule",
        "operationId": "taxTaxRuleRepositoryV1SavePut",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "taxTaxRuleRepositoryV1SavePutBody",
            "in": "body",
            "schema": {
              "required": [
                "rule"
              ],
              "properties": {
                "rule": {
                  "$ref": "#/definitions/tax-data-tax-rule-interface"
                }
              },
              "type": "object",
              "xml": {
                "name": "request"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/tax-data-tax-rule-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "500": {
            "description": "Internal Server error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/taxRules/{ruleId}": {
      "delete": {
        "tags": [
          "taxTaxRuleRepositoryV1"
        ],
        "description": "Delete TaxRule",
        "operationId": "taxTaxRuleRepositoryV1DeleteByIdDelete",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "ruleId",
            "in": "path",
            "type": "integer",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "boolean"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "500": {
            "description": "Internal Server error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      },
      "get": {
        "tags": [
          "taxTaxRuleRepositoryV1"
        ],
        "description": "Get TaxRule",
        "operationId": "taxTaxRuleRepositoryV1GetGet",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "ruleId",
            "in": "path",
            "type": "integer",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/tax-data-tax-rule-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/taxRules/search": {
      "get": {
        "tags": [
          "taxTaxRuleRepositoryV1"
        ],
        "description": "Search TaxRules This call returns an array of objects, but detailed information about each object’s attributes might not be included. See https://devdocs.magento.com/codelinks/attributes.html#TaxRuleRepositoryInterface to determine which call to use to get detailed information about all attributes for an object.",
        "operationId": "taxTaxRuleRepositoryV1GetListGet",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "searchCriteria[filterGroups][0][filters][0][field]",
            "in": "query",
            "type": "string",
            "description": "Field"
          },
          {
            "name": "searchCriteria[filterGroups][0][filters][0][value]",
            "in": "query",
            "type": "string",
            "description": "Value"
          },
          {
            "name": "searchCriteria[filterGroups][0][filters][0][conditionType]",
            "in": "query",
            "type": "string",
            "description": "Condition type"
          },
          {
            "name": "searchCriteria[sortOrders][0][field]",
            "in": "query",
            "type": "string",
            "description": "Sorting field."
          },
          {
            "name": "searchCriteria[sortOrders][0][direction]",
            "in": "query",
            "type": "string",
            "description": "Sorting direction."
          },
          {
            "name": "searchCriteria[pageSize]",
            "in": "query",
            "type": "integer",
            "description": "Page size."
          },
          {
            "name": "searchCriteria[currentPage]",
            "in": "query",
            "type": "integer",
            "description": "Current page."
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/tax-data-tax-rule-search-results-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/taxClasses": {
      "post": {
        "tags": [
          "taxTaxClassRepositoryV1"
        ],
        "description": "Create a Tax Class",
        "operationId": "taxTaxClassRepositoryV1SavePost",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "taxTaxClassRepositoryV1SavePostBody",
            "in": "body",
            "schema": {
              "required": [
                "taxClass"
              ],
              "properties": {
                "taxClass": {
                  "$ref": "#/definitions/tax-data-tax-class-interface"
                }
              },
              "type": "object",
              "xml": {
                "name": "request"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "string",
              "description": "id for the newly created Tax class"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "500": {
            "description": "Internal Server error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/taxClasses/{taxClassId}": {
      "get": {
        "tags": [
          "taxTaxClassRepositoryV1"
        ],
        "description": "Get a tax class with the given tax class id.",
        "operationId": "taxTaxClassRepositoryV1GetGet",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "taxClassId",
            "in": "path",
            "type": "integer",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/tax-data-tax-class-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "taxTaxClassRepositoryV1"
        ],
        "description": "Delete a tax class with the given tax class id.",
        "operationId": "taxTaxClassRepositoryV1DeleteByIdDelete",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "taxClassId",
            "in": "path",
            "type": "integer",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "boolean",
              "description": "True if the tax class was deleted, false otherwise"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/taxClasses/{classId}": {
      "put": {
        "tags": [
          "taxTaxClassRepositoryV1"
        ],
        "description": "Create a Tax Class",
        "operationId": "taxTaxClassRepositoryV1SavePut",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "classId",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "taxTaxClassRepositoryV1SavePutBody",
            "in": "body",
            "schema": {
              "required": [
                "taxClass"
              ],
              "properties": {
                "taxClass": {
                  "$ref": "#/definitions/tax-data-tax-class-interface"
                }
              },
              "type": "object",
              "xml": {
                "name": "request"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "string",
              "description": "id for the newly created Tax class"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "500": {
            "description": "Internal Server error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/taxClasses/search": {
      "get": {
        "tags": [
          "taxTaxClassRepositoryV1"
        ],
        "description": "Retrieve tax classes which match a specific criteria. This call returns an array of objects, but detailed information about each object’s attributes might not be included. See https://devdocs.magento.com/codelinks/attributes.html#TaxClassRepositoryInterface to determine which call to use to get detailed information about all attributes for an object.",
        "operationId": "taxTaxClassRepositoryV1GetListGet",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "searchCriteria[filterGroups][0][filters][0][field]",
            "in": "query",
            "type": "string",
            "description": "Field"
          },
          {
            "name": "searchCriteria[filterGroups][0][filters][0][value]",
            "in": "query",
            "type": "string",
            "description": "Value"
          },
          {
            "name": "searchCriteria[filterGroups][0][filters][0][conditionType]",
            "in": "query",
            "type": "string",
            "description": "Condition type"
          },
          {
            "name": "searchCriteria[sortOrders][0][field]",
            "in": "query",
            "type": "string",
            "description": "Sorting field."
          },
          {
            "name": "searchCriteria[sortOrders][0][direction]",
            "in": "query",
            "type": "string",
            "description": "Sorting direction."
          },
          {
            "name": "searchCriteria[pageSize]",
            "in": "query",
            "type": "integer",
            "description": "Page size."
          },
          {
            "name": "searchCriteria[currentPage]",
            "in": "query",
            "type": "integer",
            "description": "Current page."
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/tax-data-tax-class-search-results-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/carts/{cartId}/gift-message": {
      "get": {
        "tags": [
          "giftMessageCartRepositoryV1"
        ],
        "description": "Return the gift message for a specified order.",
        "operationId": "giftMessageCartRepositoryV1GetGet",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "cartId",
            "in": "path",
            "type": "integer",
            "required": true,
            "description": "The shopping cart ID."
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/gift-message-data-message-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      },
      "post": {
        "tags": [
          "giftMessageCartRepositoryV1"
        ],
        "description": "Set the gift message for an entire order.",
        "operationId": "giftMessageCartRepositoryV1SavePost",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "cartId",
            "in": "path",
            "type": "integer",
            "required": true,
            "description": "The cart ID."
          },
          {
            "name": "giftMessageCartRepositoryV1SavePostBody",
            "in": "body",
            "schema": {
              "required": [
                "giftMessage"
              ],
              "properties": {
                "giftMessage": {
                  "$ref": "#/definitions/gift-message-data-message-interface"
                }
              },
              "type": "object",
              "xml": {
                "name": "request"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "boolean"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/carts/mine/gift-message": {
      "get": {
        "tags": [
          "giftMessageCartRepositoryV1"
        ],
        "description": "Return the gift message for a specified order.",
        "operationId": "giftMessageCartRepositoryV1GetGet",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/gift-message-data-message-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      },
      "post": {
        "tags": [
          "giftMessageCartRepositoryV1"
        ],
        "description": "Set the gift message for an entire order.",
        "operationId": "giftMessageCartRepositoryV1SavePost",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "giftMessageCartRepositoryV1SavePostBody",
            "in": "body",
            "schema": {
              "required": [
                "giftMessage"
              ],
              "properties": {
                "giftMessage": {
                  "$ref": "#/definitions/gift-message-data-message-interface"
                }
              },
              "type": "object",
              "xml": {
                "name": "request"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "boolean"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/carts/{cartId}/gift-message/{itemId}": {
      "get": {
        "tags": [
          "giftMessageItemRepositoryV1"
        ],
        "description": "Return the gift message for a specified item in a specified shopping cart.",
        "operationId": "giftMessageItemRepositoryV1GetGet",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "cartId",
            "in": "path",
            "type": "integer",
            "required": true,
            "description": "The shopping cart ID."
          },
          {
            "name": "itemId",
            "in": "path",
            "type": "integer",
            "required": true,
            "description": "The item ID."
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/gift-message-data-message-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      },
      "post": {
        "tags": [
          "giftMessageItemRepositoryV1"
        ],
        "description": "Set the gift message for a specified item in a specified shopping cart.",
        "operationId": "giftMessageItemRepositoryV1SavePost",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "cartId",
            "in": "path",
            "type": "integer",
            "required": true,
            "description": "The cart ID."
          },
          {
            "name": "itemId",
            "in": "path",
            "type": "integer",
            "required": true,
            "description": "The item ID."
          },
          {
            "name": "giftMessageItemRepositoryV1SavePostBody",
            "in": "body",
            "schema": {
              "required": [
                "giftMessage"
              ],
              "properties": {
                "giftMessage": {
                  "$ref": "#/definitions/gift-message-data-message-interface"
                }
              },
              "type": "object",
              "xml": {
                "name": "request"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "boolean"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/carts/mine/gift-message/{itemId}": {
      "get": {
        "tags": [
          "giftMessageItemRepositoryV1"
        ],
        "description": "Return the gift message for a specified item in a specified shopping cart.",
        "operationId": "giftMessageItemRepositoryV1GetGet",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "itemId",
            "in": "path",
            "type": "integer",
            "required": true,
            "description": "The item ID."
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/gift-message-data-message-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      },
      "post": {
        "tags": [
          "giftMessageItemRepositoryV1"
        ],
        "description": "Set the gift message for a specified item in a specified shopping cart.",
        "operationId": "giftMessageItemRepositoryV1SavePost",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "itemId",
            "in": "path",
            "type": "integer",
            "required": true,
            "description": "The item ID."
          },
          {
            "name": "giftMessageItemRepositoryV1SavePostBody",
            "in": "body",
            "schema": {
              "required": [
                "giftMessage"
              ],
              "properties": {
                "giftMessage": {
                  "$ref": "#/definitions/gift-message-data-message-interface"
                }
              },
              "type": "object",
              "xml": {
                "name": "request"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "boolean"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/guest-carts/{cartId}/gift-message": {
      "get": {
        "tags": [
          "giftMessageGuestCartRepositoryV1"
        ],
        "description": "Return the gift message for a specified order.",
        "operationId": "giftMessageGuestCartRepositoryV1GetGet",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "cartId",
            "in": "path",
            "type": "string",
            "required": true,
            "description": "The shopping cart ID."
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/gift-message-data-message-interface"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      },
      "post": {
        "tags": [
          "giftMessageGuestCartRepositoryV1"
        ],
        "description": "Set the gift message for an entire order.",
        "operationId": "giftMessageGuestCartRepositoryV1SavePost",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "cartId",
            "in": "path",
            "type": "string",
            "required": true,
            "description": "The cart ID."
          },
          {
            "name": "giftMessageGuestCartRepositoryV1SavePostBody",
            "in": "body",
            "schema": {
              "required": [
                "giftMessage"
              ],
              "properties": {
                "giftMessage": {
                  "$ref": "#/definitions/gift-message-data-message-interface"
                }
              },
              "type": "object",
              "xml": {
                "name": "request"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "boolean"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/guest-carts/{cartId}/gift-message/{itemId}": {
      "get": {
        "tags": [
          "giftMessageGuestItemRepositoryV1"
        ],
        "description": "Return the gift message for a specified item in a specified shopping cart.",
        "operationId": "giftMessageGuestItemRepositoryV1GetGet",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "cartId",
            "in": "path",
            "type": "string",
            "required": true,
            "description": "The shopping cart ID."
          },
          {
            "name": "itemId",
            "in": "path",
            "type": "integer",
            "required": true,
            "description": "The item ID."
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/gift-message-data-message-interface"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      },
      "post": {
        "tags": [
          "giftMessageGuestItemRepositoryV1"
        ],
        "description": "Set the gift message for a specified item in a specified shopping cart.",
        "operationId": "giftMessageGuestItemRepositoryV1SavePost",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "cartId",
            "in": "path",
            "type": "string",
            "required": true,
            "description": "The cart ID."
          },
          {
            "name": "itemId",
            "in": "path",
            "type": "integer",
            "required": true,
            "description": "The item ID."
          },
          {
            "name": "giftMessageGuestItemRepositoryV1SavePostBody",
            "in": "body",
            "schema": {
              "required": [
                "giftMessage"
              ],
              "properties": {
                "giftMessage": {
                  "$ref": "#/definitions/gift-message-data-message-interface"
                }
              },
              "type": "object",
              "xml": {
                "name": "request"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "boolean"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/analytics/link": {
      "get": {
        "tags": [
          "analyticsLinkProviderV1"
        ],
        "description": "",
        "operationId": "analyticsLinkProviderV1GetGet",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/analytics-data-link-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/inventory/sources": {
      "get": {
        "tags": [
          "inventoryApiSourceRepositoryV1"
        ],
        "description": "Find Sources by SearchCriteria SearchCriteria is not required because load all stocks is useful case",
        "operationId": "inventoryApiSourceRepositoryV1GetListGet",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "searchCriteria[filterGroups][0][filters][0][field]",
            "in": "query",
            "type": "string",
            "description": "Field"
          },
          {
            "name": "searchCriteria[filterGroups][0][filters][0][value]",
            "in": "query",
            "type": "string",
            "description": "Value"
          },
          {
            "name": "searchCriteria[filterGroups][0][filters][0][conditionType]",
            "in": "query",
            "type": "string",
            "description": "Condition type"
          },
          {
            "name": "searchCriteria[sortOrders][0][field]",
            "in": "query",
            "type": "string",
            "description": "Sorting field."
          },
          {
            "name": "searchCriteria[sortOrders][0][direction]",
            "in": "query",
            "type": "string",
            "description": "Sorting direction."
          },
          {
            "name": "searchCriteria[pageSize]",
            "in": "query",
            "type": "integer",
            "description": "Page size."
          },
          {
            "name": "searchCriteria[currentPage]",
            "in": "query",
            "type": "integer",
            "description": "Current page."
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/inventory-api-data-source-search-results-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      },
      "post": {
        "tags": [
          "inventoryApiSourceRepositoryV1"
        ],
        "description": "Save Source data",
        "operationId": "inventoryApiSourceRepositoryV1SavePost",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "inventoryApiSourceRepositoryV1SavePostBody",
            "in": "body",
            "schema": {
              "required": [
                "source"
              ],
              "properties": {
                "source": {
                  "$ref": "#/definitions/inventory-api-data-source-interface"
                }
              },
              "type": "object",
              "xml": {
                "name": "request"
              }
            }
          }
        ],
        "responses": {
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/inventory/sources/{sourceCode}": {
      "get": {
        "tags": [
          "inventoryApiSourceRepositoryV1"
        ],
        "description": "Get Source data by given code. If you want to create plugin on get method, also you need to create separate plugin on getList method, because entity loading way is different for these methods",
        "operationId": "inventoryApiSourceRepositoryV1GetGet",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "sourceCode",
            "in": "path",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/inventory-api-data-source-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      },
      "put": {
        "tags": [
          "inventoryApiSourceRepositoryV1"
        ],
        "description": "Save Source data",
        "operationId": "inventoryApiSourceRepositoryV1SavePut",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "sourceCode",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "inventoryApiSourceRepositoryV1SavePutBody",
            "in": "body",
            "schema": {
              "required": [
                "source"
              ],
              "properties": {
                "source": {
                  "$ref": "#/definitions/inventory-api-data-source-interface"
                }
              },
              "type": "object",
              "xml": {
                "name": "request"
              }
            }
          }
        ],
        "responses": {
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/inventory/get-sources-assigned-to-stock-ordered-by-priority/{stockId}": {
      "get": {
        "tags": [
          "inventoryApiGetSourcesAssignedToStockOrderedByPriorityV1"
        ],
        "description": "Get Sources assigned to Stock ordered by priority If Stock with given id doesn't exist then return an empty array",
        "operationId": "inventoryApiGetSourcesAssignedToStockOrderedByPriorityV1ExecuteGet",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "stockId",
            "in": "path",
            "type": "integer",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/inventory-api-data-source-interface"
              }
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "500": {
            "description": "Internal Server error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/inventory/stocks": {
      "get": {
        "tags": [
          "inventoryApiStockRepositoryV1"
        ],
        "description": "Find Stocks by given SearchCriteria SearchCriteria is not required because load all stocks is useful case",
        "operationId": "inventoryApiStockRepositoryV1GetListGet",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "searchCriteria[filterGroups][0][filters][0][field]",
            "in": "query",
            "type": "string",
            "description": "Field"
          },
          {
            "name": "searchCriteria[filterGroups][0][filters][0][value]",
            "in": "query",
            "type": "string",
            "description": "Value"
          },
          {
            "name": "searchCriteria[filterGroups][0][filters][0][conditionType]",
            "in": "query",
            "type": "string",
            "description": "Condition type"
          },
          {
            "name": "searchCriteria[sortOrders][0][field]",
            "in": "query",
            "type": "string",
            "description": "Sorting field."
          },
          {
            "name": "searchCriteria[sortOrders][0][direction]",
            "in": "query",
            "type": "string",
            "description": "Sorting direction."
          },
          {
            "name": "searchCriteria[pageSize]",
            "in": "query",
            "type": "integer",
            "description": "Page size."
          },
          {
            "name": "searchCriteria[currentPage]",
            "in": "query",
            "type": "integer",
            "description": "Current page."
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/inventory-api-data-stock-search-results-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      },
      "post": {
        "tags": [
          "inventoryApiStockRepositoryV1"
        ],
        "description": "Save Stock data",
        "operationId": "inventoryApiStockRepositoryV1SavePost",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "inventoryApiStockRepositoryV1SavePostBody",
            "in": "body",
            "schema": {
              "required": [
                "stock"
              ],
              "properties": {
                "stock": {
                  "$ref": "#/definitions/inventory-api-data-stock-interface"
                }
              },
              "type": "object",
              "xml": {
                "name": "request"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "integer"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/inventory/stocks/{stockId}": {
      "get": {
        "tags": [
          "inventoryApiStockRepositoryV1"
        ],
        "description": "Get Stock data by given stockId. If you want to create plugin on get method, also you need to create separate plugin on getList method, because entity loading way is different for these methods",
        "operationId": "inventoryApiStockRepositoryV1GetGet",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "stockId",
            "in": "path",
            "type": "integer",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/inventory-api-data-stock-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "inventoryApiStockRepositoryV1"
        ],
        "description": "Delete the Stock data by stockId. If stock is not found do nothing",
        "operationId": "inventoryApiStockRepositoryV1DeleteByIdDelete",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "stockId",
            "in": "path",
            "type": "integer",
            "required": true
          }
        ],
        "responses": {
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      },
      "put": {
        "tags": [
          "inventoryApiStockRepositoryV1"
        ],
        "description": "Save Stock data",
        "operationId": "inventoryApiStockRepositoryV1SavePut",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "stockId",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "inventoryApiStockRepositoryV1SavePutBody",
            "in": "body",
            "schema": {
              "required": [
                "stock"
              ],
              "properties": {
                "stock": {
                  "$ref": "#/definitions/inventory-api-data-stock-interface"
                }
              },
              "type": "object",
              "xml": {
                "name": "request"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "integer"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/inventory/stock-source-links": {
      "get": {
        "tags": [
          "inventoryApiGetStockSourceLinksV1"
        ],
        "description": "Find StockSourceLink list by given SearchCriteria",
        "operationId": "inventoryApiGetStockSourceLinksV1ExecuteGet",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "searchCriteria[filterGroups][0][filters][0][field]",
            "in": "query",
            "type": "string",
            "description": "Field"
          },
          {
            "name": "searchCriteria[filterGroups][0][filters][0][value]",
            "in": "query",
            "type": "string",
            "description": "Value"
          },
          {
            "name": "searchCriteria[filterGroups][0][filters][0][conditionType]",
            "in": "query",
            "type": "string",
            "description": "Condition type"
          },
          {
            "name": "searchCriteria[sortOrders][0][field]",
            "in": "query",
            "type": "string",
            "description": "Sorting field."
          },
          {
            "name": "searchCriteria[sortOrders][0][direction]",
            "in": "query",
            "type": "string",
            "description": "Sorting direction."
          },
          {
            "name": "searchCriteria[pageSize]",
            "in": "query",
            "type": "integer",
            "description": "Page size."
          },
          {
            "name": "searchCriteria[currentPage]",
            "in": "query",
            "type": "integer",
            "description": "Current page."
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/inventory-api-data-stock-source-link-search-results-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      },
      "post": {
        "tags": [
          "inventoryApiStockSourceLinksSaveV1"
        ],
        "description": "Save StockSourceLink list data",
        "operationId": "inventoryApiStockSourceLinksSaveV1ExecutePost",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "inventoryApiStockSourceLinksSaveV1ExecutePostBody",
            "in": "body",
            "schema": {
              "required": [
                "links"
              ],
              "properties": {
                "links": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/inventory-api-data-stock-source-link-interface"
                  }
                }
              },
              "type": "object",
              "xml": {
                "name": "request"
              }
            }
          }
        ],
        "responses": {
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/inventory/stock-source-links-delete": {
      "post": {
        "tags": [
          "inventoryApiStockSourceLinksDeleteV1"
        ],
        "description": "Remove StockSourceLink list list",
        "operationId": "inventoryApiStockSourceLinksDeleteV1ExecutePost",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "inventoryApiStockSourceLinksDeleteV1ExecutePostBody",
            "in": "body",
            "schema": {
              "required": [
                "links"
              ],
              "properties": {
                "links": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/inventory-api-data-stock-source-link-interface"
                  }
                }
              },
              "type": "object",
              "xml": {
                "name": "request"
              }
            }
          }
        ],
        "responses": {
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/inventory/source-items": {
      "get": {
        "tags": [
          "inventoryApiSourceItemRepositoryV1"
        ],
        "description": "Find SourceItems by SearchCriteria We need to have this method for direct work with SourceItems because this object contains additional data like as qty, status (for example can be searchable by additional field)",
        "operationId": "inventoryApiSourceItemRepositoryV1GetListGet",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "searchCriteria[filterGroups][0][filters][0][field]",
            "in": "query",
            "type": "string",
            "description": "Field"
          },
          {
            "name": "searchCriteria[filterGroups][0][filters][0][value]",
            "in": "query",
            "type": "string",
            "description": "Value"
          },
          {
            "name": "searchCriteria[filterGroups][0][filters][0][conditionType]",
            "in": "query",
            "type": "string",
            "description": "Condition type"
          },
          {
            "name": "searchCriteria[sortOrders][0][field]",
            "in": "query",
            "type": "string",
            "description": "Sorting field."
          },
          {
            "name": "searchCriteria[sortOrders][0][direction]",
            "in": "query",
            "type": "string",
            "description": "Sorting direction."
          },
          {
            "name": "searchCriteria[pageSize]",
            "in": "query",
            "type": "integer",
            "description": "Page size."
          },
          {
            "name": "searchCriteria[currentPage]",
            "in": "query",
            "type": "integer",
            "description": "Current page."
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/inventory-api-data-source-item-search-results-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      },
      "post": {
        "tags": [
          "inventoryApiSourceItemsSaveV1"
        ],
        "description": "Save Multiple Source item data",
        "operationId": "inventoryApiSourceItemsSaveV1ExecutePost",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "inventoryApiSourceItemsSaveV1ExecutePostBody",
            "in": "body",
            "schema": {
              "required": [
                "sourceItems"
              ],
              "properties": {
                "sourceItems": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/inventory-api-data-source-item-interface"
                  }
                }
              },
              "type": "object",
              "xml": {
                "name": "request"
              }
            }
          }
        ],
        "responses": {
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/inventory/source-items-delete": {
      "post": {
        "tags": [
          "inventoryApiSourceItemsDeleteV1"
        ],
        "description": "Delete Multiple Source item data",
        "operationId": "inventoryApiSourceItemsDeleteV1ExecutePost",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "inventoryApiSourceItemsDeleteV1ExecutePostBody",
            "in": "body",
            "schema": {
              "required": [
                "sourceItems"
              ],
              "properties": {
                "sourceItems": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/inventory-api-data-source-item-interface"
                  }
                }
              },
              "type": "object",
              "xml": {
                "name": "request"
              }
            }
          }
        ],
        "responses": {
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/inventory/bulk-product-source-assign": {
      "post": {
        "tags": [
          "inventoryCatalogApiBulkSourceAssignV1"
        ],
        "description": "Run mass product to source assignment",
        "operationId": "inventoryCatalogApiBulkSourceAssignV1ExecutePost",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "inventoryCatalogApiBulkSourceAssignV1ExecutePostBody",
            "in": "body",
            "schema": {
              "required": [
                "skus",
                "sourceCodes"
              ],
              "properties": {
                "skus": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "sourceCodes": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "type": "object",
              "xml": {
                "name": "request"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "integer"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/inventory/bulk-product-source-unassign": {
      "post": {
        "tags": [
          "inventoryCatalogApiBulkSourceUnassignV1"
        ],
        "description": "Run mass product to source un-assignment",
        "operationId": "inventoryCatalogApiBulkSourceUnassignV1ExecutePost",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "inventoryCatalogApiBulkSourceUnassignV1ExecutePostBody",
            "in": "body",
            "schema": {
              "required": [
                "skus",
                "sourceCodes"
              ],
              "properties": {
                "skus": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "sourceCodes": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "type": "object",
              "xml": {
                "name": "request"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "integer"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/inventory/bulk-product-source-transfer": {
      "post": {
        "tags": [
          "inventoryCatalogApiBulkInventoryTransferV1"
        ],
        "description": "Run bulk inventory transfer",
        "operationId": "inventoryCatalogApiBulkInventoryTransferV1ExecutePost",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "inventoryCatalogApiBulkInventoryTransferV1ExecutePostBody",
            "in": "body",
            "schema": {
              "required": [
                "skus",
                "originSource",
                "destinationSource",
                "unassignFromOrigin"
              ],
              "properties": {
                "skus": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "originSource": {
                  "type": "string"
                },
                "destinationSource": {
                  "type": "string"
                },
                "unassignFromOrigin": {
                  "type": "boolean"
                }
              },
              "type": "object",
              "xml": {
                "name": "request"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "boolean"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/inventory/bulk-partial-source-transfer": {
      "post": {
        "tags": [
          "inventoryCatalogApiBulkPartialInventoryTransferV1"
        ],
        "description": "Run bulk partial inventory transfer for specified items.",
        "operationId": "inventoryCatalogApiBulkPartialInventoryTransferV1ExecutePost",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "inventoryCatalogApiBulkPartialInventoryTransferV1ExecutePostBody",
            "in": "body",
            "schema": {
              "required": [
                "originSourceCode",
                "destinationSourceCode",
                "items"
              ],
              "properties": {
                "originSourceCode": {
                  "type": "string"
                },
                "destinationSourceCode": {
                  "type": "string"
                },
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/inventory-catalog-api-data-partial-inventory-transfer-item-interface"
                  }
                }
              },
              "type": "object",
              "xml": {
                "name": "request"
              }
            }
          }
        ],
        "responses": {
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/inventory/get-distance-provider-code": {
      "get": {
        "tags": [
          "inventoryDistanceBasedSourceSelectionApiGetDistanceProviderCodeV1"
        ],
        "description": "Get Default distance provider code",
        "operationId": "inventoryDistanceBasedSourceSelectionApiGetDistanceProviderCodeV1ExecuteGet",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "string"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/inventory/get-distance": {
      "get": {
        "tags": [
          "inventoryDistanceBasedSourceSelectionApiGetDistanceV1"
        ],
        "description": "Get distance between two points",
        "operationId": "inventoryDistanceBasedSourceSelectionApiGetDistanceV1ExecuteGet",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "source[lat]",
            "in": "query",
            "type": "number",
            "description": "Latitude"
          },
          {
            "name": "source[lng]",
            "in": "query",
            "type": "number",
            "description": "Longitude"
          },
          {
            "name": "destination[lat]",
            "in": "query",
            "type": "number",
            "description": "Latitude"
          },
          {
            "name": "destination[lng]",
            "in": "query",
            "type": "number",
            "description": "Longitude"
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "number"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/inventory/get-latlng-from-address": {
      "get": {
        "tags": [
          "inventoryDistanceBasedSourceSelectionApiGetLatLngFromAddressV1"
        ],
        "description": "Get latitude and longitude object from address",
        "operationId": "inventoryDistanceBasedSourceSelectionApiGetLatLngFromAddressV1ExecuteGet",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "address[country]",
            "in": "query",
            "type": "string",
            "description": "Shipping country"
          },
          {
            "name": "address[postcode]",
            "in": "query",
            "type": "string",
            "description": "Shipping postcode"
          },
          {
            "name": "address[street]",
            "in": "query",
            "type": "string",
            "description": "Shipping street address"
          },
          {
            "name": "address[region]",
            "in": "query",
            "type": "string",
            "description": "Shipping region"
          },
          {
            "name": "address[city]",
            "in": "query",
            "type": "string",
            "description": "Shipping city"
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/inventory-distance-based-source-selection-api-data-lat-lng-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/inventory/export-stock-salable-qty/{salesChannelType}/{salesChannelCode}": {
      "get": {
        "tags": [
          "inventoryExportStockApiExportStockSalableQtyV1"
        ],
        "description": "Export product stock data filtered by search criteria.",
        "operationId": "inventoryExportStockApiExportStockSalableQtyV1ExecuteGet",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "salesChannelType",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "salesChannelCode",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "searchCriteria[filterGroups][0][filters][0][field]",
            "in": "query",
            "type": "string",
            "description": "Field"
          },
          {
            "name": "searchCriteria[filterGroups][0][filters][0][value]",
            "in": "query",
            "type": "string",
            "description": "Value"
          },
          {
            "name": "searchCriteria[filterGroups][0][filters][0][conditionType]",
            "in": "query",
            "type": "string",
            "description": "Condition type"
          },
          {
            "name": "searchCriteria[sortOrders][0][field]",
            "in": "query",
            "type": "string",
            "description": "Sorting field."
          },
          {
            "name": "searchCriteria[sortOrders][0][direction]",
            "in": "query",
            "type": "string",
            "description": "Sorting direction."
          },
          {
            "name": "searchCriteria[pageSize]",
            "in": "query",
            "type": "integer",
            "description": "Page size."
          },
          {
            "name": "searchCriteria[currentPage]",
            "in": "query",
            "type": "integer",
            "description": "Current page."
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/inventory-export-stock-api-data-export-stock-salable-qty-search-result-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/inventory/dump-stock-index-data/{salesChannelType}/{salesChannelCode}": {
      "get": {
        "tags": [
          "inventoryExportStockApiExportStockIndexDataV1"
        ],
        "description": "Provides stock index export from inventory_stock_% table",
        "operationId": "inventoryExportStockApiExportStockIndexDataV1ExecuteGet",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "salesChannelType",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "salesChannelCode",
            "in": "path",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/inventory-export-stock-api-data-product-stock-index-data-interface"
              }
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/inventory/get-product-salable-quantity/{sku}/{stockId}": {
      "get": {
        "tags": [
          "inventorySalesApiGetProductSalableQtyV1"
        ],
        "description": "Get Product Quantity for given SKU and Stock",
        "operationId": "inventorySalesApiGetProductSalableQtyV1ExecuteGet",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "sku",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "stockId",
            "in": "path",
            "type": "integer",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "number"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "500": {
            "description": "Internal Server error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/inventory/is-product-salable/{sku}/{stockId}": {
      "get": {
        "tags": [
          "inventorySalesApiIsProductSalableV1"
        ],
        "description": "Get is product in salable for given SKU in a given Stock",
        "operationId": "inventorySalesApiIsProductSalableV1ExecuteGet",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "sku",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "stockId",
            "in": "path",
            "type": "integer",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "boolean"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/inventory/is-product-salable-for-requested-qty/{sku}/{stockId}/{requestedQty}": {
      "get": {
        "tags": [
          "inventorySalesApiIsProductSalableForRequestedQtyV1"
        ],
        "description": "Get is product salable for given SKU in a given Stock for a certain Qty",
        "operationId": "inventorySalesApiIsProductSalableForRequestedQtyV1ExecuteGet",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "sku",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "stockId",
            "in": "path",
            "type": "integer",
            "required": true
          },
          {
            "name": "requestedQty",
            "in": "path",
            "type": "number",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/inventory-sales-api-data-product-salable-result-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "500": {
            "description": "Internal Server error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/inventory/stock-resolver/{type}/{code}": {
      "get": {
        "tags": [
          "inventorySalesApiStockResolverV1"
        ],
        "description": "Resolve Stock by Sales Channel type and code",
        "operationId": "inventorySalesApiStockResolverV1ExecuteGet",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "type",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "code",
            "in": "path",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/inventory-api-data-stock-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/inventory/low-quantity-notification/{sourceCode}/{sku}": {
      "get": {
        "tags": [
          "inventoryLowQuantityNotificationApiGetSourceItemConfigurationV1"
        ],
        "description": "Get the source item configuration",
        "operationId": "inventoryLowQuantityNotificationApiGetSourceItemConfigurationV1ExecuteGet",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "sourceCode",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "sku",
            "in": "path",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/inventory-low-quantity-notification-api-data-source-item-configuration-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "500": {
            "description": "Internal Server error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/inventory/low-quantity-notification": {
      "post": {
        "tags": [
          "inventoryLowQuantityNotificationApiSourceItemConfigurationsSaveV1"
        ],
        "description": "",
        "operationId": "inventoryLowQuantityNotificationApiSourceItemConfigurationsSaveV1ExecutePost",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "inventoryLowQuantityNotificationApiSourceItemConfigurationsSaveV1ExecutePostBody",
            "in": "body",
            "schema": {
              "required": [
                "sourceItemConfigurations"
              ],
              "properties": {
                "sourceItemConfigurations": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/inventory-low-quantity-notification-api-data-source-item-configuration-interface"
                  }
                }
              },
              "type": "object",
              "xml": {
                "name": "request"
              }
            }
          }
        ],
        "responses": {
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/inventory/low-quantity-notifications-delete": {
      "post": {
        "tags": [
          "inventoryLowQuantityNotificationApiDeleteSourceItemsConfigurationV1"
        ],
        "description": "Delete multiple source items configuration for low quantity",
        "operationId": "inventoryLowQuantityNotificationApiDeleteSourceItemsConfigurationV1ExecutePost",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "inventoryLowQuantityNotificationApiDeleteSourceItemsConfigurationV1ExecutePostBody",
            "in": "body",
            "schema": {
              "required": [
                "sourceItems"
              ],
              "properties": {
                "sourceItems": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/inventory-api-data-source-item-interface"
                  }
                }
              },
              "type": "object",
              "xml": {
                "name": "request"
              }
            }
          }
        ],
        "responses": {
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/inventory/source-selection-algorithm-list": {
      "get": {
        "tags": [
          "inventorySourceSelectionApiGetSourceSelectionAlgorithmListV1"
        ],
        "description": "",
        "operationId": "inventorySourceSelectionApiGetSourceSelectionAlgorithmListV1ExecuteGet",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/inventory-source-selection-api-data-source-selection-algorithm-interface"
              }
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/inventory/source-selection-algorithm-result": {
      "post": {
        "tags": [
          "inventorySourceSelectionApiSourceSelectionServiceV1"
        ],
        "description": "",
        "operationId": "inventorySourceSelectionApiSourceSelectionServiceV1ExecutePost",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "inventorySourceSelectionApiSourceSelectionServiceV1ExecutePostBody",
            "in": "body",
            "schema": {
              "required": [
                "inventoryRequest",
                "algorithmCode"
              ],
              "properties": {
                "inventoryRequest": {
                  "$ref": "#/definitions/inventory-source-selection-api-data-inventory-request-interface"
                },
                "algorithmCode": {
                  "type": "string"
                }
              },
              "type": "object",
              "xml": {
                "name": "request"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/inventory-source-selection-api-data-source-selection-result-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/salesRules/{ruleId}": {
      "get": {
        "tags": [
          "salesRuleRuleRepositoryV1"
        ],
        "description": "Get rule by ID.",
        "operationId": "salesRuleRuleRepositoryV1GetByIdGet",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "ruleId",
            "in": "path",
            "type": "integer",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/sales-rule-data-rule-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "500": {
            "description": "Internal Server error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      },
      "put": {
        "tags": [
          "salesRuleRuleRepositoryV1"
        ],
        "description": "Save sales rule.",
        "operationId": "salesRuleRuleRepositoryV1SavePut",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "ruleId",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "salesRuleRuleRepositoryV1SavePutBody",
            "in": "body",
            "schema": {
              "required": [
                "rule"
              ],
              "properties": {
                "rule": {
                  "$ref": "#/definitions/sales-rule-data-rule-interface"
                }
              },
              "type": "object",
              "xml": {
                "name": "request"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/sales-rule-data-rule-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "500": {
            "description": "Internal Server error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "salesRuleRuleRepositoryV1"
        ],
        "description": "Delete rule by ID.",
        "operationId": "salesRuleRuleRepositoryV1DeleteByIdDelete",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "ruleId",
            "in": "path",
            "type": "integer",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "boolean",
              "description": "true on success"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "500": {
            "description": "Internal Server error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/salesRules/search": {
      "get": {
        "tags": [
          "salesRuleRuleRepositoryV1"
        ],
        "description": "Retrieve sales rules that match te specified criteria. This call returns an array of objects, but detailed information about each object’s attributes might not be included. See https://devdocs.magento.com/codelinks/attributes.html#RuleRepositoryInterface to determine which call to use to get detailed information about all attributes for an object.",
        "operationId": "salesRuleRuleRepositoryV1GetListGet",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "searchCriteria[filterGroups][0][filters][0][field]",
            "in": "query",
            "type": "string",
            "description": "Field"
          },
          {
            "name": "searchCriteria[filterGroups][0][filters][0][value]",
            "in": "query",
            "type": "string",
            "description": "Value"
          },
          {
            "name": "searchCriteria[filterGroups][0][filters][0][conditionType]",
            "in": "query",
            "type": "string",
            "description": "Condition type"
          },
          {
            "name": "searchCriteria[sortOrders][0][field]",
            "in": "query",
            "type": "string",
            "description": "Sorting field."
          },
          {
            "name": "searchCriteria[sortOrders][0][direction]",
            "in": "query",
            "type": "string",
            "description": "Sorting direction."
          },
          {
            "name": "searchCriteria[pageSize]",
            "in": "query",
            "type": "integer",
            "description": "Page size."
          },
          {
            "name": "searchCriteria[currentPage]",
            "in": "query",
            "type": "integer",
            "description": "Current page."
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/sales-rule-data-rule-search-result-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "500": {
            "description": "Internal Server error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/salesRules": {
      "post": {
        "tags": [
          "salesRuleRuleRepositoryV1"
        ],
        "description": "Save sales rule.",
        "operationId": "salesRuleRuleRepositoryV1SavePost",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "salesRuleRuleRepositoryV1SavePostBody",
            "in": "body",
            "schema": {
              "required": [
                "rule"
              ],
              "properties": {
                "rule": {
                  "$ref": "#/definitions/sales-rule-data-rule-interface"
                }
              },
              "type": "object",
              "xml": {
                "name": "request"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/sales-rule-data-rule-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "500": {
            "description": "Internal Server error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/coupons/{couponId}": {
      "get": {
        "tags": [
          "salesRuleCouponRepositoryV1"
        ],
        "description": "Get coupon by coupon id.",
        "operationId": "salesRuleCouponRepositoryV1GetByIdGet",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "couponId",
            "in": "path",
            "type": "integer",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/sales-rule-data-coupon-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "500": {
            "description": "Internal Server error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      },
      "put": {
        "tags": [
          "salesRuleCouponRepositoryV1"
        ],
        "description": "Save a coupon.",
        "operationId": "salesRuleCouponRepositoryV1SavePut",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "couponId",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "salesRuleCouponRepositoryV1SavePutBody",
            "in": "body",
            "schema": {
              "required": [
                "coupon"
              ],
              "properties": {
                "coupon": {
                  "$ref": "#/definitions/sales-rule-data-coupon-interface"
                }
              },
              "type": "object",
              "xml": {
                "name": "request"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/sales-rule-data-coupon-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "500": {
            "description": "Internal Server error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "salesRuleCouponRepositoryV1"
        ],
        "description": "Delete coupon by coupon id.",
        "operationId": "salesRuleCouponRepositoryV1DeleteByIdDelete",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "couponId",
            "in": "path",
            "type": "integer",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "boolean",
              "description": "true on success"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "500": {
            "description": "Internal Server error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/coupons/search": {
      "get": {
        "tags": [
          "salesRuleCouponRepositoryV1"
        ],
        "description": "Retrieve a coupon using the specified search criteria. This call returns an array of objects, but detailed information about each object’s attributes might not be included. See https://devdocs.magento.com/codelinks/attributes.html#CouponRepositoryInterface to determine which call to use to get detailed information about all attributes for an object.",
        "operationId": "salesRuleCouponRepositoryV1GetListGet",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "searchCriteria[filterGroups][0][filters][0][field]",
            "in": "query",
            "type": "string",
            "description": "Field"
          },
          {
            "name": "searchCriteria[filterGroups][0][filters][0][value]",
            "in": "query",
            "type": "string",
            "description": "Value"
          },
          {
            "name": "searchCriteria[filterGroups][0][filters][0][conditionType]",
            "in": "query",
            "type": "string",
            "description": "Condition type"
          },
          {
            "name": "searchCriteria[sortOrders][0][field]",
            "in": "query",
            "type": "string",
            "description": "Sorting field."
          },
          {
            "name": "searchCriteria[sortOrders][0][direction]",
            "in": "query",
            "type": "string",
            "description": "Sorting direction."
          },
          {
            "name": "searchCriteria[pageSize]",
            "in": "query",
            "type": "integer",
            "description": "Page size."
          },
          {
            "name": "searchCriteria[currentPage]",
            "in": "query",
            "type": "integer",
            "description": "Current page."
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/sales-rule-data-coupon-search-result-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "500": {
            "description": "Internal Server error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/coupons": {
      "post": {
        "tags": [
          "salesRuleCouponRepositoryV1"
        ],
        "description": "Save a coupon.",
        "operationId": "salesRuleCouponRepositoryV1SavePost",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "salesRuleCouponRepositoryV1SavePostBody",
            "in": "body",
            "schema": {
              "required": [
                "coupon"
              ],
              "properties": {
                "coupon": {
                  "$ref": "#/definitions/sales-rule-data-coupon-interface"
                }
              },
              "type": "object",
              "xml": {
                "name": "request"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/sales-rule-data-coupon-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "500": {
            "description": "Internal Server error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/coupons/generate": {
      "post": {
        "tags": [
          "salesRuleCouponManagementV1"
        ],
        "description": "Generate coupon for a rule",
        "operationId": "salesRuleCouponManagementV1GeneratePost",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "salesRuleCouponManagementV1GeneratePostBody",
            "in": "body",
            "schema": {
              "required": [
                "couponSpec"
              ],
              "properties": {
                "couponSpec": {
                  "$ref": "#/definitions/sales-rule-data-coupon-generation-spec-interface"
                }
              },
              "type": "object",
              "xml": {
                "name": "request"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "500": {
            "description": "Internal Server error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/coupons/deleteByIds": {
      "post": {
        "tags": [
          "salesRuleCouponManagementV1"
        ],
        "description": "Delete coupon by coupon ids.",
        "operationId": "salesRuleCouponManagementV1DeleteByIdsPost",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "salesRuleCouponManagementV1DeleteByIdsPostBody",
            "in": "body",
            "schema": {
              "required": [
                "ids"
              ],
              "properties": {
                "ids": {
                  "type": "array",
                  "items": {
                    "type": "integer"
                  }
                },
                "ignoreInvalidCoupons": {
                  "type": "boolean"
                }
              },
              "type": "object",
              "xml": {
                "name": "request"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/sales-rule-data-coupon-mass-delete-result-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "500": {
            "description": "Internal Server error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/coupons/deleteByCodes": {
      "post": {
        "tags": [
          "salesRuleCouponManagementV1"
        ],
        "description": "Delete coupon by coupon codes.",
        "operationId": "salesRuleCouponManagementV1DeleteByCodesPost",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "salesRuleCouponManagementV1DeleteByCodesPostBody",
            "in": "body",
            "schema": {
              "required": [
                "codes"
              ],
              "properties": {
                "codes": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "ignoreInvalidCoupons": {
                  "type": "boolean"
                }
              },
              "type": "object",
              "xml": {
                "name": "request"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/sales-rule-data-coupon-mass-delete-result-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "500": {
            "description": "Internal Server error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/carts/licence": {
      "get": {
        "tags": [
          "checkoutAgreementsCheckoutAgreementsRepositoryV1"
        ],
        "description": "Lists active checkout agreements.",
        "operationId": "checkoutAgreementsCheckoutAgreementsRepositoryV1GetListGet",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/checkout-agreements-data-agreement-interface"
              }
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/carts/licence/list": {
      "get": {
        "tags": [
          "checkoutAgreementsCheckoutAgreementsListV1"
        ],
        "description": "List of checkout agreements.",
        "operationId": "checkoutAgreementsCheckoutAgreementsListV1GetListGet",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "searchCriteria[filterGroups][0][filters][0][field]",
            "in": "query",
            "type": "string",
            "description": "Field"
          },
          {
            "name": "searchCriteria[filterGroups][0][filters][0][value]",
            "in": "query",
            "type": "string",
            "description": "Value"
          },
          {
            "name": "searchCriteria[filterGroups][0][filters][0][conditionType]",
            "in": "query",
            "type": "string",
            "description": "Condition type"
          },
          {
            "name": "searchCriteria[sortOrders][0][field]",
            "in": "query",
            "type": "string",
            "description": "Sorting field."
          },
          {
            "name": "searchCriteria[sortOrders][0][direction]",
            "in": "query",
            "type": "string",
            "description": "Sorting direction."
          },
          {
            "name": "searchCriteria[pageSize]",
            "in": "query",
            "type": "integer",
            "description": "Page size."
          },
          {
            "name": "searchCriteria[currentPage]",
            "in": "query",
            "type": "integer",
            "description": "Current page."
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/checkout-agreements-data-agreement-interface"
              }
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/amazon-shipping-address/{amazonOrderReferenceId}": {
      "put": {
        "tags": [
          "amazonPaymentAddressManagementV1"
        ],
        "description": "",
        "operationId": "amazonPaymentAddressManagementV1GetShippingAddressPut",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "amazonOrderReferenceId",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "amazonPaymentAddressManagementV1GetShippingAddressPutBody",
            "in": "body",
            "schema": {
              "required": [
                "addressConsentToken"
              ],
              "properties": {
                "addressConsentToken": {
                  "type": "string"
                }
              },
              "type": "object",
              "xml": {
                "name": "request"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "string"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/amazon-billing-address/{amazonOrderReferenceId}": {
      "put": {
        "tags": [
          "amazonPaymentAddressManagementV1"
        ],
        "description": "",
        "operationId": "amazonPaymentAddressManagementV1GetBillingAddressPut",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "amazonOrderReferenceId",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "amazonPaymentAddressManagementV1GetBillingAddressPutBody",
            "in": "body",
            "schema": {
              "required": [
                "addressConsentToken"
              ],
              "properties": {
                "addressConsentToken": {
                  "type": "string"
                }
              },
              "type": "object",
              "xml": {
                "name": "request"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "string"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/amazon/order-ref": {
      "delete": {
        "tags": [
          "amazonPaymentOrderInformationManagementV1"
        ],
        "description": "",
        "operationId": "amazonPaymentOrderInformationManagementV1RemoveOrderReferenceDelete",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "responses": {
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/msp-2fa/installed-providers": {
      "get": {
        "tags": [
          "\\MSPTwoFactorAuthTfaV1"
        ],
        "description": "Get a list of providers",
        "operationId": "\\MSPTwoFactorAuthTfaV1GetAllProvidersGet",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/m-sp-two-factor-auth-provider-interface"
              }
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/msp-2fa/forced-providers": {
      "get": {
        "tags": [
          "\\MSPTwoFactorAuthTfaV1"
        ],
        "description": "Retrieve forced providers list",
        "operationId": "\\MSPTwoFactorAuthTfaV1GetForcedProvidersGet",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/m-sp-two-factor-auth-provider-interface"
              }
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/msp-2fa/user-providers/{userId}": {
      "get": {
        "tags": [
          "\\MSPTwoFactorAuthTfaV1"
        ],
        "description": "Get a user provider",
        "operationId": "\\MSPTwoFactorAuthTfaV1GetUserProvidersGet",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "type": "integer",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/m-sp-two-factor-auth-provider-interface"
              }
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      },
      "put": {
        "tags": [
          "\\MSPTwoFactorAuthTfaV1"
        ],
        "description": "Set providers",
        "operationId": "\\MSPTwoFactorAuthTfaV1SetProvidersCodesPut",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "type": "integer",
            "required": true
          },
          {
            "name": "\\MSPTwoFactorAuthTfaV1SetProvidersCodesPutBody",
            "in": "body",
            "schema": {
              "required": [
                "providersCodes"
              ],
              "properties": {
                "providersCodes": {
                  "type": "string"
                }
              },
              "type": "object",
              "xml": {
                "name": "request"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "boolean"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/msp-2fa/providers-to-activate/{userId}": {
      "get": {
        "tags": [
          "\\MSPTwoFactorAuthTfaV1"
        ],
        "description": "Returns a list of providers to configure/enroll",
        "operationId": "\\MSPTwoFactorAuthTfaV1GetProvidersToActivateGet",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "type": "integer",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/m-sp-two-factor-auth-provider-interface"
              }
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/msp-2fa/trusted-devices/{userId}": {
      "get": {
        "tags": [
          "\\MSPTwoFactorAuthTfaV1"
        ],
        "description": "Return a list of trusted devices for given user id",
        "operationId": "\\MSPTwoFactorAuthTfaV1GetTrustedDevicesGet",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "type": "integer",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/m-sp-two-factor-auth-data-trusted-interface"
              }
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/msp-2fa/default-provider-code/{userId}": {
      "put": {
        "tags": [
          "\\MSPTwoFactorAuthTfaV1"
        ],
        "description": "Set default provider code",
        "operationId": "\\MSPTwoFactorAuthTfaV1SetDefaultProviderCodePut",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "type": "integer",
            "required": true
          },
          {
            "name": "\\MSPTwoFactorAuthTfaV1SetDefaultProviderCodePutBody",
            "in": "body",
            "schema": {
              "required": [
                "providerCode"
              ],
              "properties": {
                "providerCode": {
                  "type": "string"
                }
              },
              "type": "object",
              "xml": {
                "name": "request"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "boolean"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      },
      "get": {
        "tags": [
          "\\MSPTwoFactorAuthUserConfigManagerV1"
        ],
        "description": "get default provider",
        "operationId": "\\MSPTwoFactorAuthUserConfigManagerV1GetDefaultProviderGet",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "type": "integer",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "string"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/msp-2fa/reset-provider/{userId}/{providerCode}": {
      "post": {
        "tags": [
          "\\MSPTwoFactorAuthTfaV1"
        ],
        "description": "Reset default provider code",
        "operationId": "\\MSPTwoFactorAuthTfaV1ResetProviderConfigPost",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "type": "integer",
            "required": true
          },
          {
            "name": "providerCode",
            "in": "path",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "boolean"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/msp-2fa/trusted-devices/{tokenId}": {
      "delete": {
        "tags": [
          "\\MSPTwoFactorAuthTrustedManagerV1"
        ],
        "description": "Revoke trusted device",
        "operationId": "\\MSPTwoFactorAuthTrustedManagerV1RevokeTrustedDeviceDelete",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "tokenId",
            "in": "path",
            "type": "integer",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "boolean"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/carts/mine/delivery-option": {
      "post": {
        "tags": [
          "temandoShippingQuoteCartDeliveryOptionManagementV1"
        ],
        "description": "Handle selected delivery option.",
        "operationId": "temandoShippingQuoteCartDeliveryOptionManagementV1SavePost",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "temandoShippingQuoteCartDeliveryOptionManagementV1SavePostBody",
            "in": "body",
            "schema": {
              "required": [
                "selectedOption"
              ],
              "properties": {
                "selectedOption": {
                  "type": "string"
                }
              },
              "type": "object",
              "xml": {
                "name": "request"
              }
            }
          }
        ],
        "responses": {
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "500": {
            "description": "Internal Server error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/guest-carts/{cartId}/delivery-option": {
      "post": {
        "tags": [
          "temandoShippingQuoteGuestCartDeliveryOptionManagementV1"
        ],
        "description": "Handle selected delivery option.",
        "operationId": "temandoShippingQuoteGuestCartDeliveryOptionManagementV1SavePost",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "cartId",
            "in": "path",
            "type": "string",
            "required": true,
            "description": "The shopping cart ID."
          },
          {
            "name": "temandoShippingQuoteGuestCartDeliveryOptionManagementV1SavePostBody",
            "in": "body",
            "schema": {
              "required": [
                "selectedOption"
              ],
              "properties": {
                "selectedOption": {
                  "type": "string"
                }
              },
              "type": "object",
              "xml": {
                "name": "request"
              }
            }
          }
        ],
        "responses": {
          "500": {
            "description": "Internal Server error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/temando/rma/{rmaId}/shipments": {
      "put": {
        "tags": [
          "temandoShippingRmaRmaShipmentManagementV1"
        ],
        "description": "Assign platform shipment IDs to a core RMA entity.",
        "operationId": "temandoShippingRmaRmaShipmentManagementV1AssignShipmentIdsPut",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "rmaId",
            "in": "path",
            "type": "integer",
            "required": true
          },
          {
            "name": "temandoShippingRmaRmaShipmentManagementV1AssignShipmentIdsPutBody",
            "in": "body",
            "schema": {
              "required": [
                "returnShipmentIds"
              ],
              "properties": {
                "returnShipmentIds": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "type": "object",
              "xml": {
                "name": "request"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "integer",
              "description": "Number of successfully assigned shipment IDs."
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "500": {
            "description": "Internal Server error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/guest-carts/{cartId}/collection-point/search-request": {
      "put": {
        "tags": [
          "temandoShippingCheckoutGuestCartCollectionPointManagementV1"
        ],
        "description": "Save a customer's search for collection points.",
        "operationId": "temandoShippingCheckoutGuestCartCollectionPointManagementV1SaveSearchRequestPut",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "cartId",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "temandoShippingCheckoutGuestCartCollectionPointManagementV1SaveSearchRequestPutBody",
            "in": "body",
            "schema": {
              "required": [
                "countryId",
                "postcode"
              ],
              "properties": {
                "countryId": {
                  "type": "string"
                },
                "postcode": {
                  "type": "string"
                }
              },
              "type": "object",
              "xml": {
                "name": "request"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/temando-shipping-data-delivery-collection-point-search-request-interface"
            }
          },
          "500": {
            "description": "Internal Server error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "temandoShippingCheckoutGuestCartCollectionPointManagementV1"
        ],
        "description": "Delete a customer's search for collection points.",
        "operationId": "temandoShippingCheckoutGuestCartCollectionPointManagementV1DeleteSearchRequestDelete",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "cartId",
            "in": "path",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "boolean"
            }
          },
          "500": {
            "description": "Internal Server error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/guest-carts/{cartId}/collection-point/search-result": {
      "get": {
        "tags": [
          "temandoShippingCheckoutGuestCartCollectionPointManagementV1"
        ],
        "description": "Retrieve collection points matching the customer's search parameters.",
        "operationId": "temandoShippingCheckoutGuestCartCollectionPointManagementV1GetCollectionPointsGet",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "cartId",
            "in": "path",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/temando-shipping-data-delivery-quote-collection-point-interface"
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/guest-carts/{cartId}/checkout-collection-point/select": {
      "post": {
        "tags": [
          "temandoShippingCheckoutGuestCartCollectionPointManagementV1"
        ],
        "description": "Select a given collection point for checkout.",
        "operationId": "temandoShippingCheckoutGuestCartCollectionPointManagementV1SelectCollectionPointPost",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "cartId",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "temandoShippingCheckoutGuestCartCollectionPointManagementV1SelectCollectionPointPostBody",
            "in": "body",
            "schema": {
              "required": [
                "collectionPointId"
              ],
              "properties": {
                "collectionPointId": {
                  "type": "string"
                }
              },
              "type": "object",
              "xml": {
                "name": "request"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "boolean"
            }
          },
          "500": {
            "description": "Internal Server error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/guest-carts/{cartId}/collection-point/select": {
      "post": {
        "tags": [
          "temandoShippingDeliveryGuestCartCollectionPointManagementV1"
        ],
        "description": "",
        "operationId": "temandoShippingDeliveryGuestCartCollectionPointManagementV1SelectCollectionPointPost",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "cartId",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "temandoShippingDeliveryGuestCartCollectionPointManagementV1SelectCollectionPointPostBody",
            "in": "body",
            "schema": {
              "required": [
                "entityId"
              ],
              "properties": {
                "entityId": {
                  "type": "integer"
                }
              },
              "type": "object",
              "xml": {
                "name": "request"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "boolean"
            }
          },
          "500": {
            "description": "Internal Server error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/carts/mine/collection-point/search-request": {
      "put": {
        "tags": [
          "temandoShippingCheckoutCartCollectionPointManagementV1"
        ],
        "description": "Save a customer's search for collection points.",
        "operationId": "temandoShippingCheckoutCartCollectionPointManagementV1SaveSearchRequestPut",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "temandoShippingCheckoutCartCollectionPointManagementV1SaveSearchRequestPutBody",
            "in": "body",
            "schema": {
              "required": [
                "countryId",
                "postcode"
              ],
              "properties": {
                "countryId": {
                  "type": "string"
                },
                "postcode": {
                  "type": "string"
                }
              },
              "type": "object",
              "xml": {
                "name": "request"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "$ref": "#/definitions/temando-shipping-data-delivery-collection-point-search-request-interface"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "500": {
            "description": "Internal Server error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "temandoShippingCheckoutCartCollectionPointManagementV1"
        ],
        "description": "Delete a customer's search for collection points.",
        "operationId": "temandoShippingCheckoutCartCollectionPointManagementV1DeleteSearchRequestDelete",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "boolean"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "500": {
            "description": "Internal Server error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/carts/mine/collection-point/search-result": {
      "get": {
        "tags": [
          "temandoShippingCheckoutCartCollectionPointManagementV1"
        ],
        "description": "Retrieve collection points matching the customer's search parameters.",
        "operationId": "temandoShippingCheckoutCartCollectionPointManagementV1GetCollectionPointsGet",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/temando-shipping-data-delivery-quote-collection-point-interface"
              }
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/carts/mine/checkout-collection-point/select": {
      "post": {
        "tags": [
          "temandoShippingCheckoutCartCollectionPointManagementV1"
        ],
        "description": "Select a given collection point for checkout.",
        "operationId": "temandoShippingCheckoutCartCollectionPointManagementV1SelectCollectionPointPost",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "temandoShippingCheckoutCartCollectionPointManagementV1SelectCollectionPointPostBody",
            "in": "body",
            "schema": {
              "required": [
                "collectionPointId"
              ],
              "properties": {
                "collectionPointId": {
                  "type": "string"
                }
              },
              "type": "object",
              "xml": {
                "name": "request"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "boolean"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "500": {
            "description": "Internal Server error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/carts/mine/collection-point/select": {
      "post": {
        "tags": [
          "temandoShippingDeliveryCartCollectionPointManagementV1"
        ],
        "description": "",
        "operationId": "temandoShippingDeliveryCartCollectionPointManagementV1SelectCollectionPointPost",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "temandoShippingDeliveryCartCollectionPointManagementV1SelectCollectionPointPostBody",
            "in": "body",
            "schema": {
              "required": [
                "entityId"
              ],
              "properties": {
                "entityId": {
                  "type": "integer"
                }
              },
              "type": "object",
              "xml": {
                "name": "request"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "boolean"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "500": {
            "description": "Internal Server error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/guest-carts/{cartId}/checkout-fields": {
      "post": {
        "tags": [
          "temandoShippingQuoteGuestCartCheckoutFieldManagementV1"
        ],
        "description": "",
        "operationId": "temandoShippingQuoteGuestCartCheckoutFieldManagementV1SaveCheckoutFieldsPost",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "cartId",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "temandoShippingQuoteGuestCartCheckoutFieldManagementV1SaveCheckoutFieldsPostBody",
            "in": "body",
            "schema": {
              "required": [
                "serviceSelection"
              ],
              "properties": {
                "serviceSelection": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/framework-attribute-interface"
                  }
                }
              },
              "type": "object",
              "xml": {
                "name": "request"
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/carts/mine/checkout-fields": {
      "post": {
        "tags": [
          "temandoShippingQuoteCartCheckoutFieldManagementV1"
        ],
        "description": "",
        "operationId": "temandoShippingQuoteCartCheckoutFieldManagementV1SaveCheckoutFieldsPost",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "temandoShippingQuoteCartCheckoutFieldManagementV1SaveCheckoutFieldsPostBody",
            "in": "body",
            "schema": {
              "required": [
                "serviceSelection"
              ],
              "properties": {
                "serviceSelection": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/framework-attribute-interface"
                  }
                }
              },
              "type": "object",
              "xml": {
                "name": "request"
              }
            }
          }
        ],
        "responses": {
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/guest-carts/{cartId}/checkout-pickup-location/select": {
      "post": {
        "tags": [
          "temandoShippingCheckoutGuestCartPickupLocationManagementV1"
        ],
        "description": "Select a given pickup location for checkout.",
        "operationId": "temandoShippingCheckoutGuestCartPickupLocationManagementV1SelectPickupLocationPost",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "cartId",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "temandoShippingCheckoutGuestCartPickupLocationManagementV1SelectPickupLocationPostBody",
            "in": "body",
            "schema": {
              "required": [
                "pickupLocationId"
              ],
              "properties": {
                "pickupLocationId": {
                  "type": "string"
                }
              },
              "type": "object",
              "xml": {
                "name": "request"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "boolean"
            }
          },
          "500": {
            "description": "Internal Server error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/guest-carts/{cartId}/pickup-location/select": {
      "post": {
        "tags": [
          "temandoShippingDeliveryGuestCartPickupLocationManagementV1"
        ],
        "description": "",
        "operationId": "temandoShippingDeliveryGuestCartPickupLocationManagementV1SelectPickupLocationPost",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "cartId",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "temandoShippingDeliveryGuestCartPickupLocationManagementV1SelectPickupLocationPostBody",
            "in": "body",
            "schema": {
              "required": [
                "entityId"
              ],
              "properties": {
                "entityId": {
                  "type": "integer"
                }
              },
              "type": "object",
              "xml": {
                "name": "request"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "boolean"
            }
          },
          "500": {
            "description": "Internal Server error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/carts/mine/checkout-pickup-location/select": {
      "post": {
        "tags": [
          "temandoShippingCheckoutCartPickupLocationManagementV1"
        ],
        "description": "Select a given pickup location for checkout.",
        "operationId": "temandoShippingCheckoutCartPickupLocationManagementV1SelectPickupLocationPost",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "temandoShippingCheckoutCartPickupLocationManagementV1SelectPickupLocationPostBody",
            "in": "body",
            "schema": {
              "required": [
                "pickupLocationId"
              ],
              "properties": {
                "pickupLocationId": {
                  "type": "string"
                }
              },
              "type": "object",
              "xml": {
                "name": "request"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "boolean"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "500": {
            "description": "Internal Server error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/carts/mine/pickup-location/select": {
      "post": {
        "tags": [
          "temandoShippingDeliveryCartPickupLocationManagementV1"
        ],
        "description": "",
        "operationId": "temandoShippingDeliveryCartPickupLocationManagementV1SelectPickupLocationPost",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "temandoShippingDeliveryCartPickupLocationManagementV1SelectPickupLocationPostBody",
            "in": "body",
            "schema": {
              "required": [
                "entityId"
              ],
              "properties": {
                "entityId": {
                  "type": "integer"
                }
              },
              "type": "object",
              "xml": {
                "name": "request"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "boolean"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "500": {
            "description": "Internal Server error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/attribute/product/shipping": {
      "get": {
        "tags": [
          "temandoShippingAttributeMappingProductManagementV1"
        ],
        "description": "Retrieve shipping platform attributes.",
        "operationId": "temandoShippingAttributeMappingProductManagementV1GetShippingAttributesGet",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/attribute/product": {
      "get": {
        "tags": [
          "temandoShippingAttributeMappingProductManagementV1"
        ],
        "description": "",
        "operationId": "temandoShippingAttributeMappingProductManagementV1GetProductAttributesGet",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    },
    "/V1/attribute/product/delete/{nodePathId}": {
      "post": {
        "tags": [
          "temandoShippingAttributeMappingProductManagementV1"
        ],
        "description": "",
        "operationId": "temandoShippingAttributeMappingProductManagementV1DeletePost",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "nodePathId",
            "in": "path",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "schema": {
              "type": "string"
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/error-response"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "error-response": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string",
          "description": "Error message"
        },
        "errors": {
          "$ref": "#/definitions/error-errors"
        },
        "code": {
          "type": "integer",
          "description": "Error code"
        },
        "parameters": {
          "$ref": "#/definitions/error-parameters"
        },
        "trace": {
          "type": "string",
          "description": "Stack trace"
        }
      },
      "required": [
        "message"
      ]
    },
    "error-errors": {
      "type": "array",
      "description": "Errors list",
      "items": {
        "$ref": "#/definitions/error-errors-item"
      }
    },
    "error-errors-item": {
      "type": "object",
      "description": "Error details",
      "properties": {
        "message": {
          "type": "string",
          "description": "Error message"
        },
        "parameters": {
          "$ref": "#/definitions/error-parameters"
        }
      }
    },
    "error-parameters": {
      "type": "array",
      "description": "Error parameters list",
      "items": {
        "$ref": "#/definitions/error-parameters-item"
      }
    },
    "error-parameters-item": {
      "type": "object",
      "description": "Error parameters item",
      "properties": {
        "resources": {
          "type": "string",
          "description": "ACL resource"
        },
        "fieldName": {
          "type": "string",
          "description": "Missing or invalid field name"
        },
        "fieldValue": {
          "type": "string",
          "description": "Incorrect field value"
        }
      }
    },
    "store-data-store-interface": {
      "type": "object",
      "description": "Store interface",
      "properties": {
        "id": {
          "type": "integer"
        },
        "code": {
          "type": "string"
        },
        "name": {
          "type": "string",
          "description": "Store name"
        },
        "website_id": {
          "type": "integer"
        },
        "store_group_id": {
          "type": "integer"
        },
        "is_active": {
          "type": "integer"
        },
        "extension_attributes": {
          "$ref": "#/definitions/store-data-store-extension-interface"
        }
      },
      "required": [
        "id",
        "code",
        "name",
        "website_id",
        "store_group_id",
        "is_active"
      ]
    },
    "store-data-store-extension-interface": {
      "type": "object",
      "description": "ExtensionInterface class for @see \\Magento\\Store\\Api\\Data\\StoreInterface"
    },
    "store-data-group-interface": {
      "type": "object",
      "description": "Group interface",
      "properties": {
        "id": {
          "type": "integer"
        },
        "website_id": {
          "type": "integer"
        },
        "root_category_id": {
          "type": "integer"
        },
        "default_store_id": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "code": {
          "type": "string",
          "description": "Group code."
        },
        "extension_attributes": {
          "$ref": "#/definitions/store-data-group-extension-interface"
        }
      },
      "required": [
        "id",
        "website_id",
        "root_category_id",
        "default_store_id",
        "name",
        "code"
      ]
    },
    "store-data-group-extension-interface": {
      "type": "object",
      "description": "ExtensionInterface class for @see \\Magento\\Store\\Api\\Data\\GroupInterface"
    },
    "store-data-website-interface": {
      "type": "object",
      "description": "Website interface",
      "properties": {
        "id": {
          "type": "integer"
        },
        "code": {
          "type": "string"
        },
        "name": {
          "type": "string",
          "description": "Website name"
        },
        "default_group_id": {
          "type": "integer"
        },
        "extension_attributes": {
          "$ref": "#/definitions/store-data-website-extension-interface"
        }
      },
      "required": [
        "id",
        "code",
        "name",
        "default_group_id"
      ]
    },
    "store-data-website-extension-interface": {
      "type": "object",
      "description": "ExtensionInterface class for @see \\Magento\\Store\\Api\\Data\\WebsiteInterface"
    },
    "store-data-store-config-interface": {
      "type": "object",
      "description": "StoreConfig interface",
      "properties": {
        "id": {
          "type": "integer",
          "description": "Store id"
        },
        "code": {
          "type": "string",
          "description": "Store code"
        },
        "website_id": {
          "type": "integer",
          "description": "Website id of the store"
        },
        "locale": {
          "type": "string",
          "description": "Store locale"
        },
        "base_currency_code": {
          "type": "string",
          "description": "Base currency code"
        },
        "default_display_currency_code": {
          "type": "string",
          "description": "Default display currency code"
        },
        "timezone": {
          "type": "string",
          "description": "Timezone of the store"
        },
        "weight_unit": {
          "type": "string",
          "description": "The unit of weight"
        },
        "base_url": {
          "type": "string",
          "description": "Base URL for the store"
        },
        "base_link_url": {
          "type": "string",
          "description": "Base link URL for the store"
        },
        "base_static_url": {
          "type": "string",
          "description": "Base static URL for the store"
        },
        "base_media_url": {
          "type": "string",
          "description": "Base media URL for the store"
        },
        "secure_base_url": {
          "type": "string",
          "description": "Secure base URL for the store"
        },
        "secure_base_link_url": {
          "type": "string",
          "description": "Secure base link URL for the store"
        },
        "secure_base_static_url": {
          "type": "string",
          "description": "Secure base static URL for the store"
        },
        "secure_base_media_url": {
          "type": "string",
          "description": "Secure base media URL for the store"
        },
        "extension_attributes": {
          "$ref": "#/definitions/store-data-store-config-extension-interface"
        }
      },
      "required": [
        "id",
        "code",
        "website_id",
        "locale",
        "base_currency_code",
        "default_display_currency_code",
        "timezone",
        "weight_unit",
        "base_url",
        "base_link_url",
        "base_static_url",
        "base_media_url",
        "secure_base_url",
        "secure_base_link_url",
        "secure_base_static_url",
        "secure_base_media_url"
      ]
    },
    "store-data-store-config-extension-interface": {
      "type": "object",
      "description": "ExtensionInterface class for @see \\Magento\\Store\\Api\\Data\\StoreConfigInterface"
    },
    "directory-data-currency-information-interface": {
      "type": "object",
      "description": "Currency Information interface.",
      "properties": {
        "base_currency_code": {
          "type": "string",
          "description": "The base currency code for the store."
        },
        "base_currency_symbol": {
          "type": "string",
          "description": "The currency symbol of the base currency for the store."
        },
        "default_display_currency_code": {
          "type": "string",
          "description": "The default display currency code for the store."
        },
        "default_display_currency_symbol": {
          "type": "string",
          "description": "The currency symbol of the default display currency for the store."
        },
        "available_currency_codes": {
          "type": "array",
          "description": "The list of allowed currency codes for the store.",
          "items": {
            "type": "string"
          }
        },
        "exchange_rates": {
          "type": "array",
          "description": "The list of exchange rate information for the store.",
          "items": {
            "$ref": "#/definitions/directory-data-exchange-rate-interface"
          }
        },
        "extension_attributes": {
          "$ref": "#/definitions/directory-data-currency-information-extension-interface"
        }
      },
      "required": [
        "base_currency_code",
        "base_currency_symbol",
        "default_display_currency_code",
        "default_display_currency_symbol",
        "available_currency_codes",
        "exchange_rates"
      ]
    },
    "directory-data-exchange-rate-interface": {
      "type": "object",
      "description": "Exchange Rate interface.",
      "properties": {
        "currency_to": {
          "type": "string",
          "description": "The currency code associated with the exchange rate."
        },
        "rate": {
          "type": "number",
          "description": "The exchange rate for the associated currency and the store's base currency."
        },
        "extension_attributes": {
          "$ref": "#/definitions/directory-data-exchange-rate-extension-interface"
        }
      },
      "required": [
        "currency_to",
        "rate"
      ]
    },
    "directory-data-exchange-rate-extension-interface": {
      "type": "object",
      "description": "ExtensionInterface class for @see \\Magento\\Directory\\Api\\Data\\ExchangeRateInterface"
    },
    "directory-data-currency-information-extension-interface": {
      "type": "object",
      "description": "ExtensionInterface class for @see \\Magento\\Directory\\Api\\Data\\CurrencyInformationInterface"
    },
    "directory-data-country-information-interface": {
      "type": "object",
      "description": "Country Information interface.",
      "properties": {
        "id": {
          "type": "string",
          "description": "The country id for the store."
        },
        "two_letter_abbreviation": {
          "type": "string",
          "description": "The country 2 letter abbreviation for the store."
        },
        "three_letter_abbreviation": {
          "type": "string",
          "description": "The country 3 letter abbreviation for the store."
        },
        "full_name_locale": {
          "type": "string",
          "description": "The country full name (in store locale) for the store."
        },
        "full_name_english": {
          "type": "string",
          "description": "The country full name (in English) for the store."
        },
        "available_regions": {
          "type": "array",
          "description": "The available regions for the store.",
          "items": {
            "$ref": "#/definitions/directory-data-region-information-interface"
          }
        },
        "extension_attributes": {
          "$ref": "#/definitions/directory-data-country-information-extension-interface"
        }
      },
      "required": [
        "id",
        "two_letter_abbreviation",
        "three_letter_abbreviation",
        "full_name_locale",
        "full_name_english"
      ]
    },
    "directory-data-region-information-interface": {
      "type": "object",
      "description": "Region Information interface.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Region id"
        },
        "code": {
          "type": "string",
          "description": "Region code"
        },
        "name": {
          "type": "string",
          "description": "Region name"
        },
        "extension_attributes": {
          "$ref": "#/definitions/directory-data-region-information-extension-interface"
        }
      },
      "required": [
        "id",
        "code",
        "name"
      ]
    },
    "directory-data-region-information-extension-interface": {
      "type": "object",
      "description": "ExtensionInterface class for @see \\Magento\\Directory\\Api\\Data\\RegionInformationInterface"
    },
    "directory-data-country-information-extension-interface": {
      "type": "object",
      "description": "ExtensionInterface class for @see \\Magento\\Directory\\Api\\Data\\CountryInformationInterface"
    },
    "eav-data-attribute-set-search-results-interface": {
      "type": "object",
      "description": "Interface AttributeSetSearchResultsInterface",
      "properties": {
        "items": {
          "type": "array",
          "description": "Attribute sets list.",
          "items": {
            "$ref": "#/definitions/eav-data-attribute-set-interface"
          }
        },
        "search_criteria": {
          "$ref": "#/definitions/framework-search-criteria-interface"
        },
        "total_count": {
          "type": "integer",
          "description": "Total count."
        }
      },
      "required": [
        "items",
        "search_criteria",
        "total_count"
      ]
    },
    "eav-data-attribute-set-interface": {
      "type": "object",
      "description": "Interface AttributeSetInterface",
      "properties": {
        "attribute_set_id": {
          "type": "integer",
          "description": "Attribute set ID"
        },
        "attribute_set_name": {
          "type": "string",
          "description": "Attribute set name"
        },
        "sort_order": {
          "type": "integer",
          "description": "Attribute set sort order index"
        },
        "entity_type_id": {
          "type": "integer",
          "description": "Attribute set entity type id"
        },
        "extension_attributes": {
          "$ref": "#/definitions/eav-data-attribute-set-extension-interface"
        }
      },
      "required": [
        "attribute_set_name",
        "sort_order"
      ]
    },
    "eav-data-attribute-set-extension-interface": {
      "type": "object",
      "description": "ExtensionInterface class for @see \\Magento\\Eav\\Api\\Data\\AttributeSetInterface"
    },
    "framework-search-criteria-interface": {
      "type": "object",
      "description": "Search criteria interface.",
      "properties": {
        "filter_groups": {
          "type": "array",
          "description": "A list of filter groups.",
          "items": {
            "$ref": "#/definitions/framework-search-filter-group"
          }
        },
        "sort_orders": {
          "type": "array",
          "description": "Sort order.",
          "items": {
            "$ref": "#/definitions/framework-sort-order"
          }
        },
        "page_size": {
          "type": "integer",
          "description": "Page size."
        },
        "current_page": {
          "type": "integer",
          "description": "Current page."
        }
      },
      "required": [
        "filter_groups"
      ]
    },
    "framework-search-filter-group": {
      "type": "object",
      "description": "Groups two or more filters together using a logical OR",
      "properties": {
        "filters": {
          "type": "array",
          "description": "A list of filters in this group",
          "items": {
            "$ref": "#/definitions/framework-filter"
          }
        }
      }
    },
    "framework-filter": {
      "type": "object",
      "description": "Filter which can be used by any methods from service layer.",
      "properties": {
        "field": {
          "type": "string",
          "description": "Field"
        },
        "value": {
          "type": "string",
          "description": "Value"
        },
        "condition_type": {
          "type": "string",
          "description": "Condition type"
        }
      },
      "required": [
        "field",
        "value"
      ]
    },
    "framework-sort-order": {
      "type": "object",
      "description": "Data object for sort order.",
      "properties": {
        "field": {
          "type": "string",
          "description": "Sorting field."
        },
        "direction": {
          "type": "string",
          "description": "Sorting direction."
        }
      },
      "required": [
        "field",
        "direction"
      ]
    },
    "customer-data-group-interface": {
      "type": "object",
      "description": "Customer group interface.",
      "properties": {
        "id": {
          "type": "integer",
          "description": "Id"
        },
        "code": {
          "type": "string",
          "description": "Code"
        },
        "tax_class_id": {
          "type": "integer",
          "description": "Tax class id"
        },
        "tax_class_name": {
          "type": "string",
          "description": "Tax class name"
        },
        "extension_attributes": {
          "$ref": "#/definitions/customer-data-group-extension-interface"
        }
      },
      "required": [
        "code",
        "tax_class_id"
      ]
    },
    "customer-data-group-extension-interface": {
      "type": "object",
      "description": "ExtensionInterface class for @see \\Magento\\Customer\\Api\\Data\\GroupInterface"
    },
    "customer-data-group-search-results-interface": {
      "type": "object",
      "description": "Interface for customer groups search results.",
      "properties": {
        "items": {
          "type": "array",
          "description": "Customer groups list.",
          "items": {
            "$ref": "#/definitions/customer-data-group-interface"
          }
        },
        "search_criteria": {
          "$ref": "#/definitions/framework-search-criteria-interface"
        },
        "total_count": {
          "type": "integer",
          "description": "Total count."
        }
      },
      "required": [
        "items",
        "search_criteria",
        "total_count"
      ]
    },
    "customer-data-attribute-metadata-interface": {
      "type": "object",
      "description": "Customer attribute metadata interface.",
      "properties": {
        "frontend_input": {
          "type": "string",
          "description": "HTML for input element."
        },
        "input_filter": {
          "type": "string",
          "description": "Template used for input (e.g. \"date\")"
        },
        "store_label": {
          "type": "string",
          "description": "Label of the store."
        },
        "validation_rules": {
          "type": "array",
          "description": "Validation rules.",
          "items": {
            "$ref": "#/definitions/customer-data-validation-rule-interface"
          }
        },
        "multiline_count": {
          "type": "integer",
          "description": "Of lines of the attribute value."
        },
        "visible": {
          "type": "boolean",
          "description": "Attribute is visible on frontend."
        },
        "required": {
          "type": "boolean",
          "description": "Attribute is required."
        },
        "data_model": {
          "type": "string",
          "description": "Data model for attribute."
        },
        "options": {
          "type": "array",
          "description": "Options of the attribute (key => value pairs for select)",
          "items": {
            "$ref": "#/definitions/customer-data-option-interface"
          }
        },
        "frontend_class": {
          "type": "string",
          "description": "Class which is used to display the attribute on frontend."
        },
        "user_defined": {
          "type": "boolean",
          "description": "Current attribute has been defined by a user."
        },
        "sort_order": {
          "type": "integer",
          "description": "Attributes sort order."
        },
        "frontend_label": {
          "type": "string",
          "description": "Label which supposed to be displayed on frontend."
        },
        "note": {
          "type": "string",
          "description": "The note attribute for the element."
        },
        "system": {
          "type": "boolean",
          "description": "This is a system attribute."
        },
        "backend_type": {
          "type": "string",
          "description": "Backend type."
        },
        "is_used_in_grid": {
          "type": "boolean",
          "description": "It is used in customer grid"
        },
        "is_visible_in_grid": {
          "type": "boolean",
          "description": "It is visible in customer grid"
        },
        "is_filterable_in_grid": {
          "type": "boolean",
          "description": "It is filterable in customer grid"
        },
        "is_searchable_in_grid": {
          "type": "boolean",
          "description": "It is searchable in customer grid"
        },
        "attribute_code": {
          "type": "string",
          "description": "Code of the attribute."
        }
      },
      "required": [
        "frontend_input",
        "input_filter",
        "store_label",
        "validation_rules",
        "multiline_count",
        "visible",
        "required",
        "data_model",
        "options",
        "frontend_class",
        "user_defined",
        "sort_order",
        "frontend_label",
        "note",
        "system",
        "backend_type",
        "attribute_code"
      ]
    },
    "customer-data-validation-rule-interface": {
      "type": "object",
      "description": "Validation rule interface.",
      "properties": {
        "name": {
          "type": "string",
          "description": "Validation rule name"
        },
        "value": {
          "type": "string",
          "description": "Validation rule value"
        }
      },
      "required": [
        "name",
        "value"
      ]
    },
    "customer-data-option-interface": {
      "type": "object",
      "description": "Option interface.",
      "properties": {
        "label": {
          "type": "string",
          "description": "Option label"
        },
        "value": {
          "type": "string",
          "description": "Option value"
        },
        "options": {
          "type": "array",
          "description": "Nested options",
          "items": {
            "$ref": "#/definitions/customer-data-option-interface"
          }
        }
      },
      "required": [
        "label"
      ]
    },
    "customer-data-customer-interface": {
      "type": "object",
      "description": "Customer interface.",
      "properties": {
        "id": {
          "type": "integer",
          "description": "Customer id"
        },
        "group_id": {
          "type": "integer",
          "description": "Group id"
        },
        "default_billing": {
          "type": "string",
          "description": "Default billing address id"
        },
        "default_shipping": {
          "type": "string",
          "description": "Default shipping address id"
        },
        "confirmation": {
          "type": "string",
          "description": "Confirmation"
        },
        "created_at": {
          "type": "string",
          "description": "Created at time"
        },
        "updated_at": {
          "type": "string",
          "description": "Updated at time"
        },
        "created_in": {
          "type": "string",
          "description": "Created in area"
        },
        "dob": {
          "type": "string",
          "description": "Date of birth"
        },
        "email": {
          "type": "string",
          "description": "Email address"
        },
        "firstname": {
          "type": "string",
          "description": "First name"
        },
        "lastname": {
          "type": "string",
          "description": "Last name"
        },
        "middlename": {
          "type": "string",
          "description": "Middle name"
        },
        "prefix": {
          "type": "string",
          "description": "Prefix"
        },
        "suffix": {
          "type": "string",
          "description": "Suffix"
        },
        "gender": {
          "type": "integer",
          "description": "Gender"
        },
        "store_id": {
          "type": "integer",
          "description": "Store id"
        },
        "taxvat": {
          "type": "string",
          "description": "Tax Vat"
        },
        "website_id": {
          "type": "integer",
          "description": "Website id"
        },
        "addresses": {
          "type": "array",
          "description": "Customer addresses.",
          "items": {
            "$ref": "#/definitions/customer-data-address-interface"
          }
        },
        "disable_auto_group_change": {
          "type": "integer",
          "description": "Disable auto group change flag."
        },
        "extension_attributes": {
          "$ref": "#/definitions/customer-data-customer-extension-interface"
        },
        "custom_attributes": {
          "type": "array",
          "description": "Custom attributes values.",
          "items": {
            "$ref": "#/definitions/framework-attribute-interface"
          }
        }
      },
      "required": [
        "email",
        "firstname",
        "lastname"
      ]
    },
    "customer-data-address-interface": {
      "type": "object",
      "description": "Customer address interface.",
      "properties": {
        "id": {
          "type": "integer",
          "description": "ID"
        },
        "customer_id": {
          "type": "integer",
          "description": "Customer ID"
        },
        "region": {
          "$ref": "#/definitions/customer-data-region-interface"
        },
        "region_id": {
          "type": "integer",
          "description": "Region ID"
        },
        "country_id": {
          "type": "string",
          "description": "Country code in ISO_3166-2 format"
        },
        "street": {
          "type": "array",
          "description": "Street",
          "items": {
            "type": "string"
          }
        },
        "company": {
          "type": "string",
          "description": "Company"
        },
        "telephone": {
          "type": "string",
          "description": "Telephone number"
        },
        "fax": {
          "type": "string",
          "description": "Fax number"
        },
        "postcode": {
          "type": "string",
          "description": "Postcode"
        },
        "city": {
          "type": "string",
          "description": "City name"
        },
        "firstname": {
          "type": "string",
          "description": "First name"
        },
        "lastname": {
          "type": "string",
          "description": "Last name"
        },
        "middlename": {
          "type": "string",
          "description": "Middle name"
        },
        "prefix": {
          "type": "string",
          "description": "Prefix"
        },
        "suffix": {
          "type": "string",
          "description": "Suffix"
        },
        "vat_id": {
          "type": "string",
          "description": "Vat id"
        },
        "default_shipping": {
          "type": "boolean",
          "description": "If this address is default shipping address."
        },
        "default_billing": {
          "type": "boolean",
          "description": "If this address is default billing address"
        },
        "extension_attributes": {
          "$ref": "#/definitions/customer-data-address-extension-interface"
        },
        "custom_attributes": {
          "type": "array",
          "description": "Custom attributes values.",
          "items": {
            "$ref": "#/definitions/framework-attribute-interface"
          }
        }
      }
    },
    "customer-data-region-interface": {
      "type": "object",
      "description": "Customer address region interface.",
      "properties": {
        "region_code": {
          "type": "string",
          "description": "Region code"
        },
        "region": {
          "type": "string",
          "description": "Region"
        },
        "region_id": {
          "type": "integer",
          "description": "Region id"
        },
        "extension_attributes": {
          "$ref": "#/definitions/customer-data-region-extension-interface"
        }
      },
      "required": [
        "region_code",
        "region",
        "region_id"
      ]
    },
    "customer-data-region-extension-interface": {
      "type": "object",
      "description": "ExtensionInterface class for @see \\Magento\\Customer\\Api\\Data\\RegionInterface"
    },
    "customer-data-address-extension-interface": {
      "type": "object",
      "description": "ExtensionInterface class for @see \\Magento\\Customer\\Api\\Data\\AddressInterface"
    },
    "framework-attribute-interface": {
      "type": "object",
      "description": "Interface for custom attribute value.",
      "properties": {
        "attribute_code": {
          "type": "string",
          "description": "Attribute code"
        },
        "value": {
          "type": "string",
          "description": "Attribute value"
        }
      },
      "required": [
        "attribute_code",
        "value"
      ]
    },
    "customer-data-customer-extension-interface": {
      "type": "object",
      "description": "ExtensionInterface class for @see \\Magento\\Customer\\Api\\Data\\CustomerInterface",
      "properties": {
        "is_subscribed": {
          "type": "boolean"
        },
        "amazon_id": {
          "type": "string"
        },
        "vertex_customer_code": {
          "type": "string"
        }
      }
    },
    "customer-data-customer-search-results-interface": {
      "type": "object",
      "description": "Interface for customer search results.",
      "properties": {
        "items": {
          "type": "array",
          "description": "Customers list.",
          "items": {
            "$ref": "#/definitions/customer-data-customer-interface"
          }
        },
        "search_criteria": {
          "$ref": "#/definitions/framework-search-criteria-interface"
        },
        "total_count": {
          "type": "integer",
          "description": "Total count."
        }
      },
      "required": [
        "items",
        "search_criteria",
        "total_count"
      ]
    },
    "customer-data-validation-results-interface": {
      "type": "object",
      "description": "Validation results interface.",
      "properties": {
        "valid": {
          "type": "boolean",
          "description": "If the provided data is valid."
        },
        "messages": {
          "type": "array",
          "description": "Error messages as array in case of validation failure, else return empty array.",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "valid",
        "messages"
      ]
    },
    "framework-search-search-result-interface": {
      "type": "object",
      "description": "Interface SearchResultInterface",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/framework-search-document-interface"
          }
        },
        "aggregations": {
          "$ref": "#/definitions/framework-search-aggregation-interface"
        },
        "search_criteria": {
          "$ref": "#/definitions/framework-search-search-criteria-interface"
        },
        "total_count": {
          "type": "integer",
          "description": "Total count."
        }
      },
      "required": [
        "items",
        "aggregations",
        "search_criteria",
        "total_count"
      ]
    },
    "framework-search-document-interface": {
      "type": "object",
      "description": "Interface \\Magento\\Framework\\Api\\Search\\DocumentInterface",
      "properties": {
        "id": {
          "type": "integer"
        },
        "custom_attributes": {
          "type": "array",
          "description": "Custom attributes values.",
          "items": {
            "$ref": "#/definitions/framework-attribute-interface"
          }
        }
      },
      "required": [
        "id"
      ]
    },
    "framework-search-aggregation-interface": {
      "type": "object",
      "description": "Faceted data",
      "properties": {
        "buckets": {
          "type": "array",
          "description": "All Document fields",
          "items": {
            "$ref": "#/definitions/framework-search-bucket-interface"
          }
        },
        "bucket_names": {
          "type": "array",
          "description": "Document field names",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "buckets",
        "bucket_names"
      ]
    },
    "framework-search-bucket-interface": {
      "type": "object",
      "description": "Facet Bucket",
      "properties": {
        "name": {
          "type": "string",
          "description": "Field name"
        },
        "values": {
          "type": "array",
          "description": "Field values",
          "items": {
            "$ref": "#/definitions/framework-search-aggregation-value-interface"
          }
        }
      },
      "required": [
        "name",
        "values"
      ]
    },
    "framework-search-aggregation-value-interface": {
      "type": "object",
      "description": "Interface \\Magento\\Framework\\Api\\Search\\AggregationValueInterface",
      "properties": {
        "value": {
          "type": "string",
          "description": "Aggregation"
        },
        "metrics": {
          "type": "array",
          "description": "Metrics",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "value",
        "metrics"
      ]
    },
    "framework-search-search-criteria-interface": {
      "type": "object",
      "description": "Interface SearchCriteriaInterface",
      "properties": {
        "request_name": {
          "type": "string"
        },
        "filter_groups": {
          "type": "array",
          "description": "A list of filter groups.",
          "items": {
            "$ref": "#/definitions/framework-search-filter-group"
          }
        },
        "sort_orders": {
          "type": "array",
          "description": "Sort order.",
          "items": {
            "$ref": "#/definitions/framework-sort-order"
          }
        },
        "page_size": {
          "type": "integer",
          "description": "Page size."
        },
        "current_page": {
          "type": "integer",
          "description": "Current page."
        }
      },
      "required": [
        "request_name",
        "filter_groups"
      ]
    },
    "cms-data-page-interface": {
      "type": "object",
      "description": "CMS page interface.",
      "properties": {
        "id": {
          "type": "integer",
          "description": "ID"
        },
        "identifier": {
          "type": "string",
          "description": "Identifier"
        },
        "title": {
          "type": "string",
          "description": "Title"
        },
        "page_layout": {
          "type": "string",
          "description": "Page layout"
        },
        "meta_title": {
          "type": "string",
          "description": "Meta title"
        },
        "meta_keywords": {
          "type": "string",
          "description": "Meta keywords"
        },
        "meta_description": {
          "type": "string",
          "description": "Meta description"
        },
        "content_heading": {
          "type": "string",
          "description": "Content heading"
        },
        "content": {
          "type": "string",
          "description": "Content"
        },
        "creation_time": {
          "type": "string",
          "description": "Creation time"
        },
        "update_time": {
          "type": "string",
          "description": "Update time"
        },
        "sort_order": {
          "type": "string",
          "description": "Sort order"
        },
        "layout_update_xml": {
          "type": "string",
          "description": "Layout update xml"
        },
        "custom_theme": {
          "type": "string",
          "description": "Custom theme"
        },
        "custom_root_template": {
          "type": "string",
          "description": "Custom root template"
        },
        "custom_layout_update_xml": {
          "type": "string",
          "description": "Custom layout update xml"
        },
        "custom_theme_from": {
          "type": "string",
          "description": "Custom theme from"
        },
        "custom_theme_to": {
          "type": "string",
          "description": "Custom theme to"
        },
        "active": {
          "type": "boolean",
          "description": "Active"
        }
      },
      "required": [
        "identifier"
      ]
    },
    "cms-data-page-search-results-interface": {
      "type": "object",
      "description": "Interface for cms page search results.",
      "properties": {
        "items": {
          "type": "array",
          "description": "Pages list.",
          "items": {
            "$ref": "#/definitions/cms-data-page-interface"
          }
        },
        "search_criteria": {
          "$ref": "#/definitions/framework-search-criteria-interface"
        },
        "total_count": {
          "type": "integer",
          "description": "Total count."
        }
      },
      "required": [
        "items",
        "search_criteria",
        "total_count"
      ]
    },
    "cms-data-block-interface": {
      "type": "object",
      "description": "CMS block interface.",
      "properties": {
        "id": {
          "type": "integer",
          "description": "ID"
        },
        "identifier": {
          "type": "string",
          "description": "Identifier"
        },
        "title": {
          "type": "string",
          "description": "Title"
        },
        "content": {
          "type": "string",
          "description": "Content"
        },
        "creation_time": {
          "type": "string",
          "description": "Creation time"
        },
        "update_time": {
          "type": "string",
          "description": "Update time"
        },
        "active": {
          "type": "boolean",
          "description": "Active"
        }
      },
      "required": [
        "identifier"
      ]
    },
    "cms-data-block-search-results-interface": {
      "type": "object",
      "description": "Interface for cms block search results.",
      "properties": {
        "items": {
          "type": "array",
          "description": "Blocks list.",
          "items": {
            "$ref": "#/definitions/cms-data-block-interface"
          }
        },
        "search_criteria": {
          "$ref": "#/definitions/framework-search-criteria-interface"
        },
        "total_count": {
          "type": "integer",
          "description": "Total count."
        }
      },
      "required": [
        "items",
        "search_criteria",
        "total_count"
      ]
    },
    "catalog-data-product-interface": {
      "type": "object",
      "description": "",
      "properties": {
        "id": {
          "type": "integer",
          "description": "Id"
        },
        "sku": {
          "type": "string",
          "description": "Sku"
        },
        "name": {
          "type": "string",
          "description": "Name"
        },
        "attribute_set_id": {
          "type": "integer",
          "description": "Attribute set id"
        },
        "price": {
          "type": "number",
          "description": "Price"
        },
        "status": {
          "type": "integer",
          "description": "Status"
        },
        "visibility": {
          "type": "integer",
          "description": "Visibility"
        },
        "type_id": {
          "type": "string",
          "description": "Type id"
        },
        "created_at": {
          "type": "string",
          "description": "Created date"
        },
        "updated_at": {
          "type": "string",
          "description": "Updated date"
        },
        "weight": {
          "type": "number",
          "description": "Weight"
        },
        "extension_attributes": {
          "$ref": "#/definitions/catalog-data-product-extension-interface"
        },
        "product_links": {
          "type": "array",
          "description": "Product links info",
          "items": {
            "$ref": "#/definitions/catalog-data-product-link-interface"
          }
        },
        "options": {
          "type": "array",
          "description": "List of product options",
          "items": {
            "$ref": "#/definitions/catalog-data-product-custom-option-interface"
          }
        },
        "media_gallery_entries": {
          "type": "array",
          "description": "Media gallery entries",
          "items": {
            "$ref": "#/definitions/catalog-data-product-attribute-media-gallery-entry-interface"
          }
        },
        "tier_prices": {
          "type": "array",
          "description": "List of product tier prices",
          "items": {
            "$ref": "#/definitions/catalog-data-product-tier-price-interface"
          }
        },
        "custom_attributes": {
          "type": "array",
          "description": "Custom attributes values.",
          "items": {
            "$ref": "#/definitions/framework-attribute-interface"
          }
        }
      },
      "required": [
        "sku"
      ]
    },
    "catalog-data-product-extension-interface": {
      "type": "object",
      "description": "ExtensionInterface class for @see \\Magento\\Catalog\\Api\\Data\\ProductInterface",
      "properties": {
        "website_ids": {
          "type": "array",
          "items": {
            "type": "integer"
          }
        },
        "category_links": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/catalog-data-category-link-interface"
          }
        },
        "stock_item": {
          "$ref": "#/definitions/catalog-inventory-data-stock-item-interface"
        },
        "bundle_product_options": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/bundle-data-option-interface"
          }
        },
        "downloadable_product_links": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/downloadable-data-link-interface"
          }
        },
        "downloadable_product_samples": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/downloadable-data-sample-interface"
          }
        },
        "configurable_product_options": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/configurable-product-data-option-interface"
          }
        },
        "configurable_product_links": {
          "type": "array",
          "items": {
            "type": "integer"
          }
        }
      }
    },
    "catalog-data-category-link-interface": {
      "type": "object",
      "description": "",
      "properties": {
        "position": {
          "type": "integer"
        },
        "category_id": {
          "type": "string",
          "description": "Category id"
        },
        "extension_attributes": {
          "$ref": "#/definitions/catalog-data-category-link-extension-interface"
        }
      },
      "required": [
        "category_id"
      ]
    },
    "catalog-data-category-link-extension-interface": {
      "type": "object",
      "description": "ExtensionInterface class for @see \\Magento\\Catalog\\Api\\Data\\CategoryLinkInterface"
    },
    "catalog-inventory-data-stock-item-interface": {
      "type": "object",
      "description": "Interface StockItem",
      "properties": {
        "item_id": {
          "type": "integer"
        },
        "product_id": {
          "type": "integer"
        },
        "stock_id": {
          "type": "integer",
          "description": "Stock identifier"
        },
        "qty": {
          "type": "number"
        },
        "is_in_stock": {
          "type": "boolean",
          "description": "Stock Availability"
        },
        "is_qty_decimal": {
          "type": "boolean"
        },
        "show_default_notification_message": {
          "type": "boolean"
        },
        "use_config_min_qty": {
          "type": "boolean"
        },
        "min_qty": {
          "type": "number",
          "description": "Minimal quantity available for item status in stock"
        },
        "use_config_min_sale_qty": {
          "type": "integer"
        },
        "min_sale_qty": {
          "type": "number",
          "description": "Minimum Qty Allowed in Shopping Cart or NULL when there is no limitation"
        },
        "use_config_max_sale_qty": {
          "type": "boolean"
        },
        "max_sale_qty": {
          "type": "number",
          "description": "Maximum Qty Allowed in Shopping Cart data wrapper"
        },
        "use_config_backorders": {
          "type": "boolean"
        },
        "backorders": {
          "type": "integer",
          "description": "Backorders status"
        },
        "use_config_notify_stock_qty": {
          "type": "boolean"
        },
        "notify_stock_qty": {
          "type": "number",
          "description": "Notify for Quantity Below data wrapper"
        },
        "use_config_qty_increments": {
          "type": "boolean"
        },
        "qty_increments": {
          "type": "number",
          "description": "Quantity Increments data wrapper"
        },
        "use_config_enable_qty_inc": {
          "type": "boolean"
        },
        "enable_qty_increments": {
          "type": "boolean",
          "description": "Whether Quantity Increments is enabled"
        },
        "use_config_manage_stock": {
          "type": "boolean"
        },
        "manage_stock": {
          "type": "boolean",
          "description": "Can Manage Stock"
        },
        "low_stock_date": {
          "type": "string"
        },
        "is_decimal_divided": {
          "type": "boolean"
        },
        "stock_status_changed_auto": {
          "type": "integer"
        },
        "extension_attributes": {
          "$ref": "#/definitions/catalog-inventory-data-stock-item-extension-interface"
        }
      },
      "required": [
        "qty",
        "is_in_stock",
        "is_qty_decimal",
        "show_default_notification_message",
        "use_config_min_qty",
        "min_qty",
        "use_config_min_sale_qty",
        "min_sale_qty",
        "use_config_max_sale_qty",
        "max_sale_qty",
        "use_config_backorders",
        "backorders",
        "use_config_notify_stock_qty",
        "notify_stock_qty",
        "use_config_qty_increments",
        "qty_increments",
        "use_config_enable_qty_inc",
        "enable_qty_increments",
        "use_config_manage_stock",
        "manage_stock",
        "low_stock_date",
        "is_decimal_divided",
        "stock_status_changed_auto"
      ]
    },
    "catalog-inventory-data-stock-item-extension-interface": {
      "type": "object",
      "description": "ExtensionInterface class for @see \\Magento\\CatalogInventory\\Api\\Data\\StockItemInterface"
    },
    "bundle-data-option-interface": {
      "type": "object",
      "description": "Interface OptionInterface",
      "properties": {
        "option_id": {
          "type": "integer",
          "description": "Option id"
        },
        "title": {
          "type": "string",
          "description": "Option title"
        },
        "required": {
          "type": "boolean",
          "description": "Is required option"
        },
        "type": {
          "type": "string",
          "description": "Input type"
        },
        "position": {
          "type": "integer",
          "description": "Option position"
        },
        "sku": {
          "type": "string",
          "description": "Product sku"
        },
        "product_links": {
          "type": "array",
          "description": "Product links",
          "items": {
            "$ref": "#/definitions/bundle-data-link-interface"
          }
        },
        "extension_attributes": {
          "$ref": "#/definitions/bundle-data-option-extension-interface"
        }
      }
    },
    "bundle-data-link-interface": {
      "type": "object",
      "description": "Interface LinkInterface",
      "properties": {
        "id": {
          "type": "string",
          "description": "The identifier"
        },
        "sku": {
          "type": "string",
          "description": "Linked product sku"
        },
        "option_id": {
          "type": "integer",
          "description": "Option id"
        },
        "qty": {
          "type": "number",
          "description": "Qty"
        },
        "position": {
          "type": "integer",
          "description": "Position"
        },
        "is_default": {
          "type": "boolean",
          "description": "Is default"
        },
        "price": {
          "type": "number",
          "description": "Price"
        },
        "price_type": {
          "type": "integer",
          "description": "Price type"
        },
        "can_change_quantity": {
          "type": "integer",
          "description": "Whether quantity could be changed"
        },
        "extension_attributes": {
          "$ref": "#/definitions/bundle-data-link-extension-interface"
        }
      },
      "required": [
        "is_default",
        "price",
        "price_type"
      ]
    },
    "bundle-data-link-extension-interface": {
      "type": "object",
      "description": "ExtensionInterface class for @see \\Magento\\Bundle\\Api\\Data\\LinkInterface"
    },
    "bundle-data-option-extension-interface": {
      "type": "object",
      "description": "ExtensionInterface class for @see \\Magento\\Bundle\\Api\\Data\\OptionInterface"
    },
    "downloadable-data-link-interface": {
      "type": "object",
      "description": "",
      "properties": {
        "id": {
          "type": "integer",
          "description": "Sample(or link) id"
        },
        "title": {
          "type": "string"
        },
        "sort_order": {
          "type": "integer"
        },
        "is_shareable": {
          "type": "integer",
          "description": "Shareable status"
        },
        "price": {
          "type": "number",
          "description": "Price"
        },
        "number_of_downloads": {
          "type": "integer",
          "description": "Of downloads per user"
        },
        "link_type": {
          "type": "string"
        },
        "link_file": {
          "type": "string",
          "description": "relative file path"
        },
        "link_file_content": {
          "$ref": "#/definitions/downloadable-data-file-content-interface"
        },
        "link_url": {
          "type": "string",
          "description": "Link url or null when type is 'file'"
        },
        "sample_type": {
          "type": "string"
        },
        "sample_file": {
          "type": "string",
          "description": "relative file path"
        },
        "sample_file_content": {
          "$ref": "#/definitions/downloadable-data-file-content-interface"
        },
        "sample_url": {
          "type": "string",
          "description": "file URL"
        },
        "extension_attributes": {
          "$ref": "#/definitions/downloadable-data-link-extension-interface"
        }
      },
      "required": [
        "sort_order",
        "is_shareable",
        "price",
        "link_type",
        "sample_type"
      ]
    },
    "downloadable-data-file-content-interface": {
      "type": "object",
      "description": "",
      "properties": {
        "file_data": {
          "type": "string",
          "description": "Data (base64 encoded content)"
        },
        "name": {
          "type": "string",
          "description": "File name"
        },
        "extension_attributes": {
          "$ref": "#/definitions/downloadable-data-file-content-extension-interface"
        }
      },
      "required": [
        "file_data",
        "name"
      ]
    },
    "downloadable-data-file-content-extension-interface": {
      "type": "object",
      "description": "ExtensionInterface class for @see \\Magento\\Downloadable\\Api\\Data\\File\\ContentInterface"
    },
    "downloadable-data-link-extension-interface": {
      "type": "object",
      "description": "ExtensionInterface class for @see \\Magento\\Downloadable\\Api\\Data\\LinkInterface"
    },
    "downloadable-data-sample-interface": {
      "type": "object",
      "description": "",
      "properties": {
        "id": {
          "type": "integer",
          "description": "Sample(or link) id"
        },
        "title": {
          "type": "string",
          "description": "Title"
        },
        "sort_order": {
          "type": "integer",
          "description": "Order index for sample"
        },
        "sample_type": {
          "type": "string"
        },
        "sample_file": {
          "type": "string",
          "description": "relative file path"
        },
        "sample_file_content": {
          "$ref": "#/definitions/downloadable-data-file-content-interface"
        },
        "sample_url": {
          "type": "string",
          "description": "file URL"
        },
        "extension_attributes": {
          "$ref": "#/definitions/downloadable-data-sample-extension-interface"
        }
      },
      "required": [
        "title",
        "sort_order",
        "sample_type"
      ]
    },
    "downloadable-data-sample-extension-interface": {
      "type": "object",
      "description": "ExtensionInterface class for @see \\Magento\\Downloadable\\Api\\Data\\SampleInterface"
    },
    "configurable-product-data-option-interface": {
      "type": "object",
      "description": "Interface OptionInterface",
      "properties": {
        "id": {
          "type": "integer"
        },
        "attribute_id": {
          "type": "string"
        },
        "label": {
          "type": "string"
        },
        "position": {
          "type": "integer"
        },
        "is_use_default": {
          "type": "boolean"
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/configurable-product-data-option-value-interface"
          }
        },
        "extension_attributes": {
          "$ref": "#/definitions/configurable-product-data-option-extension-interface"
        },
        "product_id": {
          "type": "integer"
        }
      }
    },
    "configurable-product-data-option-value-interface": {
      "type": "object",
      "description": "Interface OptionValueInterface",
      "properties": {
        "value_index": {
          "type": "integer"
        },
        "extension_attributes": {
          "$ref": "#/definitions/configurable-product-data-option-value-extension-interface"
        }
      },
      "required": [
        "value_index"
      ]
    },
    "configurable-product-data-option-value-extension-interface": {
      "type": "object",
      "description": "ExtensionInterface class for @see \\Magento\\ConfigurableProduct\\Api\\Data\\OptionValueInterface"
    },
    "configurable-product-data-option-extension-interface": {
      "type": "object",
      "description": "ExtensionInterface class for @see \\Magento\\ConfigurableProduct\\Api\\Data\\OptionInterface"
    },
    "catalog-data-product-link-interface": {
      "type": "object",
      "description": "",
      "properties": {
        "sku": {
          "type": "string",
          "description": "SKU"
        },
        "link_type": {
          "type": "string",
          "description": "Link type"
        },
        "linked_product_sku": {
          "type": "string",
          "description": "Linked product sku"
        },
        "linked_product_type": {
          "type": "string",
          "description": "Linked product type (simple, virtual, etc)"
        },
        "position": {
          "type": "integer",
          "description": "Linked item position"
        },
        "extension_attributes": {
          "$ref": "#/definitions/catalog-data-product-link-extension-interface"
        }
      },
      "required": [
        "sku",
        "link_type",
        "linked_product_sku",
        "linked_product_type",
        "position"
      ]
    },
    "catalog-data-product-link-extension-interface": {
      "type": "object",
      "description": "ExtensionInterface class for @see \\Magento\\Catalog\\Api\\Data\\ProductLinkInterface",
      "properties": {
        "qty": {
          "type": "number"
        }
      }
    },
    "catalog-data-product-custom-option-interface": {
      "type": "object",
      "description": "",
      "properties": {
        "product_sku": {
          "type": "string",
          "description": "Product SKU"
        },
        "option_id": {
          "type": "integer",
          "description": "Option id"
        },
        "title": {
          "type": "string",
          "description": "Option title"
        },
        "type": {
          "type": "string",
          "description": "Option type"
        },
        "sort_order": {
          "type": "integer",
          "description": "Sort order"
        },
        "is_require": {
          "type": "boolean",
          "description": "Is require"
        },
        "price": {
          "type": "number",
          "description": "Price"
        },
        "price_type": {
          "type": "string",
          "description": "Price type"
        },
        "sku": {
          "type": "string",
          "description": "Sku"
        },
        "file_extension": {
          "type": "string"
        },
        "max_characters": {
          "type": "integer"
        },
        "image_size_x": {
          "type": "integer"
        },
        "image_size_y": {
          "type": "integer"
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/catalog-data-product-custom-option-values-interface"
          }
        },
        "extension_attributes": {
          "$ref": "#/definitions/catalog-data-product-custom-option-extension-interface"
        }
      },
      "required": [
        "product_sku",
        "title",
        "type",
        "sort_order",
        "is_require"
      ]
    },
    "catalog-data-product-custom-option-values-interface": {
      "type": "object",
      "description": "",
      "properties": {
        "title": {
          "type": "string",
          "description": "Option title"
        },
        "sort_order": {
          "type": "integer",
          "description": "Sort order"
        },
        "price": {
          "type": "number",
          "description": "Price"
        },
        "price_type": {
          "type": "string",
          "description": "Price type"
        },
        "sku": {
          "type": "string",
          "description": "Sku"
        },
        "option_type_id": {
          "type": "integer",
          "description": "Option type id"
        }
      },
      "required": [
        "title",
        "sort_order",
        "price",
        "price_type"
      ]
    },
    "catalog-data-product-custom-option-extension-interface": {
      "type": "object",
      "description": "ExtensionInterface class for @see \\Magento\\Catalog\\Api\\Data\\ProductCustomOptionInterface",
      "properties": {
        "vertex_flex_field": {
          "type": "string"
        }
      }
    },
    "catalog-data-product-attribute-media-gallery-entry-interface": {
      "type": "object",
      "description": "",
      "properties": {
        "id": {
          "type": "integer",
          "description": "Gallery entry ID"
        },
        "media_type": {
          "type": "string",
          "description": "Media type"
        },
        "label": {
          "type": "string",
          "description": "Gallery entry alternative text"
        },
        "position": {
          "type": "integer",
          "description": "Gallery entry position (sort order)"
        },
        "disabled": {
          "type": "boolean",
          "description": "If gallery entry is hidden from product page"
        },
        "types": {
          "type": "array",
          "description": "Gallery entry image types (thumbnail, image, small_image etc)",
          "items": {
            "type": "string"
          }
        },
        "file": {
          "type": "string",
          "description": "File path"
        },
        "content": {
          "$ref": "#/definitions/framework-data-image-content-interface"
        },
        "extension_attributes": {
          "$ref": "#/definitions/catalog-data-product-attribute-media-gallery-entry-extension-interface"
        }
      },
      "required": [
        "media_type",
        "label",
        "position",
        "disabled",
        "types"
      ]
    },
    "framework-data-image-content-interface": {
      "type": "object",
      "description": "Image Content data interface",
      "properties": {
        "base64_encoded_data": {
          "type": "string",
          "description": "Media data (base64 encoded content)"
        },
        "type": {
          "type": "string",
          "description": "MIME type"
        },
        "name": {
          "type": "string",
          "description": "Image name"
        }
      },
      "required": [
        "base64_encoded_data",
        "type",
        "name"
      ]
    },
    "catalog-data-product-attribute-media-gallery-entry-extension-interface": {
      "type": "object",
      "description": "ExtensionInterface class for @see \\Magento\\Catalog\\Api\\Data\\ProductAttributeMediaGalleryEntryInterface",
      "properties": {
        "video_content": {
          "$ref": "#/definitions/framework-data-video-content-interface"
        }
      }
    },
    "framework-data-video-content-interface": {
      "type": "object",
      "description": "Video Content data interface",
      "properties": {
        "media_type": {
          "type": "string",
          "description": "MIME type"
        },
        "video_provider": {
          "type": "string",
          "description": "Provider"
        },
        "video_url": {
          "type": "string",
          "description": "Video URL"
        },
        "video_title": {
          "type": "string",
          "description": "Title"
        },
        "video_description": {
          "type": "string",
          "description": "Video Description"
        },
        "video_metadata": {
          "type": "string",
          "description": "Metadata"
        }
      },
      "required": [
        "media_type",
        "video_provider",
        "video_url",
        "video_title",
        "video_description",
        "video_metadata"
      ]
    },
    "catalog-data-product-tier-price-interface": {
      "type": "object",
      "description": "",
      "properties": {
        "customer_group_id": {
          "type": "integer",
          "description": "Customer group id"
        },
        "qty": {
          "type": "number",
          "description": "Tier qty"
        },
        "value": {
          "type": "number",
          "description": "Price value"
        },
        "extension_attributes": {
          "$ref": "#/definitions/catalog-data-product-tier-price-extension-interface"
        }
      },
      "required": [
        "customer_group_id",
        "qty",
        "value"
      ]
    },
    "catalog-data-product-tier-price-extension-interface": {
      "type": "object",
      "description": "ExtensionInterface class for @see \\Magento\\Catalog\\Api\\Data\\ProductTierPriceInterface",
      "properties": {
        "percentage_value": {
          "type": "number"
        },
        "website_id": {
          "type": "integer"
        }
      }
    },
    "catalog-data-product-search-results-interface": {
      "type": "object",
      "description": "",
      "properties": {
        "items": {
          "type": "array",
          "description": "Attributes list.",
          "items": {
            "$ref": "#/definitions/catalog-data-product-interface"
          }
        },
        "search_criteria": {
          "$ref": "#/definitions/framework-search-criteria-interface"
        },
        "total_count": {
          "type": "integer",
          "description": "Total count."
        }
      },
      "required": [
        "items",
        "search_criteria",
        "total_count"
      ]
    },
    "catalog-data-product-attribute-type-interface": {
      "type": "object",
      "description": "",
      "properties": {
        "value": {
          "type": "string",
          "description": "Value"
        },
        "label": {
          "type": "string",
          "description": "Type label"
        },
        "extension_attributes": {
          "$ref": "#/definitions/catalog-data-product-attribute-type-extension-interface"
        }
      },
      "required": [
        "value",
        "label"
      ]
    },
    "catalog-data-product-attribute-type-extension-interface": {
      "type": "object",
      "description": "ExtensionInterface class for @see \\Magento\\Catalog\\Api\\Data\\ProductAttributeTypeInterface"
    },
    "catalog-data-product-attribute-interface": {
      "type": "object",
      "description": "",
      "properties": {
        "extension_attributes": {
          "$ref": "#/definitions/eav-data-attribute-extension-interface"
        },
        "is_wysiwyg_enabled": {
          "type": "boolean",
          "description": "WYSIWYG flag"
        },
        "is_html_allowed_on_front": {
          "type": "boolean",
          "description": "The HTML tags are allowed on the frontend"
        },
        "used_for_sort_by": {
          "type": "boolean",
          "description": "It is used for sorting in product listing"
        },
        "is_filterable": {
          "type": "boolean",
          "description": "It used in layered navigation"
        },
        "is_filterable_in_search": {
          "type": "boolean",
          "description": "It is used in search results layered navigation"
        },
        "is_used_in_grid": {
          "type": "boolean",
          "description": "It is used in catalog product grid"
        },
        "is_visible_in_grid": {
          "type": "boolean",
          "description": "It is visible in catalog product grid"
        },
        "is_filterable_in_grid": {
          "type": "boolean",
          "description": "It is filterable in catalog product grid"
        },
        "position": {
          "type": "integer",
          "description": "Position"
        },
        "apply_to": {
          "type": "array",
          "description": "Apply to value for the element",
          "items": {
            "type": "string"
          }
        },
        "is_searchable": {
          "type": "string",
          "description": "The attribute can be used in Quick Search"
        },
        "is_visible_in_advanced_search": {
          "type": "string",
          "description": "The attribute can be used in Advanced Search"
        },
        "is_comparable": {
          "type": "string",
          "description": "The attribute can be compared on the frontend"
        },
        "is_used_for_promo_rules": {
          "type": "string",
          "description": "The attribute can be used for promo rules"
        },
        "is_visible_on_front": {
          "type": "string",
          "description": "The attribute is visible on the frontend"
        },
        "used_in_product_listing": {
          "type": "string",
          "description": "The attribute can be used in product listing"
        },
        "is_visible": {
          "type": "boolean",
          "description": "Attribute is visible on frontend."
        },
        "scope": {
          "type": "string",
          "description": "Attribute scope"
        },
        "attribute_id": {
          "type": "integer",
          "description": "Id of the attribute."
        },
        "attribute_code": {
          "type": "string",
          "description": "Code of the attribute."
        },
        "frontend_input": {
          "type": "string",
          "description": "HTML for input element."
        },
        "entity_type_id": {
          "type": "string",
          "description": "Entity type id"
        },
        "is_required": {
          "type": "boolean",
          "description": "Attribute is required."
        },
        "options": {
          "type": "array",
          "description": "Options of the attribute (key => value pairs for select)",
          "items": {
            "$ref": "#/definitions/eav-data-attribute-option-interface"
          }
        },
        "is_user_defined": {
          "type": "boolean",
          "description": "Current attribute has been defined by a user."
        },
        "default_frontend_label": {
          "type": "string",
          "description": "Frontend label for default store"
        },
        "frontend_labels": {
          "type": "array",
          "description": "Frontend label for each store",
          "items": {
            "$ref": "#/definitions/eav-data-attribute-frontend-label-interface"
          }
        },
        "note": {
          "type": "string",
          "description": "The note attribute for the element."
        },
        "backend_type": {
          "type": "string",
          "description": "Backend type."
        },
        "backend_model": {
          "type": "string",
          "description": "Backend model"
        },
        "source_model": {
          "type": "string",
          "description": "Source model"
        },
        "default_value": {
          "type": "string",
          "description": "Default value for the element."
        },
        "is_unique": {
          "type": "string",
          "description": "This is a unique attribute"
        },
        "frontend_class": {
          "type": "string",
          "description": "Frontend class of attribute"
        },
        "validation_rules": {
          "type": "array",
          "description": "Validation rules.",
          "items": {
            "$ref": "#/definitions/eav-data-attribute-validation-rule-interface"
          }
        },
        "custom_attributes": {
          "type": "array",
          "description": "Custom attributes values.",
          "items": {
            "$ref": "#/definitions/framework-attribute-interface"
          }
        }
      },
      "required": [
        "attribute_code",
        "frontend_input",
        "entity_type_id",
        "is_required",
        "frontend_labels"
      ]
    },
    "eav-data-attribute-extension-interface": {
      "type": "object",
      "description": "ExtensionInterface class for @see \\Magento\\Eav\\Api\\Data\\AttributeInterface"
    },
    "eav-data-attribute-option-interface": {
      "type": "object",
      "description": "Created from:",
      "properties": {
        "label": {
          "type": "string",
          "description": "Option label"
        },
        "value": {
          "type": "string",
          "description": "Option value"
        },
        "sort_order": {
          "type": "integer",
          "description": "Option order"
        },
        "is_default": {
          "type": "boolean",
          "description": "Default"
        },
        "store_labels": {
          "type": "array",
          "description": "Option label for store scopes",
          "items": {
            "$ref": "#/definitions/eav-data-attribute-option-label-interface"
          }
        }
      },
      "required": [
        "label",
        "value"
      ]
    },
    "eav-data-attribute-option-label-interface": {
      "type": "object",
      "description": "Interface AttributeOptionLabelInterface",
      "properties": {
        "store_id": {
          "type": "integer",
          "description": "Store id"
        },
        "label": {
          "type": "string",
          "description": "Option label"
        }
      }
    },
    "eav-data-attribute-frontend-label-interface": {
      "type": "object",
      "description": "Interface AttributeFrontendLabelInterface",
      "properties": {
        "store_id": {
          "type": "integer",
          "description": "Store id"
        },
        "label": {
          "type": "string",
          "description": "Option label"
        }
      }
    },
    "eav-data-attribute-validation-rule-interface": {
      "type": "object",
      "description": "Interface AttributeValidationRuleInterface",
      "properties": {
        "key": {
          "type": "string",
          "description": "Object key"
        },
        "value": {
          "type": "string",
          "description": "Object value"
        }
      },
      "required": [
        "key",
        "value"
      ]
    },
    "catalog-data-product-attribute-search-results-interface": {
      "type": "object",
      "description": "",
      "properties": {
        "items": {
          "type": "array",
          "description": "Attributes list.",
          "items": {
            "$ref": "#/definitions/catalog-data-product-attribute-interface"
          }
        },
        "search_criteria": {
          "$ref": "#/definitions/framework-search-criteria-interface"
        },
        "total_count": {
          "type": "integer",
          "description": "Total count."
        }
      },
      "required": [
        "items",
        "search_criteria",
        "total_count"
      ]
    },
    "catalog-data-category-attribute-interface": {
      "type": "object",
      "description": "",
      "properties": {
        "is_wysiwyg_enabled": {
          "type": "boolean",
          "description": "WYSIWYG flag"
        },
        "is_html_allowed_on_front": {
          "type": "boolean",
          "description": "The HTML tags are allowed on the frontend"
        },
        "used_for_sort_by": {
          "type": "boolean",
          "description": "It is used for sorting in product listing"
        },
        "is_filterable": {
          "type": "boolean",
          "description": "It used in layered navigation"
        },
        "is_filterable_in_search": {
          "type": "boolean",
          "description": "It is used in search results layered navigation"
        },
        "is_used_in_grid": {
          "type": "boolean",
          "description": "It is used in catalog product grid"
        },
        "is_visible_in_grid": {
          "type": "boolean",
          "description": "It is visible in catalog product grid"
        },
        "is_filterable_in_grid": {
          "type": "boolean",
          "description": "It is filterable in catalog product grid"
        },
        "position": {
          "type": "integer",
          "description": "Position"
        },
        "apply_to": {
          "type": "array",
          "description": "Apply to value for the element",
          "items": {
            "type": "string"
          }
        },
        "is_searchable": {
          "type": "string",
          "description": "The attribute can be used in Quick Search"
        },
        "is_visible_in_advanced_search": {
          "type": "string",
          "description": "The attribute can be used in Advanced Search"
        },
        "is_comparable": {
          "type": "string",
          "description": "The attribute can be compared on the frontend"
        },
        "is_used_for_promo_rules": {
          "type": "string",
          "description": "The attribute can be used for promo rules"
        },
        "is_visible_on_front": {
          "type": "string",
          "description": "The attribute is visible on the frontend"
        },
        "used_in_product_listing": {
          "type": "string",
          "description": "The attribute can be used in product listing"
        },
        "is_visible": {
          "type": "boolean",
          "description": "Attribute is visible on frontend."
        },
        "scope": {
          "type": "string",
          "description": "Attribute scope"
        },
        "extension_attributes": {
          "$ref": "#/definitions/catalog-data-eav-attribute-extension-interface"
        },
        "attribute_id": {
          "type": "integer",
          "description": "Id of the attribute."
        },
        "attribute_code": {
          "type": "string",
          "description": "Code of the attribute."
        },
        "frontend_input": {
          "type": "string",
          "description": "HTML for input element."
        },
        "entity_type_id": {
          "type": "string",
          "description": "Entity type id"
        },
        "is_required": {
          "type": "boolean",
          "description": "Attribute is required."
        },
        "options": {
          "type": "array",
          "description": "Options of the attribute (key => value pairs for select)",
          "items": {
            "$ref": "#/definitions/eav-data-attribute-option-interface"
          }
        },
        "is_user_defined": {
          "type": "boolean",
          "description": "Current attribute has been defined by a user."
        },
        "default_frontend_label": {
          "type": "string",
          "description": "Frontend label for default store"
        },
        "frontend_labels": {
          "type": "array",
          "description": "Frontend label for each store",
          "items": {
            "$ref": "#/definitions/eav-data-attribute-frontend-label-interface"
          }
        },
        "note": {
          "type": "string",
          "description": "The note attribute for the element."
        },
        "backend_type": {
          "type": "string",
          "description": "Backend type."
        },
        "backend_model": {
          "type": "string",
          "description": "Backend model"
        },
        "source_model": {
          "type": "string",
          "description": "Source model"
        },
        "default_value": {
          "type": "string",
          "description": "Default value for the element."
        },
        "is_unique": {
          "type": "string",
          "description": "This is a unique attribute"
        },
        "frontend_class": {
          "type": "string",
          "description": "Frontend class of attribute"
        },
        "validation_rules": {
          "type": "array",
          "description": "Validation rules.",
          "items": {
            "$ref": "#/definitions/eav-data-attribute-validation-rule-interface"
          }
        },
        "custom_attributes": {
          "type": "array",
          "description": "Custom attributes values.",
          "items": {
            "$ref": "#/definitions/framework-attribute-interface"
          }
        }
      },
      "required": [
        "attribute_code",
        "frontend_input",
        "entity_type_id",
        "is_required",
        "frontend_labels"
      ]
    },
    "catalog-data-eav-attribute-extension-interface": {
      "type": "object",
      "description": "ExtensionInterface class for @see \\Magento\\Catalog\\Api\\Data\\EavAttributeInterface"
    },
    "catalog-data-category-attribute-search-results-interface": {
      "type": "object",
      "description": "",
      "properties": {
        "items": {
          "type": "array",
          "description": "Attributes list.",
          "items": {
            "$ref": "#/definitions/catalog-data-category-attribute-interface"
          }
        },
        "search_criteria": {
          "$ref": "#/definitions/framework-search-criteria-interface"
        },
        "total_count": {
          "type": "integer",
          "description": "Total count."
        }
      },
      "required": [
        "items",
        "search_criteria",
        "total_count"
      ]
    },
    "catalog-data-product-type-interface": {
      "type": "object",
      "description": "Product type details",
      "properties": {
        "name": {
          "type": "string",
          "description": "Product type code"
        },
        "label": {
          "type": "string",
          "description": "Product type label"
        },
        "extension_attributes": {
          "$ref": "#/definitions/catalog-data-product-type-extension-interface"
        }
      },
      "required": [
        "name",
        "label"
      ]
    },
    "catalog-data-product-type-extension-interface": {
      "type": "object",
      "description": "ExtensionInterface class for @see \\Magento\\Catalog\\Api\\Data\\ProductTypeInterface"
    },
    "eav-data-attribute-group-search-results-interface": {
      "type": "object",
      "description": "Interface AttributeGroupSearchResultsInterface",
      "properties": {
        "items": {
          "type": "array",
          "description": "Attribute sets list.",
          "items": {
            "$ref": "#/definitions/eav-data-attribute-group-interface"
          }
        },
        "search_criteria": {
          "$ref": "#/definitions/framework-search-criteria-interface"
        },
        "total_count": {
          "type": "integer",
          "description": "Total count."
        }
      },
      "required": [
        "items",
        "search_criteria",
        "total_count"
      ]
    },
    "eav-data-attribute-group-interface": {
      "type": "object",
      "description": "Interface AttributeGroupInterface",
      "properties": {
        "attribute_group_id": {
          "type": "string",
          "description": "Id"
        },
        "attribute_group_name": {
          "type": "string",
          "description": "Name"
        },
        "attribute_set_id": {
          "type": "integer",
          "description": "Attribute set id"
        },
        "extension_attributes": {
          "$ref": "#/definitions/eav-data-attribute-group-extension-interface"
        }
      }
    },
    "eav-data-attribute-group-extension-interface": {
      "type": "object",
      "description": "ExtensionInterface class for @see \\Magento\\Eav\\Api\\Data\\AttributeGroupInterface",
      "properties": {
        "attribute_group_code": {
          "type": "string"
        },
        "sort_order": {
          "type": "string"
        }
      }
    },
    "catalog-data-tier-price-interface": {
      "type": "object",
      "description": "Tier price interface.",
      "properties": {
        "price": {
          "type": "number",
          "description": "Tier price."
        },
        "price_type": {
          "type": "string",
          "description": "Tier price type."
        },
        "website_id": {
          "type": "integer",
          "description": "Website id."
        },
        "sku": {
          "type": "string",
          "description": "SKU."
        },
        "customer_group": {
          "type": "string",
          "description": "Customer group."
        },
        "quantity": {
          "type": "number",
          "description": "Quantity."
        },
        "extension_attributes": {
          "$ref": "#/definitions/catalog-data-tier-price-extension-interface"
        }
      },
      "required": [
        "price",
        "price_type",
        "website_id",
        "sku",
        "customer_group",
        "quantity"
      ]
    },
    "catalog-data-tier-price-extension-interface": {
      "type": "object",
      "description": "ExtensionInterface class for @see \\Magento\\Catalog\\Api\\Data\\TierPriceInterface"
    },
    "catalog-data-price-update-result-interface": {
      "type": "object",
      "description": "Interface returned in case of incorrect price passed to efficient price API.",
      "properties": {
        "message": {
          "type": "string",
          "description": "Error message, that contains description of error occurred during price update."
        },
        "parameters": {
          "type": "array",
          "description": "Parameters, that could be displayed in error message placeholders.",
          "items": {
            "type": "string"
          }
        },
        "extension_attributes": {
          "$ref": "#/definitions/catalog-data-price-update-result-extension-interface"
        }
      },
      "required": [
        "message",
        "parameters"
      ]
    },
    "catalog-data-price-update-result-extension-interface": {
      "type": "object",
      "description": "ExtensionInterface class for @see \\Magento\\Catalog\\Api\\Data\\PriceUpdateResultInterface"
    },
    "catalog-data-base-price-interface": {
      "type": "object",
      "description": "Price interface.",
      "properties": {
        "price": {
          "type": "number",
          "description": "Price."
        },
        "store_id": {
          "type": "integer",
          "description": "Store id."
        },
        "sku": {
          "type": "string",
          "description": "SKU."
        },
        "extension_attributes": {
          "$ref": "#/definitions/catalog-data-base-price-extension-interface"
        }
      },
      "required": [
        "price",
        "store_id",
        "sku"
      ]
    },
    "catalog-data-base-price-extension-interface": {
      "type": "object",
      "description": "ExtensionInterface class for @see \\Magento\\Catalog\\Api\\Data\\BasePriceInterface"
    },
    "catalog-data-cost-interface": {
      "type": "object",
      "description": "Cost interface.",
      "properties": {
        "cost": {
          "type": "number",
          "description": "Cost value."
        },
        "store_id": {
          "type": "integer",
          "description": "Store id."
        },
        "sku": {
          "type": "string",
          "description": "SKU."
        },
        "extension_attributes": {
          "$ref": "#/definitions/catalog-data-cost-extension-interface"
        }
      },
      "required": [
        "cost",
        "store_id",
        "sku"
      ]
    },
    "catalog-data-cost-extension-interface": {
      "type": "object",
      "description": "ExtensionInterface class for @see \\Magento\\Catalog\\Api\\Data\\CostInterface"
    },
    "catalog-data-special-price-interface": {
      "type": "object",
      "description": "Product Special Price Interface is used to encapsulate data that can be processed by efficient price API.",
      "properties": {
        "price": {
          "type": "number",
          "description": "Product special price value."
        },
        "store_id": {
          "type": "integer",
          "description": "ID of store, that contains special price value."
        },
        "sku": {
          "type": "string",
          "description": "SKU of product, that contains special price value."
        },
        "price_from": {
          "type": "string",
          "description": "Start date for special price in Y-m-d H:i:s format."
        },
        "price_to": {
          "type": "string",
          "description": "End date for special price in Y-m-d H:i:s format."
        },
        "extension_attributes": {
          "$ref": "#/definitions/catalog-data-special-price-extension-interface"
        }
      },
      "required": [
        "price",
        "store_id",
        "sku",
        "price_from",
        "price_to"
      ]
    },
    "catalog-data-special-price-extension-interface": {
      "type": "object",
      "description": "ExtensionInterface class for @see \\Magento\\Catalog\\Api\\Data\\SpecialPriceInterface"
    },
    "catalog-data-category-interface": {
      "type": "object",
      "description": "Category data interface.",
      "properties": {
        "id": {
          "type": "integer",
          "description": "Category id."
        },
        "parent_id": {
          "type": "integer",
          "description": "Parent category ID"
        },
        "name": {
          "type": "string",
          "description": "Category name"
        },
        "is_active": {
          "type": "boolean",
          "description": "Whether category is active"
        },
        "position": {
          "type": "integer",
          "description": "Category position"
        },
        "level": {
          "type": "integer",
          "description": "Category level"
        },
        "children": {
          "type": "string",
          "description": "Children ids comma separated."
        },
        "created_at": {
          "type": "string",
          "description": "Category creation date and time."
        },
        "updated_at": {
          "type": "string",
          "description": "Category last update date and time."
        },
        "path": {
          "type": "string",
          "description": "Category full path."
        },
        "available_sort_by": {
          "type": "array",
          "description": "Available sort by for category.",
          "items": {
            "type": "string"
          }
        },
        "include_in_menu": {
          "type": "boolean",
          "description": "Category is included in menu."
        },
        "extension_attributes": {
          "$ref": "#/definitions/catalog-data-category-extension-interface"
        },
        "custom_attributes": {
          "type": "array",
          "description": "Custom attributes values.",
          "items": {
            "$ref": "#/definitions/framework-attribute-interface"
          }
        }
      }
    },
    "catalog-data-category-extension-interface": {
      "type": "object",
      "description": "ExtensionInterface class for @see \\Magento\\Catalog\\Api\\Data\\CategoryInterface"
    },
    "catalog-data-category-tree-interface": {
      "type": "object",
      "description": "",
      "properties": {
        "id": {
          "type": "integer"
        },
        "parent_id": {
          "type": "integer",
          "description": "Parent category ID"
        },
        "name": {
          "type": "string",
          "description": "Category name"
        },
        "is_active": {
          "type": "boolean",
          "description": "Whether category is active"
        },
        "position": {
          "type": "integer",
          "description": "Category position"
        },
        "level": {
          "type": "integer",
          "description": "Category level"
        },
        "product_count": {
          "type": "integer",
          "description": "Product count"
        },
        "children_data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/catalog-data-category-tree-interface"
          }
        }
      },
      "required": [
        "parent_id",
        "name",
        "is_active",
        "position",
        "level",
        "product_count",
        "children_data"
      ]
    },
    "catalog-data-category-search-results-interface": {
      "type": "object",
      "description": "",
      "properties": {
        "items": {
          "type": "array",
          "description": "Categories",
          "items": {
            "$ref": "#/definitions/catalog-data-category-interface"
          }
        },
        "search_criteria": {
          "$ref": "#/definitions/framework-search-criteria-interface"
        },
        "total_count": {
          "type": "integer",
          "description": "Total count."
        }
      },
      "required": [
        "items",
        "search_criteria",
        "total_count"
      ]
    },
    "catalog-data-product-custom-option-type-interface": {
      "type": "object",
      "description": "",
      "properties": {
        "label": {
          "type": "string",
          "description": "Option type label"
        },
        "code": {
          "type": "string",
          "description": "Option type code"
        },
        "group": {
          "type": "string",
          "description": "Option type group"
        },
        "extension_attributes": {
          "$ref": "#/definitions/catalog-data-product-custom-option-type-extension-interface"
        }
      },
      "required": [
        "label",
        "code",
        "group"
      ]
    },
    "catalog-data-product-custom-option-type-extension-interface": {
      "type": "object",
      "description": "ExtensionInterface class for @see \\Magento\\Catalog\\Api\\Data\\ProductCustomOptionTypeInterface"
    },
    "catalog-data-product-link-type-interface": {
      "type": "object",
      "description": "",
      "properties": {
        "code": {
          "type": "integer",
          "description": "Link type code"
        },
        "name": {
          "type": "string",
          "description": "Link type name"
        },
        "extension_attributes": {
          "$ref": "#/definitions/catalog-data-product-link-type-extension-interface"
        }
      },
      "required": [
        "code",
        "name"
      ]
    },
    "catalog-data-product-link-type-extension-interface": {
      "type": "object",
      "description": "ExtensionInterface class for @see \\Magento\\Catalog\\Api\\Data\\ProductLinkTypeInterface"
    },
    "catalog-data-product-link-attribute-interface": {
      "type": "object",
      "description": "",
      "properties": {
        "code": {
          "type": "string",
          "description": "Attribute code"
        },
        "type": {
          "type": "string",
          "description": "Attribute type"
        },
        "extension_attributes": {
          "$ref": "#/definitions/catalog-data-product-link-attribute-extension-interface"
        }
      },
      "required": [
        "code",
        "type"
      ]
    },
    "catalog-data-product-link-attribute-extension-interface": {
      "type": "object",
      "description": "ExtensionInterface class for @see \\Magento\\Catalog\\Api\\Data\\ProductLinkAttributeInterface"
    },
    "catalog-data-category-product-link-interface": {
      "type": "object",
      "description": "",
      "properties": {
        "sku": {
          "type": "string"
        },
        "position": {
          "type": "integer"
        },
        "category_id": {
          "type": "string",
          "description": "Category id"
        },
        "extension_attributes": {
          "$ref": "#/definitions/catalog-data-category-product-link-extension-interface"
        }
      },
      "required": [
        "category_id"
      ]
    },
    "catalog-data-category-product-link-extension-interface": {
      "type": "object",
      "description": "ExtensionInterface class for @see \\Magento\\Catalog\\Api\\Data\\CategoryProductLinkInterface"
    },
    "catalog-data-product-website-link-interface": {
      "type": "object",
      "description": "",
      "properties": {
        "sku": {
          "type": "string"
        },
        "website_id": {
          "type": "integer",
          "description": "Website ids"
        }
      },
      "required": [
        "sku",
        "website_id"
      ]
    },
    "catalog-data-product-render-search-results-interface": {
      "type": "object",
      "description": "Dto that holds render information about products",
      "properties": {
        "items": {
          "type": "array",
          "description": "List of products rendered information",
          "items": {
            "$ref": "#/definitions/catalog-data-product-render-interface"
          }
        }
      },
      "required": [
        "items"
      ]
    },
    "catalog-data-product-render-interface": {
      "type": "object",
      "description": "Represents Data Object which holds enough information to render product This information is put into part as Add To Cart or Add to Compare Data or Price Data",
      "properties": {
        "add_to_cart_button": {
          "$ref": "#/definitions/catalog-data-product-render-button-interface"
        },
        "add_to_compare_button": {
          "$ref": "#/definitions/catalog-data-product-render-button-interface"
        },
        "price_info": {
          "$ref": "#/definitions/catalog-data-product-render-price-info-interface"
        },
        "images": {
          "type": "array",
          "description": "Enough information, that needed to render image on front",
          "items": {
            "$ref": "#/definitions/catalog-data-product-render-image-interface"
          }
        },
        "url": {
          "type": "string",
          "description": "Product url"
        },
        "id": {
          "type": "integer",
          "description": "Product identifier"
        },
        "name": {
          "type": "string",
          "description": "Product name"
        },
        "type": {
          "type": "string",
          "description": "Product type. Such as bundle, grouped, simple, etc..."
        },
        "is_salable": {
          "type": "string",
          "description": "Information about product saleability (In Stock)"
        },
        "store_id": {
          "type": "integer",
          "description": "Information about current store id or requested store id"
        },
        "currency_code": {
          "type": "string",
          "description": "Current or desired currency code to product"
        },
        "extension_attributes": {
          "$ref": "#/definitions/catalog-data-product-render-extension-interface"
        }
      },
      "required": [
        "add_to_cart_button",
        "add_to_compare_button",
        "price_info",
        "images",
        "url",
        "id",
        "name",
        "type",
        "is_salable",
        "store_id",
        "currency_code",
        "extension_attributes"
      ]
    },
    "catalog-data-product-render-button-interface": {
      "type": "object",
      "description": "Button interface. This interface represents all manner of product buttons: add to cart, add to compare, etc... The buttons describes by this interface should have interaction with backend",
      "properties": {
        "post_data": {
          "type": "string",
          "description": "Post data"
        },
        "url": {
          "type": "string",
          "description": "Url, needed to add product to cart"
        },
        "required_options": {
          "type": "boolean",
          "description": "Flag whether a product has options or not"
        },
        "extension_attributes": {
          "$ref": "#/definitions/catalog-data-product-render-button-extension-interface"
        }
      },
      "required": [
        "post_data",
        "url",
        "required_options"
      ]
    },
    "catalog-data-product-render-button-extension-interface": {
      "type": "object",
      "description": "ExtensionInterface class for @see \\Magento\\Catalog\\Api\\Data\\ProductRender\\ButtonInterface"
    },
    "catalog-data-product-render-price-info-interface": {
      "type": "object",
      "description": "Price interface.",
      "properties": {
        "final_price": {
          "type": "number",
          "description": "Final price"
        },
        "max_price": {
          "type": "number",
          "description": "Max price of a product"
        },
        "max_regular_price": {
          "type": "number",
          "description": "Max regular price"
        },
        "minimal_regular_price": {
          "type": "number",
          "description": "Minimal regular price"
        },
        "special_price": {
          "type": "number",
          "description": "Special price"
        },
        "minimal_price": {
          "type": "number",
          "description": "Minimal price"
        },
        "regular_price": {
          "type": "number",
          "description": "Regular price"
        },
        "formatted_prices": {
          "$ref": "#/definitions/catalog-data-product-render-formatted-price-info-interface"
        },
        "extension_attributes": {
          "$ref": "#/definitions/catalog-data-product-render-price-info-extension-interface"
        }
      },
      "required": [
        "final_price",
        "max_price",
        "max_regular_price",
        "minimal_regular_price",
        "special_price",
        "minimal_price",
        "regular_price",
        "formatted_prices"
      ]
    },
    "catalog-data-product-render-formatted-price-info-interface": {
      "type": "object",
      "description": "Formatted Price interface. Aggregate formatted html with price representations. E.g.: <span class=\"price\">$9.00</span> Consider currency, rounding and html",
      "properties": {
        "final_price": {
          "type": "string",
          "description": "Html with final price"
        },
        "max_price": {
          "type": "string",
          "description": "Max price of a product"
        },
        "minimal_price": {
          "type": "string",
          "description": "The minimal price of the product or variation"
        },
        "max_regular_price": {
          "type": "string",
          "description": "Max regular price"
        },
        "minimal_regular_price": {
          "type": "string",
          "description": "Minimal regular price"
        },
        "special_price": {
          "type": "string",
          "description": "Special price"
        },
        "regular_price": {
          "type": "string",
          "description": "Price - is price of product without discounts and special price with taxes and fixed product tax"
        },
        "extension_attributes": {
          "$ref": "#/definitions/catalog-data-product-render-formatted-price-info-extension-interface"
        }
      },
      "required": [
        "final_price",
        "max_price",
        "minimal_price",
        "max_regular_price",
        "minimal_regular_price",
        "special_price",
        "regular_price"
      ]
    },
    "catalog-data-product-render-formatted-price-info-extension-interface": {
      "type": "object",
      "description": "ExtensionInterface class for @see \\Magento\\Catalog\\Api\\Data\\ProductRender\\FormattedPriceInfoInterface"
    },
    "catalog-data-product-render-price-info-extension-interface": {
      "type": "object",
      "description": "ExtensionInterface class for @see \\Magento\\Catalog\\Api\\Data\\ProductRender\\PriceInfoInterface",
      "properties": {
        "msrp": {
          "$ref": "#/definitions/msrp-data-product-render-msrp-price-info-interface"
        },
        "tax_adjustments": {
          "$ref": "#/definitions/catalog-data-product-render-price-info-interface"
        },
        "weee_attributes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/weee-data-product-render-weee-adjustment-attribute-interface"
          }
        },
        "weee_adjustment": {
          "type": "string"
        }
      }
    },
    "msrp-data-product-render-msrp-price-info-interface": {
      "type": "object",
      "description": "Price interface.",
      "properties": {
        "msrp_price": {
          "type": "string"
        },
        "is_applicable": {
          "type": "string"
        },
        "is_shown_price_on_gesture": {
          "type": "string"
        },
        "msrp_message": {
          "type": "string"
        },
        "explanation_message": {
          "type": "string"
        },
        "extension_attributes": {
          "$ref": "#/definitions/msrp-data-product-render-msrp-price-info-extension-interface"
        }
      },
      "required": [
        "msrp_price",
        "is_applicable",
        "is_shown_price_on_gesture",
        "msrp_message",
        "explanation_message"
      ]
    },
    "msrp-data-product-render-msrp-price-info-extension-interface": {
      "type": "object",
      "description": "ExtensionInterface class for @see \\Magento\\Msrp\\Api\\Data\\ProductRender\\MsrpPriceInfoInterface"
    },
    "weee-data-product-render-weee-adjustment-attribute-interface": {
      "type": "object",
      "description": "List of all weee attributes, their amounts, etc.., that product has",
      "properties": {
        "amount": {
          "type": "string",
          "description": "Weee attribute amount"
        },
        "tax_amount": {
          "type": "string",
          "description": "Tax which is calculated to fixed product tax attribute"
        },
        "tax_amount_incl_tax": {
          "type": "string",
          "description": "Tax amount of weee attribute"
        },
        "amount_excl_tax": {
          "type": "string",
          "description": "Product amount exclude tax"
        },
        "attribute_code": {
          "type": "string",
          "description": "Weee attribute code"
        },
        "extension_attributes": {
          "$ref": "#/definitions/weee-data-product-render-weee-adjustment-attribute-extension-interface"
        }
      },
      "required": [
        "amount",
        "tax_amount",
        "tax_amount_incl_tax",
        "amount_excl_tax",
        "attribute_code",
        "extension_attributes"
      ]
    },
    "weee-data-product-render-weee-adjustment-attribute-extension-interface": {
      "type": "object",
      "description": "ExtensionInterface class for @see \\Magento\\Weee\\Api\\Data\\ProductRender\\WeeeAdjustmentAttributeInterface"
    },
    "catalog-data-product-render-image-interface": {
      "type": "object",
      "description": "Product Render image interface. Represents physical characteristics of image, that can be used in product listing or product view",
      "properties": {
        "url": {
          "type": "string",
          "description": "Image url"
        },
        "code": {
          "type": "string",
          "description": "Image code"
        },
        "height": {
          "type": "number",
          "description": "Image height"
        },
        "width": {
          "type": "number",
          "description": "Image width in px"
        },
        "label": {
          "type": "string",
          "description": "Image label"
        },
        "resized_width": {
          "type": "number",
          "description": "Resize width"
        },
        "resized_height": {
          "type": "number",
          "description": "Resize height"
        },
        "extension_attributes": {
          "$ref": "#/definitions/catalog-data-product-render-image-extension-interface"
        }
      },
      "required": [
        "url",
        "code",
        "height",
        "width",
        "label",
        "resized_width",
        "resized_height"
      ]
    },
    "catalog-data-product-render-image-extension-interface": {
      "type": "object",
      "description": "ExtensionInterface class for @see \\Magento\\Catalog\\Api\\Data\\ProductRender\\ImageInterface"
    },
    "catalog-data-product-render-extension-interface": {
      "type": "object",
      "description": "ExtensionInterface class for @see \\Magento\\Catalog\\Api\\Data\\ProductRenderInterface",
      "properties": {
        "review_html": {
          "type": "string"
        },
        "wishlist_button": {
          "$ref": "#/definitions/catalog-data-product-render-button-interface"
        }
      }
    },
    "quote-data-cart-interface": {
      "type": "object",
      "description": "Interface CartInterface",
      "properties": {
        "id": {
          "type": "integer",
          "description": "Cart/quote ID."
        },
        "created_at": {
          "type": "string",
          "description": "Cart creation date and time. Otherwise, null."
        },
        "updated_at": {
          "type": "string",
          "description": "Cart last update date and time. Otherwise, null."
        },
        "converted_at": {
          "type": "string",
          "description": "Cart conversion date and time. Otherwise, null."
        },
        "is_active": {
          "type": "boolean",
          "description": "Active status flag value. Otherwise, null."
        },
        "is_virtual": {
          "type": "boolean",
          "description": "Virtual flag value. Otherwise, null."
        },
        "items": {
          "type": "array",
          "description": "Array of items. Otherwise, null.",
          "items": {
            "$ref": "#/definitions/quote-data-cart-item-interface"
          }
        },
        "items_count": {
          "type": "integer",
          "description": "Number of different items or products in the cart. Otherwise, null."
        },
        "items_qty": {
          "type": "number",
          "description": "Total quantity of all cart items. Otherwise, null."
        },
        "customer": {
          "$ref": "#/definitions/customer-data-customer-interface"
        },
        "billing_address": {
          "$ref": "#/definitions/quote-data-address-interface"
        },
        "reserved_order_id": {
          "type": "string",
          "description": "Reserved order ID. Otherwise, null."
        },
        "orig_order_id": {
          "type": "integer",
          "description": "Original order ID. Otherwise, null."
        },
        "currency": {
          "$ref": "#/definitions/quote-data-currency-interface"
        },
        "customer_is_guest": {
          "type": "boolean",
          "description": "For guest customers, false for logged in customers"
        },
        "customer_note": {
          "type": "string",
          "description": "Notice text"
        },
        "customer_note_notify": {
          "type": "boolean",
          "description": "Customer notification flag"
        },
        "customer_tax_class_id": {
          "type": "integer",
          "description": "Customer tax class ID."
        },
        "store_id": {
          "type": "integer",
          "description": "Store identifier"
        },
        "extension_attributes": {
          "$ref": "#/definitions/quote-data-cart-extension-interface"
        }
      },
      "required": [
        "id",
        "customer",
        "store_id"
      ]
    },
    "quote-data-cart-item-interface": {
      "type": "object",
      "description": "Interface CartItemInterface",
      "properties": {
        "item_id": {
          "type": "integer",
          "description": "Item ID. Otherwise, null."
        },
        "sku": {
          "type": "string",
          "description": "Product SKU. Otherwise, null."
        },
        "qty": {
          "type": "number",
          "description": "Product quantity."
        },
        "name": {
          "type": "string",
          "description": "Product name. Otherwise, null."
        },
        "price": {
          "type": "number",
          "description": "Product price. Otherwise, null."
        },
        "product_type": {
          "type": "string",
          "description": "Product type. Otherwise, null."
        },
        "quote_id": {
          "type": "string",
          "description": "Quote id."
        },
        "product_option": {
          "$ref": "#/definitions/quote-data-product-option-interface"
        },
        "extension_attributes": {
          "$ref": "#/definitions/quote-data-cart-item-extension-interface"
        }
      },
      "required": [
        "qty",
        "quote_id"
      ]
    },
    "quote-data-product-option-interface": {
      "type": "object",
      "description": "Product option interface",
      "properties": {
        "extension_attributes": {
          "$ref": "#/definitions/quote-data-product-option-extension-interface"
        }
      }
    },
    "quote-data-product-option-extension-interface": {
      "type": "object",
      "description": "ExtensionInterface class for @see \\Magento\\Quote\\Api\\Data\\ProductOptionInterface",
      "properties": {
        "custom_options": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/catalog-data-custom-option-interface"
          }
        },
        "bundle_options": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/bundle-data-bundle-option-interface"
          }
        },
        "downloadable_option": {
          "$ref": "#/definitions/downloadable-data-downloadable-option-interface"
        },
        "configurable_item_options": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/configurable-product-data-configurable-item-option-value-interface"
          }
        }
      }
    },
    "catalog-data-custom-option-interface": {
      "type": "object",
      "description": "Interface CustomOptionInterface",
      "properties": {
        "option_id": {
          "type": "string",
          "description": "Option id"
        },
        "option_value": {
          "type": "string",
          "description": "Option value"
        },
        "extension_attributes": {
          "$ref": "#/definitions/catalog-data-custom-option-extension-interface"
        }
      },
      "required": [
        "option_id",
        "option_value"
      ]
    },
    "catalog-data-custom-option-extension-interface": {
      "type": "object",
      "description": "ExtensionInterface class for @see \\Magento\\Catalog\\Api\\Data\\CustomOptionInterface",
      "properties": {
        "file_info": {
          "$ref": "#/definitions/framework-data-image-content-interface"
        }
      }
    },
    "bundle-data-bundle-option-interface": {
      "type": "object",
      "description": "Interface BundleOptionInterface",
      "properties": {
        "option_id": {
          "type": "integer",
          "description": "Bundle option id."
        },
        "option_qty": {
          "type": "integer",
          "description": "Bundle option quantity."
        },
        "option_selections": {
          "type": "array",
          "description": "Bundle option selection ids.",
          "items": {
            "type": "integer"
          }
        },
        "extension_attributes": {
          "$ref": "#/definitions/bundle-data-bundle-option-extension-interface"
        }
      },
      "required": [
        "option_id",
        "option_qty",
        "option_selections"
      ]
    },
    "bundle-data-bundle-option-extension-interface": {
      "type": "object",
      "description": "ExtensionInterface class for @see \\Magento\\Bundle\\Api\\Data\\BundleOptionInterface"
    },
    "downloadable-data-downloadable-option-interface": {
      "type": "object",
      "description": "Downloadable Option",
      "properties": {
        "downloadable_links": {
          "type": "array",
          "description": "The list of downloadable links",
          "items": {
            "type": "integer"
          }
        }
      },
      "required": [
        "downloadable_links"
      ]
    },
    "configurable-product-data-configurable-item-option-value-interface": {
      "type": "object",
      "description": "Interface ConfigurableItemOptionValueInterface",
      "properties": {
        "option_id": {
          "type": "string",
          "description": "Option SKU"
        },
        "option_value": {
          "type": "integer",
          "description": "Item id"
        },
        "extension_attributes": {
          "$ref": "#/definitions/configurable-product-data-configurable-item-option-value-extension-interface"
        }
      },
      "required": [
        "option_id"
      ]
    },
    "configurable-product-data-configurable-item-option-value-extension-interface": {
      "type": "object",
      "description": "ExtensionInterface class for @see \\Magento\\ConfigurableProduct\\Api\\Data\\ConfigurableItemOptionValueInterface"
    },
    "quote-data-cart-item-extension-interface": {
      "type": "object",
      "description": "ExtensionInterface class for @see \\Magento\\Quote\\Api\\Data\\CartItemInterface"
    },
    "quote-data-address-interface": {
      "type": "object",
      "description": "Interface AddressInterface",
      "properties": {
        "id": {
          "type": "integer",
          "description": "Id"
        },
        "region": {
          "type": "string",
          "description": "Region name"
        },
        "region_id": {
          "type": "integer",
          "description": "Region id"
        },
        "region_code": {
          "type": "string",
          "description": "Region code"
        },
        "country_id": {
          "type": "string",
          "description": "Country id"
        },
        "street": {
          "type": "array",
          "description": "Street",
          "items": {
            "type": "string"
          }
        },
        "company": {
          "type": "string",
          "description": "Company"
        },
        "telephone": {
          "type": "string",
          "description": "Telephone number"
        },
        "fax": {
          "type": "string",
          "description": "Fax number"
        },
        "postcode": {
          "type": "string",
          "description": "Postcode"
        },
        "city": {
          "type": "string",
          "description": "City name"
        },
        "firstname": {
          "type": "string",
          "description": "First name"
        },
        "lastname": {
          "type": "string",
          "description": "Last name"
        },
        "middlename": {
          "type": "string",
          "description": "Middle name"
        },
        "prefix": {
          "type": "string",
          "description": "Prefix"
        },
        "suffix": {
          "type": "string",
          "description": "Suffix"
        },
        "vat_id": {
          "type": "string",
          "description": "Vat id"
        },
        "customer_id": {
          "type": "integer",
          "description": "Customer id"
        },
        "email": {
          "type": "string",
          "description": "Billing/shipping email"
        },
        "same_as_billing": {
          "type": "integer",
          "description": "Same as billing flag"
        },
        "customer_address_id": {
          "type": "integer",
          "description": "Customer address id"
        },
        "save_in_address_book": {
          "type": "integer",
          "description": "Save in address book flag"
        },
        "extension_attributes": {
          "$ref": "#/definitions/quote-data-address-extension-interface"
        },
        "custom_attributes": {
          "type": "array",
          "description": "Custom attributes values.",
          "items": {
            "$ref": "#/definitions/framework-attribute-interface"
          }
        }
      },
      "required": [
        "region",
        "region_id",
        "region_code",
        "country_id",
        "street",
        "telephone",
        "postcode",
        "city",
        "firstname",
        "lastname",
        "email"
      ]
    },
    "quote-data-address-extension-interface": {
      "type": "object",
      "description": "ExtensionInterface class for @see \\Magento\\Quote\\Api\\Data\\AddressInterface",
      "properties": {
        "checkout_fields": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/framework-attribute-interface"
          }
        }
      }
    },
    "quote-data-currency-interface": {
      "type": "object",
      "description": "Interface CurrencyInterface",
      "properties": {
        "global_currency_code": {
          "type": "string",
          "description": "Global currency code"
        },
        "base_currency_code": {
          "type": "string",
          "description": "Base currency code"
        },
        "store_currency_code": {
          "type": "string",
          "description": "Store currency code"
        },
        "quote_currency_code": {
          "type": "string",
          "description": "Quote currency code"
        },
        "store_to_base_rate": {
          "type": "number",
          "description": "Store currency to base currency rate"
        },
        "store_to_quote_rate": {
          "type": "number",
          "description": "Store currency to quote currency rate"
        },
        "base_to_global_rate": {
          "type": "number",
          "description": "Base currency to global currency rate"
        },
        "base_to_quote_rate": {
          "type": "number",
          "description": "Base currency to quote currency rate"
        },
        "extension_attributes": {
          "$ref": "#/definitions/quote-data-currency-extension-interface"
        }
      }
    },
    "quote-data-currency-extension-interface": {
      "type": "object",
      "description": "ExtensionInterface class for @see \\Magento\\Quote\\Api\\Data\\CurrencyInterface"
    },
    "quote-data-cart-extension-interface": {
      "type": "object",
      "description": "ExtensionInterface class for @see \\Magento\\Quote\\Api\\Data\\CartInterface",
      "properties": {
        "shipping_assignments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/quote-data-shipping-assignment-interface"
          }
        },
        "amazon_order_reference_id": {
          "$ref": "#/definitions/amazon-payment-data-quote-link-interface"
        }
      }
    },
    "quote-data-shipping-assignment-interface": {
      "type": "object",
      "description": "Interface ShippingAssignmentInterface",
      "properties": {
        "shipping": {
          "$ref": "#/definitions/quote-data-shipping-interface"
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/quote-data-cart-item-interface"
          }
        },
        "extension_attributes": {
          "$ref": "#/definitions/quote-data-shipping-assignment-extension-interface"
        }
      },
      "required": [
        "shipping",
        "items"
      ]
    },
    "quote-data-shipping-interface": {
      "type": "object",
      "description": "Interface ShippingInterface",
      "properties": {
        "address": {
          "$ref": "#/definitions/quote-data-address-interface"
        },
        "method": {
          "type": "string",
          "description": "Shipping method"
        },
        "extension_attributes": {
          "$ref": "#/definitions/quote-data-shipping-extension-interface"
        }
      },
      "required": [
        "address",
        "method"
      ]
    },
    "quote-data-shipping-extension-interface": {
      "type": "object",
      "description": "ExtensionInterface class for @see \\Magento\\Quote\\Api\\Data\\ShippingInterface"
    },
    "quote-data-shipping-assignment-extension-interface": {
      "type": "object",
      "description": "ExtensionInterface class for @see \\Magento\\Quote\\Api\\Data\\ShippingAssignmentInterface"
    },
    "amazon-payment-data-quote-link-interface": {
      "type": "object",
      "description": "",
      "properties": {
        "id": {
          "type": "string"
        },
        "amazon_order_reference_id": {
          "type": "string",
          "description": "Amazon order reference id"
        },
        "quote_id": {
          "type": "integer",
          "description": "Quote id"
        },
        "sandbox_simulation_reference": {
          "type": "string",
          "description": "Sandbox simulation reference"
        },
        "confirmed": {
          "type": "boolean",
          "description": "Quote confirmed with amazon"
        }
      },
      "required": [
        "id",
        "amazon_order_reference_id",
        "quote_id",
        "sandbox_simulation_reference",
        "confirmed"
      ]
    },
    "quote-data-cart-search-results-interface": {
      "type": "object",
      "description": "Interface CartSearchResultsInterface",
      "properties": {
        "items": {
          "type": "array",
          "description": "Carts list.",
          "items": {
            "$ref": "#/definitions/quote-data-cart-interface"
          }
        },
        "search_criteria": {
          "$ref": "#/definitions/framework-search-criteria-interface"
        },
        "total_count": {
          "type": "integer",
          "description": "Total count."
        }
      },
      "required": [
        "items",
        "search_criteria",
        "total_count"
      ]
    },
    "quote-data-payment-interface": {
      "type": "object",
      "description": "Interface PaymentInterface",
      "properties": {
        "po_number": {
          "type": "string",
          "description": "Purchase order number"
        },
        "method": {
          "type": "string",
          "description": "Payment method code"
        },
        "additional_data": {
          "type": "array",
          "description": "Payment additional details",
          "items": {
            "type": "string"
          }
        },
        "extension_attributes": {
          "$ref": "#/definitions/quote-data-payment-extension-interface"
        }
      },
      "required": [
        "method"
      ]
    },
    "quote-data-payment-extension-interface": {
      "type": "object",
      "description": "ExtensionInterface class for @see \\Magento\\Quote\\Api\\Data\\PaymentInterface",
      "properties": {
        "agreement_ids": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "quote-data-shipping-method-interface": {
      "type": "object",
      "description": "Interface ShippingMethodInterface",
      "properties": {
        "carrier_code": {
          "type": "string",
          "description": "Shipping carrier code."
        },
        "method_code": {
          "type": "string",
          "description": "Shipping method code."
        },
        "carrier_title": {
          "type": "string",
          "description": "Shipping carrier title. Otherwise, null."
        },
        "method_title": {
          "type": "string",
          "description": "Shipping method title. Otherwise, null."
        },
        "amount": {
          "type": "number",
          "description": "Shipping amount in store currency."
        },
        "base_amount": {
          "type": "number",
          "description": "Shipping amount in base currency."
        },
        "available": {
          "type": "boolean",
          "description": "The value of the availability flag for the current shipping method."
        },
        "extension_attributes": {
          "$ref": "#/definitions/quote-data-shipping-method-extension-interface"
        },
        "error_message": {
          "type": "string",
          "description": "Shipping Error message."
        },
        "price_excl_tax": {
          "type": "number",
          "description": "Shipping price excl tax."
        },
        "price_incl_tax": {
          "type": "number",
          "description": "Shipping price incl tax."
        }
      },
      "required": [
        "carrier_code",
        "method_code",
        "amount",
        "base_amount",
        "available",
        "error_message",
        "price_excl_tax",
        "price_incl_tax"
      ]
    },
    "quote-data-shipping-method-extension-interface": {
      "type": "object",
      "description": "ExtensionInterface class for @see \\Magento\\Quote\\Api\\Data\\ShippingMethodInterface"
    },
    "quote-data-payment-method-interface": {
      "type": "object",
      "description": "Interface PaymentMethodInterface",
      "properties": {
        "code": {
          "type": "string",
          "description": "Payment method code"
        },
        "title": {
          "type": "string",
          "description": "Payment method title"
        }
      },
      "required": [
        "code",
        "title"
      ]
    },
    "quote-data-totals-interface": {
      "type": "object",
      "description": "Interface TotalsInterface",
      "properties": {
        "grand_total": {
          "type": "number",
          "description": "Grand total in quote currency"
        },
        "base_grand_total": {
          "type": "number",
          "description": "Grand total in base currency"
        },
        "subtotal": {
          "type": "number",
          "description": "Subtotal in quote currency"
        },
        "base_subtotal": {
          "type": "number",
          "description": "Subtotal in base currency"
        },
        "discount_amount": {
          "type": "number",
          "description": "Discount amount in quote currency"
        },
        "base_discount_amount": {
          "type": "number",
          "description": "Discount amount in base currency"
        },
        "subtotal_with_discount": {
          "type": "number",
          "description": "Subtotal in quote currency with applied discount"
        },
        "base_subtotal_with_discount": {
          "type": "number",
          "description": "Subtotal in base currency with applied discount"
        },
        "shipping_amount": {
          "type": "number",
          "description": "Shipping amount in quote currency"
        },
        "base_shipping_amount": {
          "type": "number",
          "description": "Shipping amount in base currency"
        },
        "shipping_discount_amount": {
          "type": "number",
          "description": "Shipping discount amount in quote currency"
        },
        "base_shipping_discount_amount": {
          "type": "number",
          "description": "Shipping discount amount in base currency"
        },
        "tax_amount": {
          "type": "number",
          "description": "Tax amount in quote currency"
        },
        "base_tax_amount": {
          "type": "number",
          "description": "Tax amount in base currency"
        },
        "weee_tax_applied_amount": {
          "type": "number",
          "description": "Item weee tax applied amount in quote currency."
        },
        "shipping_tax_amount": {
          "type": "number",
          "description": "Shipping tax amount in quote currency"
        },
        "base_shipping_tax_amount": {
          "type": "number",
          "description": "Shipping tax amount in base currency"
        },
        "subtotal_incl_tax": {
          "type": "number",
          "description": "Subtotal including tax in quote currency"
        },
        "base_subtotal_incl_tax": {
          "type": "number",
          "description": "Subtotal including tax in base currency"
        },
        "shipping_incl_tax": {
          "type": "number",
          "description": "Shipping including tax in quote currency"
        },
        "base_shipping_incl_tax": {
          "type": "number",
          "description": "Shipping including tax in base currency"
        },
        "base_currency_code": {
          "type": "string",
          "description": "Base currency code"
        },
        "quote_currency_code": {
          "type": "string",
          "description": "Quote currency code"
        },
        "coupon_code": {
          "type": "string",
          "description": "Applied coupon code"
        },
        "items_qty": {
          "type": "integer",
          "description": "Items qty"
        },
        "items": {
          "type": "array",
          "description": "Totals by items",
          "items": {
            "$ref": "#/definitions/quote-data-totals-item-interface"
          }
        },
        "total_segments": {
          "type": "array",
          "description": "Dynamically calculated totals",
          "items": {
            "$ref": "#/definitions/quote-data-total-segment-interface"
          }
        },
        "extension_attributes": {
          "$ref": "#/definitions/quote-data-totals-extension-interface"
        }
      },
      "required": [
        "weee_tax_applied_amount",
        "total_segments"
      ]
    },
    "quote-data-totals-item-interface": {
      "type": "object",
      "description": "Interface TotalsItemInterface",
      "properties": {
        "item_id": {
          "type": "integer",
          "description": "Item id"
        },
        "price": {
          "type": "number",
          "description": "Item price in quote currency."
        },
        "base_price": {
          "type": "number",
          "description": "Item price in base currency."
        },
        "qty": {
          "type": "number",
          "description": "Item quantity."
        },
        "row_total": {
          "type": "number",
          "description": "Row total in quote currency."
        },
        "base_row_total": {
          "type": "number",
          "description": "Row total in base currency."
        },
        "row_total_with_discount": {
          "type": "number",
          "description": "Row total with discount in quote currency. Otherwise, null."
        },
        "tax_amount": {
          "type": "number",
          "description": "Tax amount in quote currency. Otherwise, null."
        },
        "base_tax_amount": {
          "type": "number",
          "description": "Tax amount in base currency. Otherwise, null."
        },
        "tax_percent": {
          "type": "number",
          "description": "Tax percent. Otherwise, null."
        },
        "discount_amount": {
          "type": "number",
          "description": "Discount amount in quote currency. Otherwise, null."
        },
        "base_discount_amount": {
          "type": "number",
          "description": "Discount amount in base currency. Otherwise, null."
        },
        "discount_percent": {
          "type": "number",
          "description": "Discount percent. Otherwise, null."
        },
        "price_incl_tax": {
          "type": "number",
          "description": "Price including tax in quote currency. Otherwise, null."
        },
        "base_price_incl_tax": {
          "type": "number",
          "description": "Price including tax in base currency. Otherwise, null."
        },
        "row_total_incl_tax": {
          "type": "number",
          "description": "Row total including tax in quote currency. Otherwise, null."
        },
        "base_row_total_incl_tax": {
          "type": "number",
          "description": "Row total including tax in base currency. Otherwise, null."
        },
        "options": {
          "type": "string",
          "description": "Item price in quote currency."
        },
        "weee_tax_applied_amount": {
          "type": "number",
          "description": "Item weee tax applied amount in quote currency."
        },
        "weee_tax_applied": {
          "type": "string",
          "description": "Item weee tax applied in quote currency."
        },
        "extension_attributes": {
          "$ref": "#/definitions/quote-data-totals-item-extension-interface"
        },
        "name": {
          "type": "string",
          "description": "Product name. Otherwise, null."
        }
      },
      "required": [
        "item_id",
        "price",
        "base_price",
        "qty",
        "row_total",
        "base_row_total",
        "options",
        "weee_tax_applied_amount",
        "weee_tax_applied"
      ]
    },
    "quote-data-totals-item-extension-interface": {
      "type": "object",
      "description": "ExtensionInterface class for @see \\Magento\\Quote\\Api\\Data\\TotalsItemInterface"
    },
    "quote-data-total-segment-interface": {
      "type": "object",
      "description": "Interface TotalsInterface",
      "properties": {
        "code": {
          "type": "string",
          "description": "Code"
        },
        "title": {
          "type": "string",
          "description": "Total title"
        },
        "value": {
          "type": "number",
          "description": "Total value"
        },
        "area": {
          "type": "string",
          "description": "Display area code."
        },
        "extension_attributes": {
          "$ref": "#/definitions/quote-data-total-segment-extension-interface"
        }
      },
      "required": [
        "code",
        "value"
      ]
    },
    "quote-data-total-segment-extension-interface": {
      "type": "object",
      "description": "ExtensionInterface class for @see \\Magento\\Quote\\Api\\Data\\TotalSegmentInterface",
      "properties": {
        "tax_grandtotal_details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/tax-data-grand-total-details-interface"
          }
        },
        "vertex_tax_calculation_messages": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "tax-data-grand-total-details-interface": {
      "type": "object",
      "description": "Interface GrandTotalDetailsInterface",
      "properties": {
        "amount": {
          "type": "number",
          "description": "Tax amount value"
        },
        "rates": {
          "type": "array",
          "description": "Tax rates info",
          "items": {
            "$ref": "#/definitions/tax-data-grand-total-rates-interface"
          }
        },
        "group_id": {
          "type": "integer",
          "description": "Group identifier"
        }
      },
      "required": [
        "amount",
        "rates",
        "group_id"
      ]
    },
    "tax-data-grand-total-rates-interface": {
      "type": "object",
      "description": "Interface GrandTotalRatesInterface",
      "properties": {
        "percent": {
          "type": "string",
          "description": "Tax percentage value"
        },
        "title": {
          "type": "string",
          "description": "Rate title"
        }
      },
      "required": [
        "percent",
        "title"
      ]
    },
    "quote-data-totals-extension-interface": {
      "type": "object",
      "description": "ExtensionInterface class for @see \\Magento\\Quote\\Api\\Data\\TotalsInterface",
      "properties": {
        "coupon_label": {
          "type": "string"
        }
      }
    },
    "quote-data-totals-additional-data-interface": {
      "type": "object",
      "description": "Additional data for totals collection.",
      "properties": {
        "extension_attributes": {
          "$ref": "#/definitions/quote-data-totals-additional-data-extension-interface"
        },
        "custom_attributes": {
          "type": "array",
          "description": "Custom attributes values.",
          "items": {
            "$ref": "#/definitions/framework-attribute-interface"
          }
        }
      }
    },
    "quote-data-totals-additional-data-extension-interface": {
      "type": "object",
      "description": "ExtensionInterface class for @see \\Magento\\Quote\\Api\\Data\\TotalsAdditionalDataInterface",
      "properties": {
        "gift_messages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/gift-message-data-message-interface"
          }
        }
      }
    },
    "gift-message-data-message-interface": {
      "type": "object",
      "description": "Interface MessageInterface",
      "properties": {
        "gift_message_id": {
          "type": "integer",
          "description": "Gift message ID. Otherwise, null."
        },
        "customer_id": {
          "type": "integer",
          "description": "Customer ID. Otherwise, null."
        },
        "sender": {
          "type": "string",
          "description": "Sender name."
        },
        "recipient": {
          "type": "string",
          "description": "Recipient name."
        },
        "message": {
          "type": "string",
          "description": "Message text."
        },
        "extension_attributes": {
          "$ref": "#/definitions/gift-message-data-message-extension-interface"
        }
      },
      "required": [
        "sender",
        "recipient",
        "message"
      ]
    },
    "gift-message-data-message-extension-interface": {
      "type": "object",
      "description": "ExtensionInterface class for @see \\Magento\\GiftMessage\\Api\\Data\\MessageInterface",
      "properties": {
        "entity_id": {
          "type": "string"
        },
        "entity_type": {
          "type": "string"
        }
      }
    },
    "catalog-inventory-data-stock-item-collection-interface": {
      "type": "object",
      "description": "Interface StockItemCollectionInterface",
      "properties": {
        "items": {
          "type": "array",
          "description": "Items",
          "items": {
            "$ref": "#/definitions/catalog-inventory-data-stock-item-interface"
          }
        },
        "search_criteria": {
          "$ref": "#/definitions/catalog-inventory-stock-item-criteria-interface"
        },
        "total_count": {
          "type": "integer",
          "description": "Total count."
        }
      },
      "required": [
        "items",
        "search_criteria",
        "total_count"
      ]
    },
    "catalog-inventory-stock-item-criteria-interface": {
      "type": "object",
      "description": "Interface StockItemCriteriaInterface",
      "properties": {
        "mapper_interface_name": {
          "type": "string",
          "description": "Associated Mapper Interface name"
        },
        "criteria_list": {
          "type": "array",
          "description": "Criteria objects added to current Composite Criteria",
          "items": {
            "$ref": "#/definitions/framework-criteria-interface"
          }
        },
        "filters": {
          "type": "array",
          "description": "List of filters",
          "items": {
            "type": "string"
          }
        },
        "orders": {
          "type": "array",
          "description": "Ordering criteria",
          "items": {
            "type": "string"
          }
        },
        "limit": {
          "type": "array",
          "description": "Limit",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "mapper_interface_name",
        "criteria_list",
        "filters",
        "orders",
        "limit"
      ]
    },
    "framework-criteria-interface": {
      "type": "object",
      "description": "Interface CriteriaInterface",
      "properties": {
        "mapper_interface_name": {
          "type": "string",
          "description": "Associated Mapper Interface name"
        },
        "criteria_list": {
          "type": "array",
          "description": "Criteria objects added to current Composite Criteria",
          "items": {
            "$ref": "#/definitions/framework-criteria-interface"
          }
        },
        "filters": {
          "type": "array",
          "description": "List of filters",
          "items": {
            "type": "string"
          }
        },
        "orders": {
          "type": "array",
          "description": "Ordering criteria",
          "items": {
            "type": "string"
          }
        },
        "limit": {
          "type": "array",
          "description": "Limit",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "mapper_interface_name",
        "criteria_list",
        "filters",
        "orders",
        "limit"
      ]
    },
    "catalog-inventory-data-stock-status-interface": {
      "type": "object",
      "description": "Interface StockStatusInterface",
      "properties": {
        "product_id": {
          "type": "integer"
        },
        "stock_id": {
          "type": "integer"
        },
        "qty": {
          "type": "integer"
        },
        "stock_status": {
          "type": "integer"
        },
        "stock_item": {
          "$ref": "#/definitions/catalog-inventory-data-stock-item-interface"
        },
        "extension_attributes": {
          "$ref": "#/definitions/catalog-inventory-data-stock-status-extension-interface"
        }
      },
      "required": [
        "product_id",
        "stock_id",
        "qty",
        "stock_status",
        "stock_item"
      ]
    },
    "catalog-inventory-data-stock-status-extension-interface": {
      "type": "object",
      "description": "ExtensionInterface class for @see \\Magento\\CatalogInventory\\Api\\Data\\StockStatusInterface"
    },
    "bundle-data-option-type-interface": {
      "type": "object",
      "description": "Interface OptionTypeInterface",
      "properties": {
        "label": {
          "type": "string",
          "description": "Type label"
        },
        "code": {
          "type": "string",
          "description": "Type code"
        },
        "extension_attributes": {
          "$ref": "#/definitions/bundle-data-option-type-extension-interface"
        }
      },
      "required": [
        "label",
        "code"
      ]
    },
    "bundle-data-option-type-extension-interface": {
      "type": "object",
      "description": "ExtensionInterface class for @see \\Magento\\Bundle\\Api\\Data\\OptionTypeInterface"
    },
    "sales-data-order-interface": {
      "type": "object",
      "description": "Order interface. An order is a document that a web store issues to a customer. Magento generates a sales order that lists the product items, billing and shipping addresses, and shipping and payment methods. A corresponding external document, known as a purchase order, is emailed to the customer.",
      "properties": {
        "adjustment_negative": {
          "type": "number",
          "description": "Negative adjustment value."
        },
        "adjustment_positive": {
          "type": "number",
          "description": "Positive adjustment value."
        },
        "applied_rule_ids": {
          "type": "string",
          "description": "Applied rule IDs."
        },
        "base_adjustment_negative": {
          "type": "number",
          "description": "Base negative adjustment value."
        },
        "base_adjustment_positive": {
          "type": "number",
          "description": "Base positive adjustment value."
        },
        "base_currency_code": {
          "type": "string",
          "description": "Base currency code."
        },
        "base_discount_amount": {
          "type": "number",
          "description": "Base discount amount."
        },
        "base_discount_canceled": {
          "type": "number",
          "description": "Base discount canceled."
        },
        "base_discount_invoiced": {
          "type": "number",
          "description": "Base discount invoiced."
        },
        "base_discount_refunded": {
          "type": "number",
          "description": "Base discount refunded."
        },
        "base_grand_total": {
          "type": "number",
          "description": "Base grand total."
        },
        "base_discount_tax_compensation_amount": {
          "type": "number",
          "description": "Base discount tax compensation amount."
        },
        "base_discount_tax_compensation_invoiced": {
          "type": "number",
          "description": "Base discount tax compensation invoiced."
        },
        "base_discount_tax_compensation_refunded": {
          "type": "number",
          "description": "Base discount tax compensation refunded."
        },
        "base_shipping_amount": {
          "type": "number",
          "description": "Base shipping amount."
        },
        "base_shipping_canceled": {
          "type": "number",
          "description": "Base shipping canceled."
        },
        "base_shipping_discount_amount": {
          "type": "number",
          "description": "Base shipping discount amount."
        },
        "base_shipping_discount_tax_compensation_amnt": {
          "type": "number",
          "description": "Base shipping discount tax compensation amount."
        },
        "base_shipping_incl_tax": {
          "type": "number",
          "description": "Base shipping including tax."
        },
        "base_shipping_invoiced": {
          "type": "number",
          "description": "Base shipping invoiced."
        },
        "base_shipping_refunded": {
          "type": "number",
          "description": "Base shipping refunded."
        },
        "base_shipping_tax_amount": {
          "type": "number",
          "description": "Base shipping tax amount."
        },
        "base_shipping_tax_refunded": {
          "type": "number",
          "description": "Base shipping tax refunded."
        },
        "base_subtotal": {
          "type": "number",
          "description": "Base subtotal."
        },
        "base_subtotal_canceled": {
          "type": "number",
          "description": "Base subtotal canceled."
        },
        "base_subtotal_incl_tax": {
          "type": "number",
          "description": "Base subtotal including tax."
        },
        "base_subtotal_invoiced": {
          "type": "number",
          "description": "Base subtotal invoiced."
        },
        "base_subtotal_refunded": {
          "type": "number",
          "description": "Base subtotal refunded."
        },
        "base_tax_amount": {
          "type": "number",
          "description": "Base tax amount."
        },
        "base_tax_canceled": {
          "type": "number",
          "description": "Base tax canceled."
        },
        "base_tax_invoiced": {
          "type": "number",
          "description": "Base tax invoiced."
        },
        "base_tax_refunded": {
          "type": "number",
          "description": "Base tax refunded."
        },
        "base_total_canceled": {
          "type": "number",
          "description": "Base total canceled."
        },
        "base_total_due": {
          "type": "number",
          "description": "Base total due."
        },
        "base_total_invoiced": {
          "type": "number",
          "description": "Base total invoiced."
        },
        "base_total_invoiced_cost": {
          "type": "number",
          "description": "Base total invoiced cost."
        },
        "base_total_offline_refunded": {
          "type": "number",
          "description": "Base total offline refunded."
        },
        "base_total_online_refunded": {
          "type": "number",
          "description": "Base total online refunded."
        },
        "base_total_paid": {
          "type": "number",
          "description": "Base total paid."
        },
        "base_total_qty_ordered": {
          "type": "number",
          "description": "Base total quantity ordered."
        },
        "base_total_refunded": {
          "type": "number",
          "description": "Base total refunded."
        },
        "base_to_global_rate": {
          "type": "number",
          "description": "Base-to-global rate."
        },
        "base_to_order_rate": {
          "type": "number",
          "description": "Base-to-order rate."
        },
        "billing_address_id": {
          "type": "integer",
          "description": "Billing address ID."
        },
        "can_ship_partially": {
          "type": "integer",
          "description": "Can-ship-partially flag value."
        },
        "can_ship_partially_item": {
          "type": "integer",
          "description": "Can-ship-partially-item flag value."
        },
        "coupon_code": {
          "type": "string",
          "description": "Coupon code."
        },
        "created_at": {
          "type": "string",
          "description": "Created-at timestamp."
        },
        "customer_dob": {
          "type": "string",
          "description": "Customer date-of-birth (DOB)."
        },
        "customer_email": {
          "type": "string",
          "description": "Customer email address."
        },
        "customer_firstname": {
          "type": "string",
          "description": "Customer first name."
        },
        "customer_gender": {
          "type": "integer",
          "description": "Customer gender."
        },
        "customer_group_id": {
          "type": "integer",
          "description": "Customer group ID."
        },
        "customer_id": {
          "type": "integer",
          "description": "Customer ID."
        },
        "customer_is_guest": {
          "type": "integer",
          "description": "Customer-is-guest flag value."
        },
        "customer_lastname": {
          "type": "string",
          "description": "Customer last name."
        },
        "customer_middlename": {
          "type": "string",
          "description": "Customer middle name."
        },
        "customer_note": {
          "type": "string",
          "description": "Customer note."
        },
        "customer_note_notify": {
          "type": "integer",
          "description": "Customer-note-notify flag value."
        },
        "customer_prefix": {
          "type": "string",
          "description": "Customer prefix."
        },
        "customer_suffix": {
          "type": "string",
          "description": "Customer suffix."
        },
        "customer_taxvat": {
          "type": "string",
          "description": "Customer value-added tax (VAT)."
        },
        "discount_amount": {
          "type": "number",
          "description": "Discount amount."
        },
        "discount_canceled": {
          "type": "number",
          "description": "Discount canceled."
        },
        "discount_description": {
          "type": "string",
          "description": "Discount description."
        },
        "discount_invoiced": {
          "type": "number",
          "description": "Discount invoiced."
        },
        "discount_refunded": {
          "type": "number",
          "description": "Discount refunded amount."
        },
        "edit_increment": {
          "type": "integer",
          "description": "Edit increment value."
        },
        "email_sent": {
          "type": "integer",
          "description": "Email-sent flag value."
        },
        "entity_id": {
          "type": "integer",
          "description": "Order ID."
        },
        "ext_customer_id": {
          "type": "string",
          "description": "External customer ID."
        },
        "ext_order_id": {
          "type": "string",
          "description": "External order ID."
        },
        "forced_shipment_with_invoice": {
          "type": "integer",
          "description": "Forced-shipment-with-invoice flag value."
        },
        "global_currency_code": {
          "type": "string",
          "description": "Global currency code."
        },
        "grand_total": {
          "type": "number",
          "description": "Grand total."
        },
        "discount_tax_compensation_amount": {
          "type": "number",
          "description": "Discount tax compensation amount."
        },
        "discount_tax_compensation_invoiced": {
          "type": "number",
          "description": "Discount tax compensation invoiced amount."
        },
        "discount_tax_compensation_refunded": {
          "type": "number",
          "description": "Discount tax compensation refunded amount."
        },
        "hold_before_state": {
          "type": "string",
          "description": "Hold before state."
        },
        "hold_before_status": {
          "type": "string",
          "description": "Hold before status."
        },
        "increment_id": {
          "type": "string",
          "description": "Increment ID."
        },
        "is_virtual": {
          "type": "integer",
          "description": "Is-virtual flag value."
        },
        "order_currency_code": {
          "type": "string",
          "description": "Order currency code."
        },
        "original_increment_id": {
          "type": "string",
          "description": "Original increment ID."
        },
        "payment_authorization_amount": {
          "type": "number",
          "description": "Payment authorization amount."
        },
        "payment_auth_expiration": {
          "type": "integer",
          "description": "Payment authorization expiration date."
        },
        "protect_code": {
          "type": "string",
          "description": "Protect code."
        },
        "quote_address_id": {
          "type": "integer",
          "description": "Quote address ID."
        },
        "quote_id": {
          "type": "integer",
          "description": "Quote ID."
        },
        "relation_child_id": {
          "type": "string",
          "description": "Relation child ID."
        },
        "relation_child_real_id": {
          "type": "string",
          "description": "Relation child real ID."
        },
        "relation_parent_id": {
          "type": "string",
          "description": "Relation parent ID."
        },
        "relation_parent_real_id": {
          "type": "string",
          "description": "Relation parent real ID."
        },
        "remote_ip": {
          "type": "string",
          "description": "Remote IP address."
        },
        "shipping_amount": {
          "type": "number",
          "description": "Shipping amount."
        },
        "shipping_canceled": {
          "type": "number",
          "description": "Shipping canceled amount."
        },
        "shipping_description": {
          "type": "string",
          "description": "Shipping description."
        },
        "shipping_discount_amount": {
          "type": "number",
          "description": "Shipping discount amount."
        },
        "shipping_discount_tax_compensation_amount": {
          "type": "number",
          "description": "Shipping discount tax compensation amount."
        },
        "shipping_incl_tax": {
          "type": "number",
          "description": "Shipping including tax amount."
        },
        "shipping_invoiced": {
          "type": "number",
          "description": "Shipping invoiced amount."
        },
        "shipping_refunded": {
          "type": "number",
          "description": "Shipping refunded amount."
        },
        "shipping_tax_amount": {
          "type": "number",
          "description": "Shipping tax amount."
        },
        "shipping_tax_refunded": {
          "type": "number",
          "description": "Shipping tax refunded amount."
        },
        "state": {
          "type": "string",
          "description": "State."
        },
        "status": {
          "type": "string",
          "description": "Status."
        },
        "store_currency_code": {
          "type": "string",
          "description": "Store currency code."
        },
        "store_id": {
          "type": "integer",
          "description": "Store ID."
        },
        "store_name": {
          "type": "string",
          "description": "Store name."
        },
        "store_to_base_rate": {
          "type": "number",
          "description": "Store-to-base rate."
        },
        "store_to_order_rate": {
          "type": "number",
          "description": "Store-to-order rate."
        },
        "subtotal": {
          "type": "number",
          "description": "Subtotal."
        },
        "subtotal_canceled": {
          "type": "number",
          "description": "Subtotal canceled amount."
        },
        "subtotal_incl_tax": {
          "type": "number",
          "description": "Subtotal including tax amount."
        },
        "subtotal_invoiced": {
          "type": "number",
          "description": "Subtotal invoiced amount."
        },
        "subtotal_refunded": {
          "type": "number",
          "description": "Subtotal refunded amount."
        },
        "tax_amount": {
          "type": "number",
          "description": "Tax amount."
        },
        "tax_canceled": {
          "type": "number",
          "description": "Tax canceled amount."
        },
        "tax_invoiced": {
          "type": "number",
          "description": "Tax invoiced amount."
        },
        "tax_refunded": {
          "type": "number",
          "description": "Tax refunded amount."
        },
        "total_canceled": {
          "type": "number",
          "description": "Total canceled."
        },
        "total_due": {
          "type": "number",
          "description": "Total due."
        },
        "total_invoiced": {
          "type": "number",
          "description": "Total invoiced amount."
        },
        "total_item_count": {
          "type": "integer",
          "description": "Total item count."
        },
        "total_offline_refunded": {
          "type": "number",
          "description": "Total offline refunded amount."
        },
        "total_online_refunded": {
          "type": "number",
          "description": "Total online refunded amount."
        },
        "total_paid": {
          "type": "number",
          "description": "Total paid."
        },
        "total_qty_ordered": {
          "type": "number",
          "description": "Total quantity ordered."
        },
        "total_refunded": {
          "type": "number",
          "description": "Total amount refunded."
        },
        "updated_at": {
          "type": "string",
          "description": "Updated-at timestamp."
        },
        "weight": {
          "type": "number",
          "description": "Weight."
        },
        "x_forwarded_for": {
          "type": "string",
          "description": "X-Forwarded-For field value."
        },
        "items": {
          "type": "array",
          "description": "Array of items.",
          "items": {
            "$ref": "#/definitions/sales-data-order-item-interface"
          }
        },
        "billing_address": {
          "$ref": "#/definitions/sales-data-order-address-interface"
        },
        "payment": {
          "$ref": "#/definitions/sales-data-order-payment-interface"
        },
        "status_histories": {
          "type": "array",
          "description": "Array of status histories.",
          "items": {
            "$ref": "#/definitions/sales-data-order-status-history-interface"
          }
        },
        "extension_attributes": {
          "$ref": "#/definitions/sales-data-order-extension-interface"
        }
      },
      "required": [
        "base_grand_total",
        "customer_email",
        "grand_total",
        "items"
      ]
    },
    "sales-data-order-item-interface": {
      "type": "object",
      "description": "Order item interface. An order is a document that a web store issues to a customer. Magento generates a sales order that lists the product items, billing and shipping addresses, and shipping and payment methods. A corresponding external document, known as a purchase order, is emailed to the customer.",
      "properties": {
        "additional_data": {
          "type": "string",
          "description": "Additional data."
        },
        "amount_refunded": {
          "type": "number",
          "description": "Amount refunded."
        },
        "applied_rule_ids": {
          "type": "string",
          "description": "Applied rule IDs."
        },
        "base_amount_refunded": {
          "type": "number",
          "description": "Base amount refunded."
        },
        "base_cost": {
          "type": "number",
          "description": "Base cost."
        },
        "base_discount_amount": {
          "type": "number",
          "description": "Base discount amount."
        },
        "base_discount_invoiced": {
          "type": "number",
          "description": "Base discount invoiced."
        },
        "base_discount_refunded": {
          "type": "number",
          "description": "Base discount refunded."
        },
        "base_discount_tax_compensation_amount": {
          "type": "number",
          "description": "Base discount tax compensation amount."
        },
        "base_discount_tax_compensation_invoiced": {
          "type": "number",
          "description": "Base discount tax compensation invoiced."
        },
        "base_discount_tax_compensation_refunded": {
          "type": "number",
          "description": "Base discount tax compensation refunded."
        },
        "base_original_price": {
          "type": "number",
          "description": "Base original price."
        },
        "base_price": {
          "type": "number",
          "description": "Base price."
        },
        "base_price_incl_tax": {
          "type": "number",
          "description": "Base price including tax."
        },
        "base_row_invoiced": {
          "type": "number",
          "description": "Base row invoiced."
        },
        "base_row_total": {
          "type": "number",
          "description": "Base row total."
        },
        "base_row_total_incl_tax": {
          "type": "number",
          "description": "Base row total including tax."
        },
        "base_tax_amount": {
          "type": "number",
          "description": "Base tax amount."
        },
        "base_tax_before_discount": {
          "type": "number",
          "description": "Base tax before discount."
        },
        "base_tax_invoiced": {
          "type": "number",
          "description": "Base tax invoiced."
        },
        "base_tax_refunded": {
          "type": "number",
          "description": "Base tax refunded."
        },
        "base_weee_tax_applied_amount": {
          "type": "number",
          "description": "Base WEEE tax applied amount."
        },
        "base_weee_tax_applied_row_amnt": {
          "type": "number",
          "description": "Base WEEE tax applied row amount."
        },
        "base_weee_tax_disposition": {
          "type": "number",
          "description": "Base WEEE tax disposition."
        },
        "base_weee_tax_row_disposition": {
          "type": "number",
          "description": "Base WEEE tax row disposition."
        },
        "created_at": {
          "type": "string",
          "description": "Created-at timestamp."
        },
        "description": {
          "type": "string",
          "description": "Description."
        },
        "discount_amount": {
          "type": "number",
          "description": "Discount amount."
        },
        "discount_invoiced": {
          "type": "number",
          "description": "Discount invoiced."
        },
        "discount_percent": {
          "type": "number",
          "description": "Discount percent."
        },
        "discount_refunded": {
          "type": "number",
          "description": "Discount refunded."
        },
        "event_id": {
          "type": "integer",
          "description": "Event ID."
        },
        "ext_order_item_id": {
          "type": "string",
          "description": "External order item ID."
        },
        "free_shipping": {
          "type": "integer",
          "description": "Free-shipping flag value."
        },
        "gw_base_price": {
          "type": "number",
          "description": "GW base price."
        },
        "gw_base_price_invoiced": {
          "type": "number",
          "description": "GW base price invoiced."
        },
        "gw_base_price_refunded": {
          "type": "number",
          "description": "GW base price refunded."
        },
        "gw_base_tax_amount": {
          "type": "number",
          "description": "GW base tax amount."
        },
        "gw_base_tax_amount_invoiced": {
          "type": "number",
          "description": "GW base tax amount invoiced."
        },
        "gw_base_tax_amount_refunded": {
          "type": "number",
          "description": "GW base tax amount refunded."
        },
        "gw_id": {
          "type": "integer",
          "description": "GW ID."
        },
        "gw_price": {
          "type": "number",
          "description": "GW price."
        },
        "gw_price_invoiced": {
          "type": "number",
          "description": "GW price invoiced."
        },
        "gw_price_refunded": {
          "type": "number",
          "description": "GW price refunded."
        },
        "gw_tax_amount": {
          "type": "number",
          "description": "GW tax amount."
        },
        "gw_tax_amount_invoiced": {
          "type": "number",
          "description": "GW tax amount invoiced."
        },
        "gw_tax_amount_refunded": {
          "type": "number",
          "description": "GW tax amount refunded."
        },
        "discount_tax_compensation_amount": {
          "type": "number",
          "description": "Discount tax compensation amount."
        },
        "discount_tax_compensation_canceled": {
          "type": "number",
          "description": "Discount tax compensation canceled."
        },
        "discount_tax_compensation_invoiced": {
          "type": "number",
          "description": "Discount tax compensation invoiced."
        },
        "discount_tax_compensation_refunded": {
          "type": "number",
          "description": "Discount tax compensation refunded."
        },
        "is_qty_decimal": {
          "type": "integer",
          "description": "Is-quantity-decimal flag value."
        },
        "is_virtual": {
          "type": "integer",
          "description": "Is-virtual flag value."
        },
        "item_id": {
          "type": "integer",
          "description": "Item ID."
        },
        "locked_do_invoice": {
          "type": "integer",
          "description": "Locked DO invoice flag value."
        },
        "locked_do_ship": {
          "type": "integer",
          "description": "Locked DO ship flag value."
        },
        "name": {
          "type": "string",
          "description": "Name."
        },
        "no_discount": {
          "type": "integer",
          "description": "No-discount flag value."
        },
        "order_id": {
          "type": "integer",
          "description": "Order ID."
        },
        "original_price": {
          "type": "number",
          "description": "Original price."
        },
        "parent_item_id": {
          "type": "integer",
          "description": "Parent item ID."
        },
        "price": {
          "type": "number",
          "description": "Price."
        },
        "price_incl_tax": {
          "type": "number",
          "description": "Price including tax."
        },
        "product_id": {
          "type": "integer",
          "description": "Product ID."
        },
        "product_type": {
          "type": "string",
          "description": "Product type."
        },
        "qty_backordered": {
          "type": "number",
          "description": "Quantity backordered."
        },
        "qty_canceled": {
          "type": "number",
          "description": "Quantity canceled."
        },
        "qty_invoiced": {
          "type": "number",
          "description": "Quantity invoiced."
        },
        "qty_ordered": {
          "type": "number",
          "description": "Quantity ordered."
        },
        "qty_refunded": {
          "type": "number",
          "description": "Quantity refunded."
        },
        "qty_returned": {
          "type": "number",
          "description": "Quantity returned."
        },
        "qty_shipped": {
          "type": "number",
          "description": "Quantity shipped."
        },
        "quote_item_id": {
          "type": "integer",
          "description": "Quote item ID."
        },
        "row_invoiced": {
          "type": "number",
          "description": "Row invoiced."
        },
        "row_total": {
          "type": "number",
          "description": "Row total."
        },
        "row_total_incl_tax": {
          "type": "number",
          "description": "Row total including tax."
        },
        "row_weight": {
          "type": "number",
          "description": "Row weight."
        },
        "sku": {
          "type": "string",
          "description": "SKU."
        },
        "store_id": {
          "type": "integer",
          "description": "Store ID."
        },
        "tax_amount": {
          "type": "number",
          "description": "Tax amount."
        },
        "tax_before_discount": {
          "type": "number",
          "description": "Tax before discount."
        },
        "tax_canceled": {
          "type": "number",
          "description": "Tax canceled."
        },
        "tax_invoiced": {
          "type": "number",
          "description": "Tax invoiced."
        },
        "tax_percent": {
          "type": "number",
          "description": "Tax percent."
        },
        "tax_refunded": {
          "type": "number",
          "description": "Tax refunded."
        },
        "updated_at": {
          "type": "string",
          "description": "Updated-at timestamp."
        },
        "weee_tax_applied": {
          "type": "string",
          "description": "WEEE tax applied."
        },
        "weee_tax_applied_amount": {
          "type": "number",
          "description": "WEEE tax applied amount."
        },
        "weee_tax_applied_row_amount": {
          "type": "number",
          "description": "WEEE tax applied row amount."
        },
        "weee_tax_disposition": {
          "type": "number",
          "description": "WEEE tax disposition."
        },
        "weee_tax_row_disposition": {
          "type": "number",
          "description": "WEEE tax row disposition."
        },
        "weight": {
          "type": "number",
          "description": "Weight."
        },
        "parent_item": {
          "$ref": "#/definitions/sales-data-order-item-interface"
        },
        "product_option": {
          "$ref": "#/definitions/catalog-data-product-option-interface"
        },
        "extension_attributes": {
          "$ref": "#/definitions/sales-data-order-item-extension-interface"
        }
      },
      "required": [
        "sku"
      ]
    },
    "catalog-data-product-option-interface": {
      "type": "object",
      "description": "Product option interface",
      "properties": {
        "extension_attributes": {
          "$ref": "#/definitions/catalog-data-product-option-extension-interface"
        }
      }
    },
    "catalog-data-product-option-extension-interface": {
      "type": "object",
      "description": "ExtensionInterface class for @see \\Magento\\Catalog\\Api\\Data\\ProductOptionInterface",
      "properties": {
        "custom_options": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/catalog-data-custom-option-interface"
          }
        },
        "bundle_options": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/bundle-data-bundle-option-interface"
          }
        },
        "downloadable_option": {
          "$ref": "#/definitions/downloadable-data-downloadable-option-interface"
        },
        "configurable_item_options": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/configurable-product-data-configurable-item-option-value-interface"
          }
        }
      }
    },
    "sales-data-order-item-extension-interface": {
      "type": "object",
      "description": "ExtensionInterface class for @see \\Magento\\Sales\\Api\\Data\\OrderItemInterface",
      "properties": {
        "gift_message": {
          "$ref": "#/definitions/gift-message-data-message-interface"
        },
        "vertex_tax_codes": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "invoice_text_codes": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "tax_codes": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "sales-data-order-address-interface": {
      "type": "object",
      "description": "Order address interface. An order is a document that a web store issues to a customer. Magento generates a sales order that lists the product items, billing and shipping addresses, and shipping and payment methods. A corresponding external document, known as a purchase order, is emailed to the customer.",
      "properties": {
        "address_type": {
          "type": "string",
          "description": "Address type."
        },
        "city": {
          "type": "string",
          "description": "City."
        },
        "company": {
          "type": "string",
          "description": "Company."
        },
        "country_id": {
          "type": "string",
          "description": "Country ID."
        },
        "customer_address_id": {
          "type": "integer",
          "description": "Country address ID."
        },
        "customer_id": {
          "type": "integer",
          "description": "Customer ID."
        },
        "email": {
          "type": "string",
          "description": "Email address."
        },
        "entity_id": {
          "type": "integer",
          "description": "Order address ID."
        },
        "fax": {
          "type": "string",
          "description": "Fax number."
        },
        "firstname": {
          "type": "string",
          "description": "First name."
        },
        "lastname": {
          "type": "string",
          "description": "Last name."
        },
        "middlename": {
          "type": "string",
          "description": "Middle name."
        },
        "parent_id": {
          "type": "integer",
          "description": "Parent ID."
        },
        "postcode": {
          "type": "string",
          "description": "Postal code."
        },
        "prefix": {
          "type": "string",
          "description": "Prefix."
        },
        "region": {
          "type": "string",
          "description": "Region."
        },
        "region_code": {
          "type": "string",
          "description": "Region code."
        },
        "region_id": {
          "type": "integer",
          "description": "Region ID."
        },
        "street": {
          "type": "array",
          "description": "Array of any street values. Otherwise, null.",
          "items": {
            "type": "string"
          }
        },
        "suffix": {
          "type": "string",
          "description": "Suffix."
        },
        "telephone": {
          "type": "string",
          "description": "Telephone number."
        },
        "vat_id": {
          "type": "string",
          "description": "VAT ID."
        },
        "vat_is_valid": {
          "type": "integer",
          "description": "VAT-is-valid flag value."
        },
        "vat_request_date": {
          "type": "string",
          "description": "VAT request date."
        },
        "vat_request_id": {
          "type": "string",
          "description": "VAT request ID."
        },
        "vat_request_success": {
          "type": "integer",
          "description": "VAT-request-success flag value."
        },
        "extension_attributes": {
          "$ref": "#/definitions/sales-data-order-address-extension-interface"
        }
      },
      "required": [
        "address_type",
        "city",
        "country_id",
        "firstname",
        "lastname",
        "postcode",
        "telephone"
      ]
    },
    "sales-data-order-address-extension-interface": {
      "type": "object",
      "description": "ExtensionInterface class for @see \\Magento\\Sales\\Api\\Data\\OrderAddressInterface",
      "properties": {
        "checkout_fields": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/framework-attribute-interface"
          }
        }
      }
    },
    "sales-data-order-payment-interface": {
      "type": "object",
      "description": "Order payment interface. An order is a document that a web store issues to a customer. Magento generates a sales order that lists the product items, billing and shipping addresses, and shipping and payment methods. A corresponding external document, known as a purchase order, is emailed to the customer.",
      "properties": {
        "account_status": {
          "type": "string",
          "description": "Account status."
        },
        "additional_data": {
          "type": "string",
          "description": "Additional data."
        },
        "additional_information": {
          "type": "array",
          "description": "Array of additional information.",
          "items": {
            "type": "string"
          }
        },
        "address_status": {
          "type": "string",
          "description": "Address status."
        },
        "amount_authorized": {
          "type": "number",
          "description": "Amount authorized."
        },
        "amount_canceled": {
          "type": "number",
          "description": "Amount canceled."
        },
        "amount_ordered": {
          "type": "number",
          "description": "Amount ordered."
        },
        "amount_paid": {
          "type": "number",
          "description": "Amount paid."
        },
        "amount_refunded": {
          "type": "number",
          "description": "Amount refunded."
        },
        "anet_trans_method": {
          "type": "string",
          "description": "Anet transaction method."
        },
        "base_amount_authorized": {
          "type": "number",
          "description": "Base amount authorized."
        },
        "base_amount_canceled": {
          "type": "number",
          "description": "Base amount canceled."
        },
        "base_amount_ordered": {
          "type": "number",
          "description": "Base amount ordered."
        },
        "base_amount_paid": {
          "type": "number",
          "description": "Base amount paid."
        },
        "base_amount_paid_online": {
          "type": "number",
          "description": "Base amount paid online."
        },
        "base_amount_refunded": {
          "type": "number",
          "description": "Base amount refunded."
        },
        "base_amount_refunded_online": {
          "type": "number",
          "description": "Base amount refunded online."
        },
        "base_shipping_amount": {
          "type": "number",
          "description": "Base shipping amount."
        },
        "base_shipping_captured": {
          "type": "number",
          "description": "Base shipping captured amount."
        },
        "base_shipping_refunded": {
          "type": "number",
          "description": "Base shipping refunded amount."
        },
        "cc_approval": {
          "type": "string",
          "description": "Credit card approval."
        },
        "cc_avs_status": {
          "type": "string",
          "description": "Credit card avs status."
        },
        "cc_cid_status": {
          "type": "string",
          "description": "Credit card CID status."
        },
        "cc_debug_request_body": {
          "type": "string",
          "description": "Credit card debug request body."
        },
        "cc_debug_response_body": {
          "type": "string",
          "description": "Credit card debug response body."
        },
        "cc_debug_response_serialized": {
          "type": "string",
          "description": "Credit card debug response serialized."
        },
        "cc_exp_month": {
          "type": "string",
          "description": "Credit card expiration month."
        },
        "cc_exp_year": {
          "type": "string",
          "description": "Credit card expiration year."
        },
        "cc_last4": {
          "type": "string",
          "description": "Last four digits of the credit card."
        },
        "cc_number_enc": {
          "type": "string",
          "description": "Encrypted credit card number."
        },
        "cc_owner": {
          "type": "string",
          "description": "Credit card number."
        },
        "cc_secure_verify": {
          "type": "string",
          "description": "Credit card secure verify."
        },
        "cc_ss_issue": {
          "type": "string",
          "description": "Credit card SS issue."
        },
        "cc_ss_start_month": {
          "type": "string",
          "description": "Credit card SS start month."
        },
        "cc_ss_start_year": {
          "type": "string",
          "description": "Credit card SS start year."
        },
        "cc_status": {
          "type": "string",
          "description": "Credit card status."
        },
        "cc_status_description": {
          "type": "string",
          "description": "Credit card status description."
        },
        "cc_trans_id": {
          "type": "string",
          "description": "Credit card transaction ID."
        },
        "cc_type": {
          "type": "string",
          "description": "Credit card type."
        },
        "echeck_account_name": {
          "type": "string",
          "description": "eCheck account name."
        },
        "echeck_account_type": {
          "type": "string",
          "description": "eCheck account type."
        },
        "echeck_bank_name": {
          "type": "string",
          "description": "eCheck bank name."
        },
        "echeck_routing_number": {
          "type": "string",
          "description": "eCheck routing number."
        },
        "echeck_type": {
          "type": "string",
          "description": "eCheck type."
        },
        "entity_id": {
          "type": "integer",
          "description": "Entity ID."
        },
        "last_trans_id": {
          "type": "string",
          "description": "Last transaction ID."
        },
        "method": {
          "type": "string",
          "description": "Method."
        },
        "parent_id": {
          "type": "integer",
          "description": "Parent ID."
        },
        "po_number": {
          "type": "string",
          "description": "PO number."
        },
        "protection_eligibility": {
          "type": "string",
          "description": "Protection eligibility."
        },
        "quote_payment_id": {
          "type": "integer",
          "description": "Quote payment ID."
        },
        "shipping_amount": {
          "type": "number",
          "description": "Shipping amount."
        },
        "shipping_captured": {
          "type": "number",
          "description": "Shipping captured."
        },
        "shipping_refunded": {
          "type": "number",
          "description": "Shipping refunded."
        },
        "extension_attributes": {
          "$ref": "#/definitions/sales-data-order-payment-extension-interface"
        }
      },
      "required": [
        "account_status",
        "additional_information",
        "cc_last4",
        "method"
      ]
    },
    "sales-data-order-payment-extension-interface": {
      "type": "object",
      "description": "ExtensionInterface class for @see \\Magento\\Sales\\Api\\Data\\OrderPaymentInterface",
      "properties": {
        "vault_payment_token": {
          "$ref": "#/definitions/vault-data-payment-token-interface"
        }
      }
    },
    "vault-data-payment-token-interface": {
      "type": "object",
      "description": "Gateway vault payment token interface.",
      "properties": {
        "entity_id": {
          "type": "integer",
          "description": "Entity ID."
        },
        "customer_id": {
          "type": "integer",
          "description": "Customer ID."
        },
        "public_hash": {
          "type": "string",
          "description": "Public hash"
        },
        "payment_method_code": {
          "type": "string",
          "description": "Payment method code"
        },
        "type": {
          "type": "string",
          "description": "Type"
        },
        "created_at": {
          "type": "string",
          "description": "Token creation timestamp"
        },
        "expires_at": {
          "type": "string",
          "description": "Token expiration timestamp"
        },
        "gateway_token": {
          "type": "string",
          "description": "Gateway token ID"
        },
        "token_details": {
          "type": "string",
          "description": "Token details"
        },
        "is_active": {
          "type": "boolean",
          "description": "Is active."
        },
        "is_visible": {
          "type": "boolean",
          "description": "Is visible."
        }
      },
      "required": [
        "public_hash",
        "payment_method_code",
        "type",
        "gateway_token",
        "token_details",
        "is_active",
        "is_visible"
      ]
    },
    "sales-data-order-status-history-interface": {
      "type": "object",
      "description": "Order status history interface. An order is a document that a web store issues to a customer. Magento generates a sales order that lists the product items, billing and shipping addresses, and shipping and payment methods. A corresponding external document, known as a purchase order, is emailed to the customer.",
      "properties": {
        "comment": {
          "type": "string",
          "description": "Comment."
        },
        "created_at": {
          "type": "string",
          "description": "Created-at timestamp."
        },
        "entity_id": {
          "type": "integer",
          "description": "Order status history ID."
        },
        "entity_name": {
          "type": "string",
          "description": "Entity name."
        },
        "is_customer_notified": {
          "type": "integer",
          "description": "Is-customer-notified flag value."
        },
        "is_visible_on_front": {
          "type": "integer",
          "description": "Is-visible-on-storefront flag value."
        },
        "parent_id": {
          "type": "integer",
          "description": "Parent ID."
        },
        "status": {
          "type": "string",
          "description": "Status."
        },
        "extension_attributes": {
          "$ref": "#/definitions/sales-data-order-status-history-extension-interface"
        }
      },
      "required": [
        "comment",
        "is_customer_notified",
        "is_visible_on_front",
        "parent_id"
      ]
    },
    "sales-data-order-status-history-extension-interface": {
      "type": "object",
      "description": "ExtensionInterface class for @see \\Magento\\Sales\\Api\\Data\\OrderStatusHistoryInterface"
    },
    "sales-data-order-extension-interface": {
      "type": "object",
      "description": "ExtensionInterface class for @see \\Magento\\Sales\\Api\\Data\\OrderInterface",
      "properties": {
        "shipping_assignments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/sales-data-shipping-assignment-interface"
          }
        },
        "payment_additional_info": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/payment-data-payment-additional-info-interface"
          }
        },
        "applied_taxes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/tax-data-order-tax-details-applied-tax-interface"
          }
        },
        "item_applied_taxes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/tax-data-order-tax-details-item-interface"
          }
        },
        "converting_from_quote": {
          "type": "boolean"
        },
        "gift_message": {
          "$ref": "#/definitions/gift-message-data-message-interface"
        },
        "amazon_order_reference_id": {
          "$ref": "#/definitions/amazon-payment-data-order-link-interface"
        }
      }
    },
    "sales-data-shipping-assignment-interface": {
      "type": "object",
      "description": "Interface ShippingAssignmentInterface",
      "properties": {
        "shipping": {
          "$ref": "#/definitions/sales-data-shipping-interface"
        },
        "items": {
          "type": "array",
          "description": "Order items of shipping assignment",
          "items": {
            "$ref": "#/definitions/sales-data-order-item-interface"
          }
        },
        "stock_id": {
          "type": "integer",
          "description": "Stock id"
        },
        "extension_attributes": {
          "$ref": "#/definitions/sales-data-shipping-assignment-extension-interface"
        }
      },
      "required": [
        "shipping",
        "items"
      ]
    },
    "sales-data-shipping-interface": {
      "type": "object",
      "description": "Interface ShippingInterface",
      "properties": {
        "address": {
          "$ref": "#/definitions/sales-data-order-address-interface"
        },
        "method": {
          "type": "string",
          "description": "Shipping method"
        },
        "total": {
          "$ref": "#/definitions/sales-data-total-interface"
        },
        "extension_attributes": {
          "$ref": "#/definitions/sales-data-shipping-extension-interface"
        }
      }
    },
    "sales-data-total-interface": {
      "type": "object",
      "description": "Interface TotalInterface",
      "properties": {
        "base_shipping_amount": {
          "type": "number",
          "description": "Base shipping amount."
        },
        "base_shipping_canceled": {
          "type": "number",
          "description": "Base shipping canceled."
        },
        "base_shipping_discount_amount": {
          "type": "number",
          "description": "Base shipping discount amount."
        },
        "base_shipping_discount_tax_compensation_amnt": {
          "type": "number",
          "description": "Base shipping discount tax compensation amount."
        },
        "base_shipping_incl_tax": {
          "type": "number",
          "description": "Base shipping including tax."
        },
        "base_shipping_invoiced": {
          "type": "number",
          "description": "Base shipping invoiced."
        },
        "base_shipping_refunded": {
          "type": "number",
          "description": "Base shipping refunded."
        },
        "base_shipping_tax_amount": {
          "type": "number",
          "description": "Base shipping tax amount."
        },
        "base_shipping_tax_refunded": {
          "type": "number",
          "description": "Base shipping tax refunded."
        },
        "shipping_amount": {
          "type": "number",
          "description": "Shipping amount."
        },
        "shipping_canceled": {
          "type": "number",
          "description": "Shipping canceled amount."
        },
        "shipping_discount_amount": {
          "type": "number",
          "description": "Shipping discount amount."
        },
        "shipping_discount_tax_compensation_amount": {
          "type": "number",
          "description": "Shipping discount tax compensation amount."
        },
        "shipping_incl_tax": {
          "type": "number",
          "description": "Shipping including tax amount."
        },
        "shipping_invoiced": {
          "type": "number",
          "description": "Shipping invoiced amount."
        },
        "shipping_refunded": {
          "type": "number",
          "description": "Shipping refunded amount."
        },
        "shipping_tax_amount": {
          "type": "number",
          "description": "Shipping tax amount."
        },
        "shipping_tax_refunded": {
          "type": "number",
          "description": "Shipping tax refunded amount."
        },
        "extension_attributes": {
          "$ref": "#/definitions/sales-data-total-extension-interface"
        }
      }
    },
    "sales-data-total-extension-interface": {
      "type": "object",
      "description": "ExtensionInterface class for @see \\Magento\\Sales\\Api\\Data\\TotalInterface"
    },
    "sales-data-shipping-extension-interface": {
      "type": "object",
      "description": "ExtensionInterface class for @see \\Magento\\Sales\\Api\\Data\\ShippingInterface",
      "properties": {
        "ext_order_id": {
          "type": "string"
        },
        "shipping_experience": {
          "$ref": "#/definitions/temando-shipping-data-order-shipping-experience-interface"
        },
        "collection_point": {
          "$ref": "#/definitions/temando-shipping-data-delivery-order-collection-point-interface"
        }
      }
    },
    "temando-shipping-data-order-shipping-experience-interface": {
      "type": "object",
      "description": "Temando Shipping Experience Interface Local representation of a shipping rate in checkout. A set of shipping experiences is the result of creating an order at the Temando platform. (!) Needs to reside in Api namespace because selected shipping experience is exposed to public as a ShippingInterface extension attribute.",
      "properties": {
        "label": {
          "type": "string"
        },
        "code": {
          "type": "string"
        },
        "cost": {
          "type": "number"
        }
      },
      "required": [
        "label",
        "code",
        "cost"
      ]
    },
    "temando-shipping-data-delivery-order-collection-point-interface": {
      "type": "object",
      "description": "Temando Order Collection Point Interface – Order Details/Fulfillment",
      "properties": {
        "recipient_address_id": {
          "type": "integer"
        },
        "collection_point_id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "country": {
          "type": "string"
        },
        "region": {
          "type": "string"
        },
        "postcode": {
          "type": "string"
        },
        "city": {
          "type": "string"
        },
        "street": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "recipient_address_id",
        "collection_point_id",
        "name",
        "country",
        "region",
        "postcode",
        "city",
        "street"
      ]
    },
    "sales-data-shipping-assignment-extension-interface": {
      "type": "object",
      "description": "ExtensionInterface class for @see \\Magento\\Sales\\Api\\Data\\ShippingAssignmentInterface"
    },
    "payment-data-payment-additional-info-interface": {
      "type": "object",
      "description": "Payment additional info interface.",
      "properties": {
        "key": {
          "type": "string",
          "description": "Object key"
        },
        "value": {
          "type": "string",
          "description": "Object value"
        }
      },
      "required": [
        "key",
        "value"
      ]
    },
    "tax-data-order-tax-details-applied-tax-interface": {
      "type": "object",
      "description": "Interface OrderTaxDetailsAppliedTaxInterface",
      "properties": {
        "code": {
          "type": "string",
          "description": "Code"
        },
        "title": {
          "type": "string",
          "description": "Title"
        },
        "percent": {
          "type": "number",
          "description": "Tax Percent"
        },
        "amount": {
          "type": "number",
          "description": "Tax amount"
        },
        "base_amount": {
          "type": "number",
          "description": "Tax amount in base currency"
        },
        "extension_attributes": {
          "$ref": "#/definitions/tax-data-order-tax-details-applied-tax-extension-interface"
        }
      },
      "required": [
        "amount",
        "base_amount"
      ]
    },
    "tax-data-order-tax-details-applied-tax-extension-interface": {
      "type": "object",
      "description": "ExtensionInterface class for @see \\Magento\\Tax\\Api\\Data\\OrderTaxDetailsAppliedTaxInterface",
      "properties": {
        "rates": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/tax-data-applied-tax-rate-interface"
          }
        }
      }
    },
    "tax-data-applied-tax-rate-interface": {
      "type": "object",
      "description": "Applied tax rate interface.",
      "properties": {
        "code": {
          "type": "string",
          "description": "Code"
        },
        "title": {
          "type": "string",
          "description": "Title"
        },
        "percent": {
          "type": "number",
          "description": "Tax Percent"
        },
        "extension_attributes": {
          "$ref": "#/definitions/tax-data-applied-tax-rate-extension-interface"
        }
      }
    },
    "tax-data-applied-tax-rate-extension-interface": {
      "type": "object",
      "description": "ExtensionInterface class for @see \\Magento\\Tax\\Api\\Data\\AppliedTaxRateInterface"
    },
    "tax-data-order-tax-details-item-interface": {
      "type": "object",
      "description": "Interface OrderTaxDetailsItemInterface",
      "properties": {
        "type": {
          "type": "string",
          "description": "Type (shipping, product, weee, gift wrapping, etc)"
        },
        "item_id": {
          "type": "integer",
          "description": "Item id if this item is a product"
        },
        "associated_item_id": {
          "type": "integer",
          "description": "Associated item id if this item is associated with another item, null otherwise"
        },
        "applied_taxes": {
          "type": "array",
          "description": "Applied taxes",
          "items": {
            "$ref": "#/definitions/tax-data-order-tax-details-applied-tax-interface"
          }
        },
        "extension_attributes": {
          "$ref": "#/definitions/tax-data-order-tax-details-item-extension-interface"
        }
      }
    },
    "tax-data-order-tax-details-item-extension-interface": {
      "type": "object",
      "description": "ExtensionInterface class for @see \\Magento\\Tax\\Api\\Data\\OrderTaxDetailsItemInterface"
    },
    "amazon-payment-data-order-link-interface": {
      "type": "object",
      "description": "",
      "properties": {
        "amazon_order_reference_id": {
          "type": "string",
          "description": "Amazon order reference id"
        },
        "order_id": {
          "type": "integer",
          "description": "Order id"
        }
      },
      "required": [
        "amazon_order_reference_id",
        "order_id"
      ]
    },
    "sales-data-order-search-result-interface": {
      "type": "object",
      "description": "Order search result interface. An order is a document that a web store issues to a customer. Magento generates a sales order that lists the product items, billing and shipping addresses, and shipping and payment methods. A corresponding external document, known as a purchase order, is emailed to the customer.",
      "properties": {
        "items": {
          "type": "array",
          "description": "Array of collection items.",
          "items": {
            "$ref": "#/definitions/sales-data-order-interface"
          }
        },
        "search_criteria": {
          "$ref": "#/definitions/framework-search-criteria-interface"
        },
        "total_count": {
          "type": "integer",
          "description": "Total count."
        }
      },
      "required": [
        "items",
        "search_criteria",
        "total_count"
      ]
    },
    "sales-data-order-status-history-search-result-interface": {
      "type": "object",
      "description": "Order status history search result interface. An order is a document that a web store issues to a customer. Magento generates a sales order that lists the product items, billing and shipping addresses, and shipping and payment methods. A corresponding external document, known as a purchase order, is emailed to the customer.",
      "properties": {
        "items": {
          "type": "array",
          "description": "Array of collection items.",
          "items": {
            "$ref": "#/definitions/sales-data-order-status-history-interface"
          }
        },
        "search_criteria": {
          "$ref": "#/definitions/framework-search-criteria-interface"
        },
        "total_count": {
          "type": "integer",
          "description": "Total count."
        }
      },
      "required": [
        "items",
        "search_criteria",
        "total_count"
      ]
    },
    "sales-data-order-item-search-result-interface": {
      "type": "object",
      "description": "Order item search result interface. An order is a document that a web store issues to a customer. Magento generates a sales order that lists the product items, billing and shipping addresses, and shipping and payment methods. A corresponding external document, known as a purchase order, is emailed to the customer.",
      "properties": {
        "items": {
          "type": "array",
          "description": "Array of collection items.",
          "items": {
            "$ref": "#/definitions/sales-data-order-item-interface"
          }
        },
        "search_criteria": {
          "$ref": "#/definitions/framework-search-criteria-interface"
        },
        "total_count": {
          "type": "integer",
          "description": "Total count."
        }
      },
      "required": [
        "items",
        "search_criteria",
        "total_count"
      ]
    },
    "sales-data-invoice-interface": {
      "type": "object",
      "description": "Invoice interface. An invoice is a record of the receipt of payment for an order.",
      "properties": {
        "base_currency_code": {
          "type": "string",
          "description": "Base currency code."
        },
        "base_discount_amount": {
          "type": "number",
          "description": "Base discount amount."
        },
        "base_grand_total": {
          "type": "number",
          "description": "Base grand total."
        },
        "base_discount_tax_compensation_amount": {
          "type": "number",
          "description": "Base discount tax compensation amount."
        },
        "base_shipping_amount": {
          "type": "number",
          "description": "Base shipping amount."
        },
        "base_shipping_discount_tax_compensation_amnt": {
          "type": "number",
          "description": "Base shipping discount tax compensation amount."
        },
        "base_shipping_incl_tax": {
          "type": "number",
          "description": "Base shipping including tax."
        },
        "base_shipping_tax_amount": {
          "type": "number",
          "description": "Base shipping tax amount."
        },
        "base_subtotal": {
          "type": "number",
          "description": "Base subtotal."
        },
        "base_subtotal_incl_tax": {
          "type": "number",
          "description": "Base subtotal including tax."
        },
        "base_tax_amount": {
          "type": "number",
          "description": "Base tax amount."
        },
        "base_total_refunded": {
          "type": "number",
          "description": "Base total refunded."
        },
        "base_to_global_rate": {
          "type": "number",
          "description": "Base-to-global rate."
        },
        "base_to_order_rate": {
          "type": "number",
          "description": "Base-to-order rate."
        },
        "billing_address_id": {
          "type": "integer",
          "description": "Billing address ID."
        },
        "can_void_flag": {
          "type": "integer",
          "description": "Can void flag value."
        },
        "created_at": {
          "type": "string",
          "description": "Created-at timestamp."
        },
        "discount_amount": {
          "type": "number",
          "description": "Discount amount."
        },
        "discount_description": {
          "type": "string",
          "description": "Discount description."
        },
        "email_sent": {
          "type": "integer",
          "description": "Email-sent flag value."
        },
        "entity_id": {
          "type": "integer",
          "description": "Invoice ID."
        },
        "global_currency_code": {
          "type": "string",
          "description": "Global currency code."
        },
        "grand_total": {
          "type": "number",
          "description": "Grand total."
        },
        "discount_tax_compensation_amount": {
          "type": "number",
          "description": "Discount tax compensation amount."
        },
        "increment_id": {
          "type": "string",
          "description": "Increment ID."
        },
        "is_used_for_refund": {
          "type": "integer",
          "description": "Is-used-for-refund flag value."
        },
        "order_currency_code": {
          "type": "string",
          "description": "Order currency code."
        },
        "order_id": {
          "type": "integer",
          "description": "Order ID."
        },
        "shipping_address_id": {
          "type": "integer",
          "description": "Shipping address ID."
        },
        "shipping_amount": {
          "type": "number",
          "description": "Shipping amount."
        },
        "shipping_discount_tax_compensation_amount": {
          "type": "number",
          "description": "Shipping discount tax compensation amount."
        },
        "shipping_incl_tax": {
          "type": "number",
          "description": "Shipping including tax."
        },
        "shipping_tax_amount": {
          "type": "number",
          "description": "Shipping tax amount."
        },
        "state": {
          "type": "integer",
          "description": "State."
        },
        "store_currency_code": {
          "type": "string",
          "description": "Store currency code."
        },
        "store_id": {
          "type": "integer",
          "description": "Store ID."
        },
        "store_to_base_rate": {
          "type": "number",
          "description": "Store-to-base rate."
        },
        "store_to_order_rate": {
          "type": "number",
          "description": "Store-to-order rate."
        },
        "subtotal": {
          "type": "number",
          "description": "Subtotal."
        },
        "subtotal_incl_tax": {
          "type": "number",
          "description": "Subtotal including tax."
        },
        "tax_amount": {
          "type": "number",
          "description": "Tax amount."
        },
        "total_qty": {
          "type": "number",
          "description": "Total quantity."
        },
        "transaction_id": {
          "type": "string",
          "description": "Transaction ID."
        },
        "updated_at": {
          "type": "string",
          "description": "Updated-at timestamp."
        },
        "items": {
          "type": "array",
          "description": "Array of invoice items.",
          "items": {
            "$ref": "#/definitions/sales-data-invoice-item-interface"
          }
        },
        "comments": {
          "type": "array",
          "description": "Array of any invoice comments. Otherwise, null.",
          "items": {
            "$ref": "#/definitions/sales-data-invoice-comment-interface"
          }
        },
        "extension_attributes": {
          "$ref": "#/definitions/sales-data-invoice-extension-interface"
        }
      },
      "required": [
        "order_id",
        "total_qty",
        "items"
      ]
    },
    "sales-data-invoice-item-interface": {
      "type": "object",
      "description": "Invoice item interface. An invoice is a record of the receipt of payment for an order. An invoice item is a purchased item in an invoice.",
      "properties": {
        "additional_data": {
          "type": "string",
          "description": "Additional data."
        },
        "base_cost": {
          "type": "number",
          "description": "Base cost."
        },
        "base_discount_amount": {
          "type": "number",
          "description": "Base discount amount."
        },
        "base_discount_tax_compensation_amount": {
          "type": "number",
          "description": "Base discount tax compensation amount."
        },
        "base_price": {
          "type": "number",
          "description": "Base price."
        },
        "base_price_incl_tax": {
          "type": "number",
          "description": "Base price including tax."
        },
        "base_row_total": {
          "type": "number",
          "description": "Base row total."
        },
        "base_row_total_incl_tax": {
          "type": "number",
          "description": "Base row total including tax."
        },
        "base_tax_amount": {
          "type": "number",
          "description": "Base tax amount."
        },
        "description": {
          "type": "string",
          "description": "Description."
        },
        "discount_amount": {
          "type": "number",
          "description": "Discount amount."
        },
        "entity_id": {
          "type": "integer",
          "description": "Invoice item ID."
        },
        "discount_tax_compensation_amount": {
          "type": "number",
          "description": "Discount tax compensation amount."
        },
        "name": {
          "type": "string",
          "description": "Name."
        },
        "parent_id": {
          "type": "integer",
          "description": "Parent ID."
        },
        "price": {
          "type": "number",
          "description": "Price."
        },
        "price_incl_tax": {
          "type": "number",
          "description": "Price including tax."
        },
        "product_id": {
          "type": "integer",
          "description": "Product ID."
        },
        "row_total": {
          "type": "number",
          "description": "Row total."
        },
        "row_total_incl_tax": {
          "type": "number",
          "description": "Row total including tax."
        },
        "sku": {
          "type": "string",
          "description": "SKU."
        },
        "tax_amount": {
          "type": "number",
          "description": "Tax amount."
        },
        "extension_attributes": {
          "$ref": "#/definitions/sales-data-invoice-item-extension-interface"
        },
        "order_item_id": {
          "type": "integer",
          "description": "Order item ID."
        },
        "qty": {
          "type": "number",
          "description": "Quantity."
        }
      },
      "required": [
        "sku",
        "order_item_id",
        "qty"
      ]
    },
    "sales-data-invoice-item-extension-interface": {
      "type": "object",
      "description": "ExtensionInterface class for @see \\Magento\\Sales\\Api\\Data\\InvoiceItemInterface",
      "properties": {
        "vertex_tax_codes": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "invoice_text_codes": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "tax_codes": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "sales-data-invoice-comment-interface": {
      "type": "object",
      "description": "Invoice comment interface. An invoice is a record of the receipt of payment for an order. An invoice can include comments that detail the invoice history.",
      "properties": {
        "is_customer_notified": {
          "type": "integer",
          "description": "Is-customer-notified flag value."
        },
        "parent_id": {
          "type": "integer",
          "description": "Parent ID."
        },
        "extension_attributes": {
          "$ref": "#/definitions/sales-data-invoice-comment-extension-interface"
        },
        "comment": {
          "type": "string",
          "description": "Comment."
        },
        "is_visible_on_front": {
          "type": "integer",
          "description": "Is-visible-on-storefront flag value."
        },
        "created_at": {
          "type": "string",
          "description": "Created-at timestamp."
        },
        "entity_id": {
          "type": "integer",
          "description": "Invoice ID."
        }
      },
      "required": [
        "is_customer_notified",
        "parent_id",
        "comment",
        "is_visible_on_front"
      ]
    },
    "sales-data-invoice-comment-extension-interface": {
      "type": "object",
      "description": "ExtensionInterface class for @see \\Magento\\Sales\\Api\\Data\\InvoiceCommentInterface"
    },
    "sales-data-invoice-extension-interface": {
      "type": "object",
      "description": "ExtensionInterface class for @see \\Magento\\Sales\\Api\\Data\\InvoiceInterface",
      "properties": {
        "vertex_tax_calculation_shipping_address": {
          "$ref": "#/definitions/sales-data-order-address-interface"
        },
        "vertex_tax_calculation_billing_address": {
          "$ref": "#/definitions/sales-data-order-address-interface"
        },
        "vertex_tax_calculation_order": {
          "$ref": "#/definitions/sales-data-order-interface"
        },
        "gw_base_price": {
          "type": "string"
        },
        "gw_price": {
          "type": "string"
        },
        "gw_items_base_price": {
          "type": "string"
        },
        "gw_items_price": {
          "type": "string"
        },
        "gw_card_base_price": {
          "type": "string"
        },
        "gw_card_price": {
          "type": "string"
        },
        "gw_base_tax_amount": {
          "type": "string"
        },
        "gw_tax_amount": {
          "type": "string"
        },
        "gw_items_base_tax_amount": {
          "type": "string"
        },
        "gw_items_tax_amount": {
          "type": "string"
        },
        "gw_card_base_tax_amount": {
          "type": "string"
        },
        "gw_card_tax_amount": {
          "type": "string"
        }
      }
    },
    "sales-data-invoice-search-result-interface": {
      "type": "object",
      "description": "Invoice search result interface. An invoice is a record of the receipt of payment for an order.",
      "properties": {
        "items": {
          "type": "array",
          "description": "Array of collection items.",
          "items": {
            "$ref": "#/definitions/sales-data-invoice-interface"
          }
        },
        "search_criteria": {
          "$ref": "#/definitions/framework-search-criteria-interface"
        },
        "total_count": {
          "type": "integer",
          "description": "Total count."
        }
      },
      "required": [
        "items",
        "search_criteria",
        "total_count"
      ]
    },
    "sales-data-invoice-comment-search-result-interface": {
      "type": "object",
      "description": "Invoice comment search result interface. An invoice is a record of the receipt of payment for an order. An invoice can include comments that detail the invoice history.",
      "properties": {
        "items": {
          "type": "array",
          "description": "Array of collection items.",
          "items": {
            "$ref": "#/definitions/sales-data-invoice-comment-interface"
          }
        },
        "search_criteria": {
          "$ref": "#/definitions/framework-search-criteria-interface"
        },
        "total_count": {
          "type": "integer",
          "description": "Total count."
        }
      },
      "required": [
        "items",
        "search_criteria",
        "total_count"
      ]
    },
    "sales-data-creditmemo-item-creation-interface": {
      "type": "object",
      "description": "Interface CreditmemoItemCreationInterface",
      "properties": {
        "extension_attributes": {
          "$ref": "#/definitions/sales-data-creditmemo-item-creation-extension-interface"
        },
        "order_item_id": {
          "type": "integer",
          "description": "Order item ID."
        },
        "qty": {
          "type": "number",
          "description": "Quantity."
        }
      },
      "required": [
        "order_item_id",
        "qty"
      ]
    },
    "sales-data-creditmemo-item-creation-extension-interface": {
      "type": "object",
      "description": "ExtensionInterface class for @see \\Magento\\Sales\\Api\\Data\\CreditmemoItemCreationInterface"
    },
    "sales-data-creditmemo-comment-creation-interface": {
      "type": "object",
      "description": "Interface CreditmemoCommentCreationInterface",
      "properties": {
        "extension_attributes": {
          "$ref": "#/definitions/sales-data-creditmemo-comment-creation-extension-interface"
        },
        "comment": {
          "type": "string",
          "description": "Comment."
        },
        "is_visible_on_front": {
          "type": "integer",
          "description": "Is-visible-on-storefront flag value."
        }
      },
      "required": [
        "comment",
        "is_visible_on_front"
      ]
    },
    "sales-data-creditmemo-comment-creation-extension-interface": {
      "type": "object",
      "description": "ExtensionInterface class for @see \\Magento\\Sales\\Api\\Data\\CreditmemoCommentCreationInterface"
    },
    "sales-data-creditmemo-creation-arguments-interface": {
      "type": "object",
      "description": "Interface CreditmemoCreationArgumentsInterface",
      "properties": {
        "shipping_amount": {
          "type": "number",
          "description": "Credit memo shipping amount."
        },
        "adjustment_positive": {
          "type": "number",
          "description": "Credit memo positive adjustment."
        },
        "adjustment_negative": {
          "type": "number",
          "description": "Credit memo negative adjustment."
        },
        "extension_attributes": {
          "$ref": "#/definitions/sales-data-creditmemo-creation-arguments-extension-interface"
        }
      }
    },
    "sales-data-creditmemo-creation-arguments-extension-interface": {
      "type": "object",
      "description": "ExtensionInterface class for @see \\Magento\\Sales\\Api\\Data\\CreditmemoCreationArgumentsInterface",
      "properties": {
        "return_to_stock_items": {
          "type": "array",
          "items": {
            "type": "integer"
          }
        }
      }
    },
    "sales-data-creditmemo-comment-search-result-interface": {
      "type": "object",
      "description": "Credit memo comment search result interface. After a customer places and pays for an order and an invoice has been issued, the merchant can create a credit memo to refund all or part of the amount paid for any returned or undelivered items. The memo restores funds to the customer account so that the customer can make future purchases. A credit memo usually includes comments that detail why the credit memo amount was credited to the customer.",
      "properties": {
        "items": {
          "type": "array",
          "description": "Array of collection items.",
          "items": {
            "$ref": "#/definitions/sales-data-creditmemo-comment-interface"
          }
        },
        "search_criteria": {
          "$ref": "#/definitions/framework-search-criteria-interface"
        },
        "total_count": {
          "type": "integer",
          "description": "Total count."
        }
      },
      "required": [
        "items",
        "search_criteria",
        "total_count"
      ]
    },
    "sales-data-creditmemo-comment-interface": {
      "type": "object",
      "description": "Credit memo comment interface. After a customer places and pays for an order and an invoice has been issued, the merchant can create a credit memo to refund all or part of the amount paid for any returned or undelivered items. The memo restores funds to the customer account so that the customer can make future purchases. A credit memo usually includes comments that detail why the credit memo amount was credited to the customer.",
      "properties": {
        "comment": {
          "type": "string",
          "description": "Comment."
        },
        "created_at": {
          "type": "string",
          "description": "Created-at timestamp."
        },
        "entity_id": {
          "type": "integer",
          "description": "Credit memo ID."
        },
        "is_customer_notified": {
          "type": "integer",
          "description": "Is-customer-notified flag value."
        },
        "is_visible_on_front": {
          "type": "integer",
          "description": "Is-visible-on-storefront flag value."
        },
        "parent_id": {
          "type": "integer",
          "description": "Parent ID."
        },
        "extension_attributes": {
          "$ref": "#/definitions/sales-data-creditmemo-comment-extension-interface"
        }
      },
      "required": [
        "comment",
        "is_customer_notified",
        "is_visible_on_front",
        "parent_id"
      ]
    },
    "sales-data-creditmemo-comment-extension-interface": {
      "type": "object",
      "description": "ExtensionInterface class for @see \\Magento\\Sales\\Api\\Data\\CreditmemoCommentInterface"
    },
    "sales-data-creditmemo-interface": {
      "type": "object",
      "description": "Credit memo interface. After a customer places and pays for an order and an invoice has been issued, the merchant can create a credit memo to refund all or part of the amount paid for any returned or undelivered items. The memo restores funds to the customer account so that the customer can make future purchases.",
      "properties": {
        "adjustment": {
          "type": "number",
          "description": "Credit memo adjustment."
        },
        "adjustment_negative": {
          "type": "number",
          "description": "Credit memo negative adjustment."
        },
        "adjustment_positive": {
          "type": "number",
          "description": "Credit memo positive adjustment."
        },
        "base_adjustment": {
          "type": "number",
          "description": "Credit memo base adjustment."
        },
        "base_adjustment_negative": {
          "type": "number",
          "description": "Credit memo negative base adjustment."
        },
        "base_adjustment_positive": {
          "type": "number",
          "description": "Credit memo positive base adjustment."
        },
        "base_currency_code": {
          "type": "string",
          "description": "Credit memo base currency code."
        },
        "base_discount_amount": {
          "type": "number",
          "description": "Credit memo base discount amount."
        },
        "base_grand_total": {
          "type": "number",
          "description": "Credit memo base grand total."
        },
        "base_discount_tax_compensation_amount": {
          "type": "number",
          "description": "Credit memo base discount tax compensation amount."
        },
        "base_shipping_amount": {
          "type": "number",
          "description": "Credit memo base shipping amount."
        },
        "base_shipping_discount_tax_compensation_amnt": {
          "type": "number",
          "description": "Credit memo base shipping discount tax compensation amount."
        },
        "base_shipping_incl_tax": {
          "type": "number",
          "description": "Credit memo base shipping including tax."
        },
        "base_shipping_tax_amount": {
          "type": "number",
          "description": "Credit memo base shipping tax amount."
        },
        "base_subtotal": {
          "type": "number",
          "description": "Credit memo base subtotal."
        },
        "base_subtotal_incl_tax": {
          "type": "number",
          "description": "Credit memo base subtotal including tax."
        },
        "base_tax_amount": {
          "type": "number",
          "description": "Credit memo base tax amount."
        },
        "base_to_global_rate": {
          "type": "number",
          "description": "Credit memo base-to-global rate."
        },
        "base_to_order_rate": {
          "type": "number",
          "description": "Credit memo base-to-order rate."
        },
        "billing_address_id": {
          "type": "integer",
          "description": "Credit memo billing address ID."
        },
        "created_at": {
          "type": "string",
          "description": "Credit memo created-at timestamp."
        },
        "creditmemo_status": {
          "type": "integer",
          "description": "Credit memo status."
        },
        "discount_amount": {
          "type": "number",
          "description": "Credit memo discount amount."
        },
        "discount_description": {
          "type": "string",
          "description": "Credit memo discount description."
        },
        "email_sent": {
          "type": "integer",
          "description": "Credit memo email sent flag value."
        },
        "entity_id": {
          "type": "integer",
          "description": "Credit memo ID."
        },
        "global_currency_code": {
          "type": "string",
          "description": "Credit memo global currency code."
        },
        "grand_total": {
          "type": "number",
          "description": "Credit memo grand total."
        },
        "discount_tax_compensation_amount": {
          "type": "number",
          "description": "Credit memo discount tax compensation amount."
        },
        "increment_id": {
          "type": "string",
          "description": "Credit memo increment ID."
        },
        "invoice_id": {
          "type": "integer",
          "description": "Credit memo invoice ID."
        },
        "order_currency_code": {
          "type": "string",
          "description": "Credit memo order currency code."
        },
        "order_id": {
          "type": "integer",
          "description": "Credit memo order ID."
        },
        "shipping_address_id": {
          "type": "integer",
          "description": "Credit memo shipping address ID."
        },
        "shipping_amount": {
          "type": "number",
          "description": "Credit memo shipping amount."
        },
        "shipping_discount_tax_compensation_amount": {
          "type": "number",
          "description": "Credit memo shipping discount tax compensation amount."
        },
        "shipping_incl_tax": {
          "type": "number",
          "description": "Credit memo shipping including tax."
        },
        "shipping_tax_amount": {
          "type": "number",
          "description": "Credit memo shipping tax amount."
        },
        "state": {
          "type": "integer",
          "description": "Credit memo state."
        },
        "store_currency_code": {
          "type": "string",
          "description": "Credit memo store currency code."
        },
        "store_id": {
          "type": "integer",
          "description": "Credit memo store ID."
        },
        "store_to_base_rate": {
          "type": "number",
          "description": "Credit memo store-to-base rate."
        },
        "store_to_order_rate": {
          "type": "number",
          "description": "Credit memo store-to-order rate."
        },
        "subtotal": {
          "type": "number",
          "description": "Credit memo subtotal."
        },
        "subtotal_incl_tax": {
          "type": "number",
          "description": "Credit memo subtotal including tax."
        },
        "tax_amount": {
          "type": "number",
          "description": "Credit memo tax amount."
        },
        "transaction_id": {
          "type": "string",
          "description": "Credit memo transaction ID."
        },
        "updated_at": {
          "type": "string",
          "description": "Credit memo updated-at timestamp."
        },
        "items": {
          "type": "array",
          "description": "Array of credit memo items.",
          "items": {
            "$ref": "#/definitions/sales-data-creditmemo-item-interface"
          }
        },
        "comments": {
          "type": "array",
          "description": "Array of any credit memo comments. Otherwise, null.",
          "items": {
            "$ref": "#/definitions/sales-data-creditmemo-comment-interface"
          }
        },
        "extension_attributes": {
          "$ref": "#/definitions/sales-data-creditmemo-extension-interface"
        }
      },
      "required": [
        "order_id",
        "items"
      ]
    },
    "sales-data-creditmemo-item-interface": {
      "type": "object",
      "description": "Credit memo item interface. After a customer places and pays for an order and an invoice has been issued, the merchant can create a credit memo to refund all or part of the amount paid for any returned or undelivered items. The memo restores funds to the customer account so that the customer can make future purchases. A credit memo item is an invoiced item for which a merchant creates a credit memo.",
      "properties": {
        "additional_data": {
          "type": "string",
          "description": "Additional data."
        },
        "base_cost": {
          "type": "number",
          "description": "The base cost for a credit memo item."
        },
        "base_discount_amount": {
          "type": "number",
          "description": "The base discount amount for a credit memo item."
        },
        "base_discount_tax_compensation_amount": {
          "type": "number",
          "description": "The base discount tax compensation amount for a credit memo item."
        },
        "base_price": {
          "type": "number",
          "description": "The base price for a credit memo item."
        },
        "base_price_incl_tax": {
          "type": "number",
          "description": "Base price including tax."
        },
        "base_row_total": {
          "type": "number",
          "description": "Base row total."
        },
        "base_row_total_incl_tax": {
          "type": "number",
          "description": "Base row total including tax."
        },
        "base_tax_amount": {
          "type": "number",
          "description": "Base tax amount."
        },
        "base_weee_tax_applied_amount": {
          "type": "number",
          "description": "Base WEEE tax applied amount."
        },
        "base_weee_tax_applied_row_amnt": {
          "type": "number",
          "description": "Base WEEE tax applied row amount."
        },
        "base_weee_tax_disposition": {
          "type": "number",
          "description": "Base WEEE tax disposition."
        },
        "base_weee_tax_row_disposition": {
          "type": "number",
          "description": "Base WEEE tax row disposition."
        },
        "description": {
          "type": "string",
          "description": "Description."
        },
        "discount_amount": {
          "type": "number",
          "description": "Discount amount."
        },
        "entity_id": {
          "type": "integer",
          "description": "Credit memo item ID."
        },
        "discount_tax_compensation_amount": {
          "type": "number",
          "description": "Discount tax compensation amount."
        },
        "name": {
          "type": "string",
          "description": "Name."
        },
        "order_item_id": {
          "type": "integer",
          "description": "Order item ID."
        },
        "parent_id": {
          "type": "integer",
          "description": "Parent ID."
        },
        "price": {
          "type": "number",
          "description": "Price."
        },
        "price_incl_tax": {
          "type": "number",
          "description": "Price including tax."
        },
        "product_id": {
          "type": "integer",
          "description": "Product ID."
        },
        "qty": {
          "type": "number",
          "description": "Quantity."
        },
        "row_total": {
          "type": "number",
          "description": "Row total."
        },
        "row_total_incl_tax": {
          "type": "number",
          "description": "Row total including tax."
        },
        "sku": {
          "type": "string",
          "description": "SKU."
        },
        "tax_amount": {
          "type": "number",
          "description": "Tax amount."
        },
        "weee_tax_applied": {
          "type": "string",
          "description": "WEEE tax applied."
        },
        "weee_tax_applied_amount": {
          "type": "number",
          "description": "WEEE tax applied amount."
        },
        "weee_tax_applied_row_amount": {
          "type": "number",
          "description": "WEEE tax applied row amount."
        },
        "weee_tax_disposition": {
          "type": "number",
          "description": "WEEE tax disposition."
        },
        "weee_tax_row_disposition": {
          "type": "number",
          "description": "WEEE tax row disposition."
        },
        "extension_attributes": {
          "$ref": "#/definitions/sales-data-creditmemo-item-extension-interface"
        }
      },
      "required": [
        "base_cost",
        "base_price",
        "entity_id",
        "order_item_id",
        "qty"
      ]
    },
    "sales-data-creditmemo-item-extension-interface": {
      "type": "object",
      "description": "ExtensionInterface class for @see \\Magento\\Sales\\Api\\Data\\CreditmemoItemInterface",
      "properties": {
        "vertex_tax_codes": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "invoice_text_codes": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "tax_codes": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "sales-data-creditmemo-extension-interface": {
      "type": "object",
      "description": "ExtensionInterface class for @see \\Magento\\Sales\\Api\\Data\\CreditmemoInterface",
      "properties": {
        "gw_base_price": {
          "type": "string"
        },
        "gw_price": {
          "type": "string"
        },
        "gw_items_base_price": {
          "type": "string"
        },
        "gw_items_price": {
          "type": "string"
        },
        "gw_card_base_price": {
          "type": "string"
        },
        "gw_card_price": {
          "type": "string"
        },
        "gw_base_tax_amount": {
          "type": "string"
        },
        "gw_tax_amount": {
          "type": "string"
        },
        "gw_items_base_tax_amount": {
          "type": "string"
        },
        "gw_items_tax_amount": {
          "type": "string"
        },
        "gw_card_base_tax_amount": {
          "type": "string"
        },
        "gw_card_tax_amount": {
          "type": "string"
        }
      }
    },
    "sales-data-creditmemo-search-result-interface": {
      "type": "object",
      "description": "Credit memo search result interface. After a customer places and pays for an order and an invoice has been issued, the merchant can create a credit memo to refund all or part of the amount paid for any returned or undelivered items. The memo restores funds to the customer account so that the customer can make future purchases.",
      "properties": {
        "items": {
          "type": "array",
          "description": "Array of collection items.",
          "items": {
            "$ref": "#/definitions/sales-data-creditmemo-interface"
          }
        },
        "search_criteria": {
          "$ref": "#/definitions/framework-search-criteria-interface"
        },
        "total_count": {
          "type": "integer",
          "description": "Total count."
        }
      },
      "required": [
        "items",
        "search_criteria",
        "total_count"
      ]
    },
    "sales-data-shipment-interface": {
      "type": "object",
      "description": "Shipment interface. A shipment is a delivery package that contains products. A shipment document accompanies the shipment. This document lists the products and their quantities in the delivery package.",
      "properties": {
        "billing_address_id": {
          "type": "integer",
          "description": "Billing address ID."
        },
        "created_at": {
          "type": "string",
          "description": "Created-at timestamp."
        },
        "customer_id": {
          "type": "integer",
          "description": "Customer ID."
        },
        "email_sent": {
          "type": "integer",
          "description": "Email-sent flag value."
        },
        "entity_id": {
          "type": "integer",
          "description": "Shipment ID."
        },
        "increment_id": {
          "type": "string",
          "description": "Increment ID."
        },
        "order_id": {
          "type": "integer",
          "description": "Order ID."
        },
        "packages": {
          "type": "array",
          "description": "Array of packages, if any. Otherwise, null.",
          "items": {
            "$ref": "#/definitions/sales-data-shipment-package-interface"
          }
        },
        "shipment_status": {
          "type": "integer",
          "description": "Shipment status."
        },
        "shipping_address_id": {
          "type": "integer",
          "description": "Shipping address ID."
        },
        "shipping_label": {
          "type": "string",
          "description": "Shipping label."
        },
        "store_id": {
          "type": "integer",
          "description": "Store ID."
        },
        "total_qty": {
          "type": "number",
          "description": "Total quantity."
        },
        "total_weight": {
          "type": "number",
          "description": "Total weight."
        },
        "updated_at": {
          "type": "string",
          "description": "Updated-at timestamp."
        },
        "items": {
          "type": "array",
          "description": "Array of items.",
          "items": {
            "$ref": "#/definitions/sales-data-shipment-item-interface"
          }
        },
        "tracks": {
          "type": "array",
          "description": "Array of tracks.",
          "items": {
            "$ref": "#/definitions/sales-data-shipment-track-interface"
          }
        },
        "comments": {
          "type": "array",
          "description": "Array of comments.",
          "items": {
            "$ref": "#/definitions/sales-data-shipment-comment-interface"
          }
        },
        "extension_attributes": {
          "$ref": "#/definitions/sales-data-shipment-extension-interface"
        }
      },
      "required": [
        "order_id",
        "items",
        "tracks",
        "comments"
      ]
    },
    "sales-data-shipment-package-interface": {
      "type": "object",
      "description": "Shipment package interface. A shipment is a delivery package that contains products. A shipment document accompanies the shipment. This document lists the products and their quantities in the delivery package.",
      "properties": {
        "extension_attributes": {
          "$ref": "#/definitions/sales-data-shipment-package-extension-interface"
        }
      }
    },
    "sales-data-shipment-package-extension-interface": {
      "type": "object",
      "description": "ExtensionInterface class for @see \\Magento\\Sales\\Api\\Data\\ShipmentPackageInterface"
    },
    "sales-data-shipment-item-interface": {
      "type": "object",
      "description": "Shipment item interface. A shipment is a delivery package that contains products. A shipment document accompanies the shipment. This document lists the products and their quantities in the delivery package. A product is an item in a shipment.",
      "properties": {
        "additional_data": {
          "type": "string",
          "description": "Additional data."
        },
        "description": {
          "type": "string",
          "description": "Description."
        },
        "entity_id": {
          "type": "integer",
          "description": "Shipment item ID."
        },
        "name": {
          "type": "string",
          "description": "Name."
        },
        "parent_id": {
          "type": "integer",
          "description": "Parent ID."
        },
        "price": {
          "type": "number",
          "description": "Price."
        },
        "product_id": {
          "type": "integer",
          "description": "Product ID."
        },
        "row_total": {
          "type": "number",
          "description": "Row total."
        },
        "sku": {
          "type": "string",
          "description": "SKU."
        },
        "weight": {
          "type": "number",
          "description": "Weight."
        },
        "extension_attributes": {
          "$ref": "#/definitions/sales-data-shipment-item-extension-interface"
        },
        "order_item_id": {
          "type": "integer",
          "description": "Order item ID."
        },
        "qty": {
          "type": "number",
          "description": "Quantity."
        }
      },
      "required": [
        "order_item_id",
        "qty"
      ]
    },
    "sales-data-shipment-item-extension-interface": {
      "type": "object",
      "description": "ExtensionInterface class for @see \\Magento\\Sales\\Api\\Data\\ShipmentItemInterface"
    },
    "sales-data-shipment-track-interface": {
      "type": "object",
      "description": "Shipment track interface. A shipment is a delivery package that contains products. A shipment document accompanies the shipment. This document lists the products and their quantities in the delivery package. Merchants and customers can track shipments.",
      "properties": {
        "order_id": {
          "type": "integer",
          "description": "The order_id for the shipment package."
        },
        "created_at": {
          "type": "string",
          "description": "Created-at timestamp."
        },
        "entity_id": {
          "type": "integer",
          "description": "Shipment package ID."
        },
        "parent_id": {
          "type": "integer",
          "description": "Parent ID."
        },
        "updated_at": {
          "type": "string",
          "description": "Updated-at timestamp."
        },
        "weight": {
          "type": "number",
          "description": "Weight."
        },
        "qty": {
          "type": "number",
          "description": "Quantity."
        },
        "description": {
          "type": "string",
          "description": "Description."
        },
        "extension_attributes": {
          "$ref": "#/definitions/sales-data-shipment-track-extension-interface"
        },
        "track_number": {
          "type": "string",
          "description": "Track number."
        },
        "title": {
          "type": "string",
          "description": "Title."
        },
        "carrier_code": {
          "type": "string",
          "description": "Carrier code."
        }
      },
      "required": [
        "order_id",
        "parent_id",
        "weight",
        "qty",
        "description",
        "track_number",
        "title",
        "carrier_code"
      ]
    },
    "sales-data-shipment-track-extension-interface": {
      "type": "object",
      "description": "ExtensionInterface class for @see \\Magento\\Sales\\Api\\Data\\ShipmentTrackInterface"
    },
    "sales-data-shipment-comment-interface": {
      "type": "object",
      "description": "Shipment comment interface. A shipment is a delivery package that contains products. A shipment document accompanies the shipment. This document lists the products and their quantities in the delivery package. A shipment document can contain comments.",
      "properties": {
        "is_customer_notified": {
          "type": "integer",
          "description": "Is-customer-notified flag value."
        },
        "parent_id": {
          "type": "integer",
          "description": "Parent ID."
        },
        "extension_attributes": {
          "$ref": "#/definitions/sales-data-shipment-comment-extension-interface"
        },
        "comment": {
          "type": "string",
          "description": "Comment."
        },
        "is_visible_on_front": {
          "type": "integer",
          "description": "Is-visible-on-storefront flag value."
        },
        "created_at": {
          "type": "string",
          "description": "Created-at timestamp."
        },
        "entity_id": {
          "type": "integer",
          "description": "Invoice ID."
        }
      },
      "required": [
        "is_customer_notified",
        "parent_id",
        "comment",
        "is_visible_on_front"
      ]
    },
    "sales-data-shipment-comment-extension-interface": {
      "type": "object",
      "description": "ExtensionInterface class for @see \\Magento\\Sales\\Api\\Data\\ShipmentCommentInterface"
    },
    "sales-data-shipment-extension-interface": {
      "type": "object",
      "description": "ExtensionInterface class for @see \\Magento\\Sales\\Api\\Data\\ShipmentInterface",
      "properties": {
        "source_code": {
          "type": "string"
        },
        "ext_shipment_id": {
          "type": "string"
        },
        "ext_return_shipment_id": {
          "type": "string"
        },
        "ext_location_id": {
          "type": "string"
        },
        "ext_tracking_url": {
          "type": "string"
        },
        "ext_tracking_reference": {
          "type": "string"
        }
      }
    },
    "sales-data-shipment-search-result-interface": {
      "type": "object",
      "description": "Shipment search result interface. A shipment is a delivery package that contains products. A shipment document accompanies the shipment. This document lists the products and their quantities in the delivery package.",
      "properties": {
        "items": {
          "type": "array",
          "description": "Array of collection items.",
          "items": {
            "$ref": "#/definitions/sales-data-shipment-interface"
          }
        },
        "search_criteria": {
          "$ref": "#/definitions/framework-search-criteria-interface"
        },
        "total_count": {
          "type": "integer",
          "description": "Total count."
        }
      },
      "required": [
        "items",
        "search_criteria",
        "total_count"
      ]
    },
    "sales-data-shipment-comment-search-result-interface": {
      "type": "object",
      "description": "Shipment comment search result interface. A shipment is a delivery package that contains products. A shipment document accompanies the shipment. This document lists the products and their quantities in the delivery package. A shipment document can contain comments.",
      "properties": {
        "items": {
          "type": "array",
          "description": "Array of collection items.",
          "items": {
            "$ref": "#/definitions/sales-data-shipment-comment-interface"
          }
        },
        "search_criteria": {
          "$ref": "#/definitions/framework-search-criteria-interface"
        },
        "total_count": {
          "type": "integer",
          "description": "Total count."
        }
      },
      "required": [
        "items",
        "search_criteria",
        "total_count"
      ]
    },
    "sales-data-shipment-item-creation-interface": {
      "type": "object",
      "description": "Input argument for shipment item creation Interface ShipmentItemCreationInterface",
      "properties": {
        "extension_attributes": {
          "$ref": "#/definitions/sales-data-shipment-item-creation-extension-interface"
        },
        "order_item_id": {
          "type": "integer",
          "description": "Order item ID."
        },
        "qty": {
          "type": "number",
          "description": "Quantity."
        }
      },
      "required": [
        "order_item_id",
        "qty"
      ]
    },
    "sales-data-shipment-item-creation-extension-interface": {
      "type": "object",
      "description": "ExtensionInterface class for @see \\Magento\\Sales\\Api\\Data\\ShipmentItemCreationInterface"
    },
    "sales-data-shipment-comment-creation-interface": {
      "type": "object",
      "description": "Interface ShipmentCommentCreationInterface",
      "properties": {
        "extension_attributes": {
          "$ref": "#/definitions/sales-data-shipment-comment-creation-extension-interface"
        },
        "comment": {
          "type": "string",
          "description": "Comment."
        },
        "is_visible_on_front": {
          "type": "integer",
          "description": "Is-visible-on-storefront flag value."
        }
      },
      "required": [
        "comment",
        "is_visible_on_front"
      ]
    },
    "sales-data-shipment-comment-creation-extension-interface": {
      "type": "object",
      "description": "ExtensionInterface class for @see \\Magento\\Sales\\Api\\Data\\ShipmentCommentCreationInterface"
    },
    "sales-data-shipment-track-creation-interface": {
      "type": "object",
      "description": "Shipment Track Creation interface.",
      "properties": {
        "extension_attributes": {
          "$ref": "#/definitions/sales-data-shipment-track-creation-extension-interface"
        },
        "track_number": {
          "type": "string",
          "description": "Track number."
        },
        "title": {
          "type": "string",
          "description": "Title."
        },
        "carrier_code": {
          "type": "string",
          "description": "Carrier code."
        }
      },
      "required": [
        "track_number",
        "title",
        "carrier_code"
      ]
    },
    "sales-data-shipment-track-creation-extension-interface": {
      "type": "object",
      "description": "ExtensionInterface class for @see \\Magento\\Sales\\Api\\Data\\ShipmentTrackCreationInterface"
    },
    "sales-data-shipment-package-creation-interface": {
      "type": "object",
      "description": "Shipment package interface. A shipment is a delivery package that contains products. A shipment document accompanies the shipment. This document lists the products and their quantities in the delivery package.",
      "properties": {
        "extension_attributes": {
          "$ref": "#/definitions/sales-data-shipment-package-creation-extension-interface"
        }
      }
    },
    "sales-data-shipment-package-creation-extension-interface": {
      "type": "object",
      "description": "ExtensionInterface class for @see \\Magento\\Sales\\Api\\Data\\ShipmentPackageCreationInterface"
    },
    "sales-data-shipment-creation-arguments-interface": {
      "type": "object",
      "description": "Interface for creation arguments for Shipment.",
      "properties": {
        "extension_attributes": {
          "$ref": "#/definitions/sales-data-shipment-creation-arguments-extension-interface"
        }
      }
    },
    "sales-data-shipment-creation-arguments-extension-interface": {
      "type": "object",
      "description": "ExtensionInterface class for @see \\Magento\\Sales\\Api\\Data\\ShipmentCreationArgumentsInterface",
      "properties": {
        "source_code": {
          "type": "string"
        },
        "shipping_label": {
          "type": "string"
        },
        "ext_shipment_id": {
          "type": "string"
        },
        "ext_return_shipment_id": {
          "type": "string"
        },
        "ext_location_id": {
          "type": "string"
        },
        "ext_tracking_url": {
          "type": "string"
        },
        "ext_tracking_reference": {
          "type": "string"
        }
      }
    },
    "sales-data-transaction-interface": {
      "type": "object",
      "description": "Transaction interface. A transaction is an interaction between a merchant and a customer such as a purchase, a credit, a refund, and so on.",
      "properties": {
        "transaction_id": {
          "type": "integer",
          "description": "Transaction ID."
        },
        "parent_id": {
          "type": "integer",
          "description": "The parent ID for the transaction. Otherwise, null."
        },
        "order_id": {
          "type": "integer",
          "description": "Order ID."
        },
        "payment_id": {
          "type": "integer",
          "description": "Payment ID."
        },
        "txn_id": {
          "type": "string",
          "description": "Transaction business ID."
        },
        "parent_txn_id": {
          "type": "string",
          "description": "Parent transaction business ID."
        },
        "txn_type": {
          "type": "string",
          "description": "Transaction type."
        },
        "is_closed": {
          "type": "integer",
          "description": "Is-closed flag value."
        },
        "additional_information": {
          "type": "array",
          "description": "Array of additional information. Otherwise, null.",
          "items": {
            "type": "string"
          }
        },
        "created_at": {
          "type": "string",
          "description": "Created-at timestamp."
        },
        "child_transactions": {
          "type": "array",
          "description": "Array of child transactions.",
          "items": {
            "$ref": "#/definitions/sales-data-transaction-interface"
          }
        },
        "extension_attributes": {
          "$ref": "#/definitions/sales-data-transaction-extension-interface"
        }
      },
      "required": [
        "transaction_id",
        "order_id",
        "payment_id",
        "txn_id",
        "parent_txn_id",
        "txn_type",
        "is_closed",
        "created_at",
        "child_transactions"
      ]
    },
    "sales-data-transaction-extension-interface": {
      "type": "object",
      "description": "ExtensionInterface class for @see \\Magento\\Sales\\Api\\Data\\TransactionInterface"
    },
    "sales-data-transaction-search-result-interface": {
      "type": "object",
      "description": "Transaction search result interface. A transaction is an interaction between a merchant and a customer such as a purchase, a credit, a refund, and so on.",
      "properties": {
        "items": {
          "type": "array",
          "description": "Array of collection items.",
          "items": {
            "$ref": "#/definitions/sales-data-transaction-interface"
          }
        },
        "search_criteria": {
          "$ref": "#/definitions/framework-search-criteria-interface"
        },
        "total_count": {
          "type": "integer",
          "description": "Total count."
        }
      },
      "required": [
        "items",
        "search_criteria",
        "total_count"
      ]
    },
    "sales-data-invoice-item-creation-interface": {
      "type": "object",
      "description": "Input argument for invoice creation Interface InvoiceItemCreationInterface",
      "properties": {
        "extension_attributes": {
          "$ref": "#/definitions/sales-data-invoice-item-creation-extension-interface"
        },
        "order_item_id": {
          "type": "integer",
          "description": "Order item ID."
        },
        "qty": {
          "type": "number",
          "description": "Quantity."
        }
      },
      "required": [
        "order_item_id",
        "qty"
      ]
    },
    "sales-data-invoice-item-creation-extension-interface": {
      "type": "object",
      "description": "ExtensionInterface class for @see \\Magento\\Sales\\Api\\Data\\InvoiceItemCreationInterface"
    },
    "sales-data-invoice-comment-creation-interface": {
      "type": "object",
      "description": "Interface InvoiceCommentCreationInterface",
      "properties": {
        "extension_attributes": {
          "$ref": "#/definitions/sales-data-invoice-comment-creation-extension-interface"
        },
        "comment": {
          "type": "string",
          "description": "Comment."
        },
        "is_visible_on_front": {
          "type": "integer",
          "description": "Is-visible-on-storefront flag value."
        }
      },
      "required": [
        "comment",
        "is_visible_on_front"
      ]
    },
    "sales-data-invoice-comment-creation-extension-interface": {
      "type": "object",
      "description": "ExtensionInterface class for @see \\Magento\\Sales\\Api\\Data\\InvoiceCommentCreationInterface"
    },
    "sales-data-invoice-creation-arguments-interface": {
      "type": "object",
      "description": "Interface for creation arguments for Invoice.",
      "properties": {
        "extension_attributes": {
          "$ref": "#/definitions/sales-data-invoice-creation-arguments-extension-interface"
        }
      }
    },
    "sales-data-invoice-creation-arguments-extension-interface": {
      "type": "object",
      "description": "ExtensionInterface class for @see \\Magento\\Sales\\Api\\Data\\InvoiceCreationArgumentsInterface"
    },
    "checkout-data-shipping-information-interface": {
      "type": "object",
      "description": "Interface ShippingInformationInterface",
      "properties": {
        "shipping_address": {
          "$ref": "#/definitions/quote-data-address-interface"
        },
        "billing_address": {
          "$ref": "#/definitions/quote-data-address-interface"
        },
        "shipping_method_code": {
          "type": "string",
          "description": "Shipping method code"
        },
        "shipping_carrier_code": {
          "type": "string",
          "description": "Carrier code"
        },
        "extension_attributes": {
          "$ref": "#/definitions/checkout-data-shipping-information-extension-interface"
        },
        "custom_attributes": {
          "type": "array",
          "description": "Custom attributes values.",
          "items": {
            "$ref": "#/definitions/framework-attribute-interface"
          }
        }
      },
      "required": [
        "shipping_address",
        "shipping_method_code",
        "shipping_carrier_code"
      ]
    },
    "checkout-data-shipping-information-extension-interface": {
      "type": "object",
      "description": "ExtensionInterface class for @see \\Magento\\Checkout\\Api\\Data\\ShippingInformationInterface"
    },
    "checkout-data-payment-details-interface": {
      "type": "object",
      "description": "Interface PaymentDetailsInterface",
      "properties": {
        "payment_methods": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/quote-data-payment-method-interface"
          }
        },
        "totals": {
          "$ref": "#/definitions/quote-data-totals-interface"
        },
        "extension_attributes": {
          "$ref": "#/definitions/checkout-data-payment-details-extension-interface"
        }
      },
      "required": [
        "payment_methods",
        "totals"
      ]
    },
    "checkout-data-payment-details-extension-interface": {
      "type": "object",
      "description": "ExtensionInterface class for @see \\Magento\\Checkout\\Api\\Data\\PaymentDetailsInterface"
    },
    "checkout-data-totals-information-interface": {
      "type": "object",
      "description": "Interface TotalsInformationInterface",
      "properties": {
        "address": {
          "$ref": "#/definitions/quote-data-address-interface"
        },
        "shipping_method_code": {
          "type": "string",
          "description": "Shipping method code"
        },
        "shipping_carrier_code": {
          "type": "string",
          "description": "Carrier code"
        },
        "extension_attributes": {
          "$ref": "#/definitions/checkout-data-totals-information-extension-interface"
        },
        "custom_attributes": {
          "type": "array",
          "description": "Custom attributes values.",
          "items": {
            "$ref": "#/definitions/framework-attribute-interface"
          }
        }
      },
      "required": [
        "address"
      ]
    },
    "checkout-data-totals-information-extension-interface": {
      "type": "object",
      "description": "ExtensionInterface class for @see \\Magento\\Checkout\\Api\\Data\\TotalsInformationInterface"
    },
    "asynchronous-operations-data-detailed-bulk-operations-status-interface": {
      "type": "object",
      "description": "Interface BulkStatusInterface Bulk summary data with list of operations items full data.",
      "properties": {
        "operations_list": {
          "type": "array",
          "description": "Operations list.",
          "items": {
            "$ref": "#/definitions/asynchronous-operations-data-operation-interface"
          }
        },
        "extension_attributes": {
          "$ref": "#/definitions/asynchronous-operations-data-bulk-summary-extension-interface"
        },
        "user_type": {
          "type": "integer",
          "description": "User type"
        },
        "bulk_id": {
          "type": "string",
          "description": "Bulk uuid"
        },
        "description": {
          "type": "string",
          "description": "Bulk description"
        },
        "start_time": {
          "type": "string",
          "description": "Bulk scheduled time"
        },
        "user_id": {
          "type": "integer",
          "description": "User id"
        },
        "operation_count": {
          "type": "integer",
          "description": "Total number of operations scheduled in scope of this bulk"
        }
      },
      "required": [
        "operations_list",
        "user_type",
        "bulk_id",
        "description",
        "start_time",
        "user_id",
        "operation_count"
      ]
    },
    "asynchronous-operations-data-operation-interface": {
      "type": "object",
      "description": "Class OperationInterface",
      "properties": {
        "extension_attributes": {
          "$ref": "#/definitions/asynchronous-operations-data-operation-extension-interface"
        },
        "id": {
          "type": "integer",
          "description": "Id"
        },
        "bulk_uuid": {
          "type": "string",
          "description": "Bulk uuid"
        },
        "topic_name": {
          "type": "string",
          "description": "Queue Topic"
        },
        "serialized_data": {
          "type": "string",
          "description": "Data"
        },
        "result_serialized_data": {
          "type": "string",
          "description": "Serialized Data"
        },
        "status": {
          "type": "integer",
          "description": "Operation status"
        },
        "result_message": {
          "type": "string",
          "description": "Result message"
        },
        "error_code": {
          "type": "integer",
          "description": "Error code"
        }
      },
      "required": [
        "id",
        "bulk_uuid",
        "topic_name",
        "serialized_data",
        "result_serialized_data",
        "status",
        "result_message",
        "error_code"
      ]
    },
    "asynchronous-operations-data-operation-extension-interface": {
      "type": "object",
      "description": "ExtensionInterface class for @see \\Magento\\AsynchronousOperations\\Api\\Data\\OperationInterface",
      "properties": {
        "start_time": {
          "type": "string"
        }
      }
    },
    "asynchronous-operations-data-bulk-summary-extension-interface": {
      "type": "object",
      "description": "ExtensionInterface class for @see \\Magento\\AsynchronousOperations\\Api\\Data\\BulkSummaryInterface"
    },
    "asynchronous-operations-data-bulk-operations-status-interface": {
      "type": "object",
      "description": "Interface BulkStatusInterface Bulk summary data with list of operations items summary data.",
      "properties": {
        "operations_list": {
          "type": "array",
          "description": "List of operation with statuses (short data).",
          "items": {
            "$ref": "#/definitions/asynchronous-operations-data-summary-operation-status-interface"
          }
        },
        "extension_attributes": {
          "$ref": "#/definitions/asynchronous-operations-data-bulk-summary-extension-interface"
        },
        "user_type": {
          "type": "integer",
          "description": "User type"
        },
        "bulk_id": {
          "type": "string",
          "description": "Bulk uuid"
        },
        "description": {
          "type": "string",
          "description": "Bulk description"
        },
        "start_time": {
          "type": "string",
          "description": "Bulk scheduled time"
        },
        "user_id": {
          "type": "integer",
          "description": "User id"
        },
        "operation_count": {
          "type": "integer",
          "description": "Total number of operations scheduled in scope of this bulk"
        }
      },
      "required": [
        "operations_list",
        "user_type",
        "bulk_id",
        "description",
        "start_time",
        "user_id",
        "operation_count"
      ]
    },
    "asynchronous-operations-data-summary-operation-status-interface": {
      "type": "object",
      "description": "Getter Class OperationsStatusInterface Instead of OperationInterface this class don't provide all operation data and not responsive to set any data, just to get operation data without serialized_data and result_serialized_data",
      "properties": {
        "id": {
          "type": "integer",
          "description": "Id"
        },
        "status": {
          "type": "integer",
          "description": "Operation status"
        },
        "result_message": {
          "type": "string",
          "description": "Result message"
        },
        "error_code": {
          "type": "integer",
          "description": "Error code"
        }
      },
      "required": [
        "id",
        "status",
        "result_message",
        "error_code"
      ]
    },
    "asynchronous-operations-data-operation-search-results-interface": {
      "type": "object",
      "description": "Bulk operation search result interface. An bulk is a group of queue messages. An bulk operation item is a queue message.",
      "properties": {
        "items": {
          "type": "array",
          "description": "List of operations.",
          "items": {
            "$ref": "#/definitions/asynchronous-operations-data-operation-interface"
          }
        },
        "search_criteria": {
          "$ref": "#/definitions/framework-search-criteria-interface"
        },
        "total_count": {
          "type": "integer",
          "description": "Total count."
        }
      },
      "required": [
        "items",
        "search_criteria",
        "total_count"
      ]
    },
    "tax-data-tax-rate-interface": {
      "type": "object",
      "description": "Tax rate interface.",
      "properties": {
        "id": {
          "type": "integer",
          "description": "Id"
        },
        "tax_country_id": {
          "type": "string",
          "description": "Country id"
        },
        "tax_region_id": {
          "type": "integer",
          "description": "Region id"
        },
        "region_name": {
          "type": "string",
          "description": "Region name"
        },
        "tax_postcode": {
          "type": "string",
          "description": "Postcode"
        },
        "zip_is_range": {
          "type": "integer",
          "description": "Zip is range"
        },
        "zip_from": {
          "type": "integer",
          "description": "Zip range from"
        },
        "zip_to": {
          "type": "integer",
          "description": "Zip range to"
        },
        "rate": {
          "type": "number",
          "description": "Tax rate in percentage"
        },
        "code": {
          "type": "string",
          "description": "Tax rate code"
        },
        "titles": {
          "type": "array",
          "description": "Tax rate titles",
          "items": {
            "$ref": "#/definitions/tax-data-tax-rate-title-interface"
          }
        },
        "extension_attributes": {
          "$ref": "#/definitions/tax-data-tax-rate-extension-interface"
        }
      },
      "required": [
        "tax_country_id",
        "rate",
        "code"
      ]
    },
    "tax-data-tax-rate-title-interface": {
      "type": "object",
      "description": "Tax rate title interface.",
      "properties": {
        "store_id": {
          "type": "string",
          "description": "Store id"
        },
        "value": {
          "type": "string",
          "description": "Title value"
        },
        "extension_attributes": {
          "$ref": "#/definitions/tax-data-tax-rate-title-extension-interface"
        }
      },
      "required": [
        "store_id",
        "value"
      ]
    },
    "tax-data-tax-rate-title-extension-interface": {
      "type": "object",
      "description": "ExtensionInterface class for @see \\Magento\\Tax\\Api\\Data\\TaxRateTitleInterface"
    },
    "tax-data-tax-rate-extension-interface": {
      "type": "object",
      "description": "ExtensionInterface class for @see \\Magento\\Tax\\Api\\Data\\TaxRateInterface"
    },
    "tax-data-tax-rate-search-results-interface": {
      "type": "object",
      "description": "Interface for tax rate search results.",
      "properties": {
        "items": {
          "type": "array",
          "description": "Items",
          "items": {
            "$ref": "#/definitions/tax-data-tax-rate-interface"
          }
        },
        "search_criteria": {
          "$ref": "#/definitions/framework-search-criteria-interface"
        },
        "total_count": {
          "type": "integer",
          "description": "Total count."
        }
      },
      "required": [
        "items",
        "search_criteria",
        "total_count"
      ]
    },
    "tax-data-tax-rule-interface": {
      "type": "object",
      "description": "Tax rule interface.",
      "properties": {
        "id": {
          "type": "integer",
          "description": "Id"
        },
        "code": {
          "type": "string",
          "description": "Tax rule code"
        },
        "priority": {
          "type": "integer",
          "description": "Priority"
        },
        "position": {
          "type": "integer",
          "description": "Sort order."
        },
        "customer_tax_class_ids": {
          "type": "array",
          "description": "Customer tax class id",
          "items": {
            "type": "integer"
          }
        },
        "product_tax_class_ids": {
          "type": "array",
          "description": "Product tax class id",
          "items": {
            "type": "integer"
          }
        },
        "tax_rate_ids": {
          "type": "array",
          "description": "Tax rate ids",
          "items": {
            "type": "integer"
          }
        },
        "calculate_subtotal": {
          "type": "boolean",
          "description": "Calculate subtotal."
        },
        "extension_attributes": {
          "$ref": "#/definitions/tax-data-tax-rule-extension-interface"
        }
      },
      "required": [
        "code",
        "priority",
        "position",
        "customer_tax_class_ids",
        "product_tax_class_ids",
        "tax_rate_ids"
      ]
    },
    "tax-data-tax-rule-extension-interface": {
      "type": "object",
      "description": "ExtensionInterface class for @see \\Magento\\Tax\\Api\\Data\\TaxRuleInterface"
    },
    "tax-data-tax-rule-search-results-interface": {
      "type": "object",
      "description": "Interface for tax rule search results.",
      "properties": {
        "items": {
          "type": "array",
          "description": "Items",
          "items": {
            "$ref": "#/definitions/tax-data-tax-rule-interface"
          }
        },
        "search_criteria": {
          "$ref": "#/definitions/framework-search-criteria-interface"
        },
        "total_count": {
          "type": "integer",
          "description": "Total count."
        }
      },
      "required": [
        "items",
        "search_criteria",
        "total_count"
      ]
    },
    "tax-data-tax-class-interface": {
      "type": "object",
      "description": "Tax class interface.",
      "properties": {
        "class_id": {
          "type": "integer",
          "description": "Tax class ID."
        },
        "class_name": {
          "type": "string",
          "description": "Tax class name."
        },
        "class_type": {
          "type": "string",
          "description": "Tax class type."
        },
        "extension_attributes": {
          "$ref": "#/definitions/tax-data-tax-class-extension-interface"
        }
      },
      "required": [
        "class_name",
        "class_type"
      ]
    },
    "tax-data-tax-class-extension-interface": {
      "type": "object",
      "description": "ExtensionInterface class for @see \\Magento\\Tax\\Api\\Data\\TaxClassInterface"
    },
    "tax-data-tax-class-search-results-interface": {
      "type": "object",
      "description": "Interface for tax class search results.",
      "properties": {
        "items": {
          "type": "array",
          "description": "Items",
          "items": {
            "$ref": "#/definitions/tax-data-tax-class-interface"
          }
        },
        "search_criteria": {
          "$ref": "#/definitions/framework-search-criteria-interface"
        },
        "total_count": {
          "type": "integer",
          "description": "Total count."
        }
      },
      "required": [
        "items",
        "search_criteria",
        "total_count"
      ]
    },
    "analytics-data-link-interface": {
      "type": "object",
      "description": "Represents link with collected data and initialized vector for decryption.",
      "properties": {
        "url": {
          "type": "string"
        },
        "initialization_vector": {
          "type": "string"
        }
      },
      "required": [
        "url",
        "initialization_vector"
      ]
    },
    "inventory-api-data-source-search-results-interface": {
      "type": "object",
      "description": "Search results of Repository::getList method Used fully qualified namespaces in annotations for proper work of WebApi request parser",
      "properties": {
        "items": {
          "type": "array",
          "description": "Sources list",
          "items": {
            "$ref": "#/definitions/inventory-api-data-source-interface"
          }
        },
        "search_criteria": {
          "$ref": "#/definitions/framework-search-criteria-interface"
        },
        "total_count": {
          "type": "integer",
          "description": "Total count."
        }
      },
      "required": [
        "items",
        "search_criteria",
        "total_count"
      ]
    },
    "inventory-api-data-source-interface": {
      "type": "object",
      "description": "Represents physical storage, i.e. brick and mortar store or warehouse Used fully qualified namespaces in annotations for proper work of WebApi request parser",
      "properties": {
        "source_code": {
          "type": "string",
          "description": "Source code"
        },
        "name": {
          "type": "string",
          "description": "Source name"
        },
        "email": {
          "type": "string",
          "description": "Source email"
        },
        "contact_name": {
          "type": "string",
          "description": "Source contact name"
        },
        "enabled": {
          "type": "boolean",
          "description": "If source is enabled. For new entity can be null"
        },
        "description": {
          "type": "string",
          "description": "Source description"
        },
        "latitude": {
          "type": "number",
          "description": "Source latitude"
        },
        "longitude": {
          "type": "number",
          "description": "Source longitude"
        },
        "country_id": {
          "type": "string",
          "description": "Source country id"
        },
        "region_id": {
          "type": "integer",
          "description": "Region id if source has registered region."
        },
        "region": {
          "type": "string",
          "description": "Region title if source has custom region"
        },
        "city": {
          "type": "string",
          "description": "Source city"
        },
        "street": {
          "type": "string",
          "description": "Source street name"
        },
        "postcode": {
          "type": "string",
          "description": "Source post code"
        },
        "phone": {
          "type": "string",
          "description": "Source phone number"
        },
        "fax": {
          "type": "string",
          "description": "Source fax"
        },
        "use_default_carrier_config": {
          "type": "boolean",
          "description": "Is need to use default config"
        },
        "carrier_links": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/inventory-api-data-source-carrier-link-interface"
          }
        },
        "extension_attributes": {
          "$ref": "#/definitions/inventory-api-data-source-extension-interface"
        }
      }
    },
    "inventory-api-data-source-carrier-link-interface": {
      "type": "object",
      "description": "Represents relation between some physical storage and shipping method Used fully qualified namespaces in annotations for proper work of WebApi request parser",
      "properties": {
        "carrier_code": {
          "type": "string",
          "description": "Carrier code"
        },
        "position": {
          "type": "integer",
          "description": "Position"
        },
        "extension_attributes": {
          "$ref": "#/definitions/inventory-api-data-source-carrier-link-extension-interface"
        }
      }
    },
    "inventory-api-data-source-carrier-link-extension-interface": {
      "type": "object",
      "description": "ExtensionInterface class for @see \\Magento\\InventoryApi\\Api\\Data\\SourceCarrierLinkInterface"
    },
    "inventory-api-data-source-extension-interface": {
      "type": "object",
      "description": "ExtensionInterface class for @see \\Magento\\InventoryApi\\Api\\Data\\SourceInterface"
    },
    "inventory-api-data-stock-search-results-interface": {
      "type": "object",
      "description": "Search results of Repository::getList method Used fully qualified namespaces in annotations for proper work of WebApi request parser",
      "properties": {
        "items": {
          "type": "array",
          "description": "Stocks list",
          "items": {
            "$ref": "#/definitions/inventory-api-data-stock-interface"
          }
        },
        "search_criteria": {
          "$ref": "#/definitions/framework-search-criteria-interface"
        },
        "total_count": {
          "type": "integer",
          "description": "Total count."
        }
      },
      "required": [
        "items",
        "search_criteria",
        "total_count"
      ]
    },
    "inventory-api-data-stock-interface": {
      "type": "object",
      "description": "Represents product aggregation among some different physical storages (in technical words, it is an index) Used fully qualified namespaces in annotations for proper work of WebApi request parser",
      "properties": {
        "stock_id": {
          "type": "integer",
          "description": "Stock id"
        },
        "name": {
          "type": "string",
          "description": "Stock name"
        },
        "extension_attributes": {
          "$ref": "#/definitions/inventory-api-data-stock-extension-interface"
        }
      }
    },
    "inventory-api-data-stock-extension-interface": {
      "type": "object",
      "description": "TODO: temporal fix of extension classes generation during installation ExtensionInterface class for @see \\Magento\\InventoryApi\\Api\\Data\\StockInterface",
      "properties": {
        "sales_channels": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/inventory-sales-api-data-sales-channel-interface"
          }
        }
      }
    },
    "inventory-sales-api-data-sales-channel-interface": {
      "type": "object",
      "description": "Represents sales channels (which are a linkage between stocks and websites, customer groups, etc.) Used fully qualified namespaces in annotations for proper work of WebApi request parser",
      "properties": {
        "type": {
          "type": "string",
          "description": "Sales channel type"
        },
        "code": {
          "type": "string",
          "description": "Sales channel code"
        },
        "extension_attributes": {
          "$ref": "#/definitions/inventory-sales-api-data-sales-channel-extension-interface"
        }
      }
    },
    "inventory-sales-api-data-sales-channel-extension-interface": {
      "type": "object",
      "description": "ExtensionInterface class for @see \\Magento\\InventorySalesApi\\Api\\Data\\SalesChannelInterface"
    },
    "inventory-api-data-stock-source-link-search-results-interface": {
      "type": "object",
      "description": "Search results of Repository::getList method Used fully qualified namespaces in annotations for proper work of WebApi request parser",
      "properties": {
        "items": {
          "type": "array",
          "description": "StockSourceLink list",
          "items": {
            "$ref": "#/definitions/inventory-api-data-stock-source-link-interface"
          }
        },
        "search_criteria": {
          "$ref": "#/definitions/framework-search-criteria-interface"
        },
        "total_count": {
          "type": "integer",
          "description": "Total count."
        }
      },
      "required": [
        "items",
        "search_criteria",
        "total_count"
      ]
    },
    "inventory-api-data-stock-source-link-interface": {
      "type": "object",
      "description": "Represents relation between Stock and Source entities. Used fully qualified namespaces in annotations for proper work of WebApi request parser",
      "properties": {
        "stock_id": {
          "type": "integer",
          "description": "Stock id"
        },
        "source_code": {
          "type": "string",
          "description": "Source code of the link"
        },
        "priority": {
          "type": "integer",
          "description": "Priority of the link"
        },
        "extension_attributes": {
          "$ref": "#/definitions/inventory-api-data-stock-source-link-extension-interface"
        }
      }
    },
    "inventory-api-data-stock-source-link-extension-interface": {
      "type": "object",
      "description": "ExtensionInterface class for @see \\Magento\\InventoryApi\\Api\\Data\\StockSourceLinkInterface"
    },
    "inventory-api-data-source-item-search-results-interface": {
      "type": "object",
      "description": "Search results of Repository::getList method Used fully qualified namespaces in annotations for proper work of WebApi request parser",
      "properties": {
        "items": {
          "type": "array",
          "description": "Source items list",
          "items": {
            "$ref": "#/definitions/inventory-api-data-source-item-interface"
          }
        },
        "search_criteria": {
          "$ref": "#/definitions/framework-search-criteria-interface"
        },
        "total_count": {
          "type": "integer",
          "description": "Total count."
        }
      },
      "required": [
        "items",
        "search_criteria",
        "total_count"
      ]
    },
    "inventory-api-data-source-item-interface": {
      "type": "object",
      "description": "Represents amount of product on physical storage Entity id getter is missed because entity identifies by compound identifier (sku and source_code) Used fully qualified namespaces in annotations for proper work of WebApi request parser",
      "properties": {
        "sku": {
          "type": "string",
          "description": "Source item sku"
        },
        "source_code": {
          "type": "string",
          "description": "Source code"
        },
        "quantity": {
          "type": "number",
          "description": "Source item quantity"
        },
        "status": {
          "type": "integer",
          "description": "Source item status (One of self::STATUS_*)"
        },
        "extension_attributes": {
          "$ref": "#/definitions/inventory-api-data-source-item-extension-interface"
        }
      }
    },
    "inventory-api-data-source-item-extension-interface": {
      "type": "object",
      "description": "ExtensionInterface class for @see \\Magento\\InventoryApi\\Api\\Data\\SourceItemInterface"
    },
    "inventory-catalog-api-data-partial-inventory-transfer-item-interface": {
      "type": "object",
      "description": "Specifies item and quantity for partial inventory transfer.",
      "properties": {
        "sku": {
          "type": "string"
        },
        "qty": {
          "type": "number"
        }
      },
      "required": [
        "sku",
        "qty"
      ]
    },
    "inventory-distance-based-source-selection-api-data-lat-lng-interface": {
      "type": "object",
      "description": "DTO for latitude and longitude request",
      "properties": {
        "lat": {
          "type": "number",
          "description": "Latitude"
        },
        "lng": {
          "type": "number",
          "description": "Longitude"
        }
      },
      "required": [
        "lat",
        "lng"
      ]
    },
    "inventory-export-stock-api-data-export-stock-salable-qty-search-result-interface": {
      "type": "object",
      "description": "Interface for ExportStockSalableQtySearchResult",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/framework-extensible-data-interface"
          }
        },
        "search_criteria": {
          "$ref": "#/definitions/framework-search-criteria-interface"
        },
        "total_count": {
          "type": "integer",
          "description": "Total count."
        }
      },
      "required": [
        "items",
        "search_criteria",
        "total_count"
      ]
    },
    "framework-extensible-data-interface": {
      "type": "object",
      "description": "Interface for entities which can be extended with extension attributes."
    },
    "inventory-export-stock-api-data-product-stock-index-data-interface": {
      "type": "object",
      "description": "Class ExportStockIndexDataResultInterface for result Inventory stock index dump export",
      "properties": {
        "sku": {
          "type": "string",
          "description": "Product SKU"
        },
        "qty": {
          "type": "number",
          "description": "Product QTY"
        },
        "is_salable": {
          "type": "boolean",
          "description": "Product is salable flag"
        }
      },
      "required": [
        "sku",
        "qty",
        "is_salable"
      ]
    },
    "inventory-sales-api-data-product-salable-result-interface": {
      "type": "object",
      "description": "Represents result of service Magento\\InventorySalesApi\\Api\\IsProductSalableForRequestedQtyInterface::execute",
      "properties": {
        "salable": {
          "type": "boolean"
        },
        "errors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/inventory-sales-api-data-product-salability-error-interface"
          }
        },
        "extension_attributes": {
          "$ref": "#/definitions/inventory-sales-api-data-product-salable-result-extension-interface"
        }
      },
      "required": [
        "salable",
        "errors"
      ]
    },
    "inventory-sales-api-data-product-salability-error-interface": {
      "type": "object",
      "description": "",
      "properties": {
        "code": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "extension_attributes": {
          "$ref": "#/definitions/inventory-sales-api-data-product-salability-error-extension-interface"
        }
      },
      "required": [
        "code",
        "message"
      ]
    },
    "inventory-sales-api-data-product-salability-error-extension-interface": {
      "type": "object",
      "description": "ExtensionInterface class for @see \\Magento\\InventorySalesApi\\Api\\Data\\ProductSalabilityErrorInterface"
    },
    "inventory-sales-api-data-product-salable-result-extension-interface": {
      "type": "object",
      "description": "ExtensionInterface class for @see \\Magento\\InventorySalesApi\\Api\\Data\\ProductSalableResultInterface"
    },
    "inventory-low-quantity-notification-api-data-source-item-configuration-interface": {
      "type": "object",
      "description": "Represents a Source Item Configuration object Used fully qualified namespaces in annotations for proper work of WebApi request parser",
      "properties": {
        "source_code": {
          "type": "string",
          "description": "Source code"
        },
        "notify_stock_qty": {
          "type": "number",
          "description": "Notify stock qty"
        },
        "sku": {
          "type": "string",
          "description": "SKU"
        },
        "extension_attributes": {
          "$ref": "#/definitions/inventory-low-quantity-notification-api-data-source-item-configuration-extension-interface"
        }
      }
    },
    "inventory-low-quantity-notification-api-data-source-item-configuration-extension-interface": {
      "type": "object",
      "description": "ExtensionInterface class for @see \\Magento\\InventoryLowQuantityNotificationApi\\Api\\Data\\SourceItemConfigurationInterface"
    },
    "inventory-source-selection-api-data-source-selection-algorithm-interface": {
      "type": "object",
      "description": "Data Interface representing particular Source Selection Algorithm",
      "properties": {
        "code": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "extension_attributes": {
          "$ref": "#/definitions/inventory-source-selection-api-data-source-selection-algorithm-extension-interface"
        }
      },
      "required": [
        "code",
        "title",
        "description"
      ]
    },
    "inventory-source-selection-api-data-source-selection-algorithm-extension-interface": {
      "type": "object",
      "description": "ExtensionInterface class for @see \\Magento\\InventorySourceSelectionApi\\Api\\Data\\SourceSelectionAlgorithmInterface"
    },
    "inventory-source-selection-api-data-inventory-request-interface": {
      "type": "object",
      "description": "Request products in a given Qty and StockId",
      "properties": {
        "stock_id": {
          "type": "integer",
          "description": "Stock Id"
        },
        "items": {
          "type": "array",
          "description": "Items",
          "items": {
            "$ref": "#/definitions/inventory-source-selection-api-data-item-request-interface"
          }
        },
        "extension_attributes": {
          "$ref": "#/definitions/inventory-source-selection-api-data-inventory-request-extension-interface"
        }
      },
      "required": [
        "stock_id",
        "items"
      ]
    },
    "inventory-source-selection-api-data-item-request-interface": {
      "type": "object",
      "description": "Represents requested quantity for particular product",
      "properties": {
        "sku": {
          "type": "string",
          "description": "SKU"
        },
        "qty": {
          "type": "number",
          "description": "Product Quantity"
        },
        "extension_attributes": {
          "$ref": "#/definitions/inventory-source-selection-api-data-item-request-extension-interface"
        }
      },
      "required": [
        "sku",
        "qty"
      ]
    },
    "inventory-source-selection-api-data-item-request-extension-interface": {
      "type": "object",
      "description": "ExtensionInterface class for @see \\Magento\\InventorySourceSelectionApi\\Api\\Data\\ItemRequestInterface"
    },
    "inventory-source-selection-api-data-inventory-request-extension-interface": {
      "type": "object",
      "description": "ExtensionInterface class for @see \\Magento\\InventorySourceSelectionApi\\Api\\Data\\InventoryRequestInterface",
      "properties": {
        "destination_address": {
          "$ref": "#/definitions/inventory-source-selection-api-data-address-interface"
        }
      }
    },
    "inventory-source-selection-api-data-address-interface": {
      "type": "object",
      "description": "Data interface for shipping source or shipping destination",
      "properties": {
        "country": {
          "type": "string",
          "description": "Shipping country"
        },
        "postcode": {
          "type": "string",
          "description": "Shipping postcode"
        },
        "street": {
          "type": "string",
          "description": "Shipping street address"
        },
        "region": {
          "type": "string",
          "description": "Shipping region"
        },
        "city": {
          "type": "string",
          "description": "Shipping city"
        }
      },
      "required": [
        "country",
        "postcode",
        "street",
        "region",
        "city"
      ]
    },
    "inventory-source-selection-api-data-source-selection-result-interface": {
      "type": "object",
      "description": "Result of how we will deduct product qty from different Sources",
      "properties": {
        "source_selection_items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/inventory-source-selection-api-data-source-selection-item-interface"
          }
        },
        "shippable": {
          "type": "boolean"
        },
        "extension_attributes": {
          "$ref": "#/definitions/inventory-source-selection-api-data-source-selection-result-extension-interface"
        }
      },
      "required": [
        "source_selection_items",
        "shippable"
      ]
    },
    "inventory-source-selection-api-data-source-selection-item-interface": {
      "type": "object",
      "description": "Represents source selection result for the specific source and SKU",
      "properties": {
        "source_code": {
          "type": "string",
          "description": "Source code"
        },
        "sku": {
          "type": "string",
          "description": "Item SKU"
        },
        "qty_to_deduct": {
          "type": "number",
          "description": "Quantity which will be deducted for this source"
        },
        "qty_available": {
          "type": "number",
          "description": "Available quantity for this source"
        },
        "extension_attributes": {
          "$ref": "#/definitions/inventory-source-selection-api-data-source-selection-item-extension-interface"
        }
      },
      "required": [
        "source_code",
        "sku",
        "qty_to_deduct",
        "qty_available"
      ]
    },
    "inventory-source-selection-api-data-source-selection-item-extension-interface": {
      "type": "object",
      "description": "ExtensionInterface class for @see \\Magento\\InventorySourceSelectionApi\\Api\\Data\\SourceSelectionItemInterface"
    },
    "inventory-source-selection-api-data-source-selection-result-extension-interface": {
      "type": "object",
      "description": "ExtensionInterface class for @see \\Magento\\InventorySourceSelectionApi\\Api\\Data\\SourceSelectionResultInterface"
    },
    "sales-rule-data-rule-interface": {
      "type": "object",
      "description": "Interface RuleInterface",
      "properties": {
        "rule_id": {
          "type": "integer",
          "description": "Rule id"
        },
        "name": {
          "type": "string",
          "description": "Rule name"
        },
        "store_labels": {
          "type": "array",
          "description": "Display label",
          "items": {
            "$ref": "#/definitions/sales-rule-data-rule-label-interface"
          }
        },
        "description": {
          "type": "string",
          "description": "Description"
        },
        "website_ids": {
          "type": "array",
          "description": "A list of websites the rule applies to",
          "items": {
            "type": "integer"
          }
        },
        "customer_group_ids": {
          "type": "array",
          "description": "Ids of customer groups that the rule applies to",
          "items": {
            "type": "integer"
          }
        },
        "from_date": {
          "type": "string",
          "description": "The start date when the coupon is active"
        },
        "to_date": {
          "type": "string",
          "description": "The end date when the coupon is active"
        },
        "uses_per_customer": {
          "type": "integer",
          "description": "Number of uses per customer"
        },
        "is_active": {
          "type": "boolean",
          "description": "The coupon is active"
        },
        "condition": {
          "$ref": "#/definitions/sales-rule-data-condition-interface"
        },
        "action_condition": {
          "$ref": "#/definitions/sales-rule-data-condition-interface"
        },
        "stop_rules_processing": {
          "type": "boolean",
          "description": "To stop rule processing"
        },
        "is_advanced": {
          "type": "boolean",
          "description": "Is this field needed"
        },
        "product_ids": {
          "type": "array",
          "description": "Product ids",
          "items": {
            "type": "integer"
          }
        },
        "sort_order": {
          "type": "integer",
          "description": "Sort order"
        },
        "simple_action": {
          "type": "string",
          "description": "Simple action of the rule"
        },
        "discount_amount": {
          "type": "number",
          "description": "Discount amount"
        },
        "discount_qty": {
          "type": "number",
          "description": "Maximum qty discount is applied"
        },
        "discount_step": {
          "type": "integer",
          "description": "Discount step"
        },
        "apply_to_shipping": {
          "type": "boolean",
          "description": "The rule applies to shipping"
        },
        "times_used": {
          "type": "integer",
          "description": "How many times the rule has been used"
        },
        "is_rss": {
          "type": "boolean",
          "description": "Whether the rule is in RSS"
        },
        "coupon_type": {
          "type": "string",
          "description": "Coupon type"
        },
        "use_auto_generation": {
          "type": "boolean",
          "description": "To auto generate coupon"
        },
        "uses_per_coupon": {
          "type": "integer",
          "description": "Limit of uses per coupon"
        },
        "simple_free_shipping": {
          "type": "string",
          "description": "To grant free shipping"
        },
        "extension_attributes": {
          "$ref": "#/definitions/sales-rule-data-rule-extension-interface"
        }
      },
      "required": [
        "website_ids",
        "customer_group_ids",
        "uses_per_customer",
        "is_active",
        "stop_rules_processing",
        "is_advanced",
        "sort_order",
        "discount_amount",
        "discount_step",
        "apply_to_shipping",
        "times_used",
        "is_rss",
        "coupon_type",
        "use_auto_generation",
        "uses_per_coupon"
      ]
    },
    "sales-rule-data-rule-label-interface": {
      "type": "object",
      "description": "Interface RuleLabelInterface",
      "properties": {
        "store_id": {
          "type": "integer",
          "description": "StoreId"
        },
        "store_label": {
          "type": "string",
          "description": "The label for the store"
        },
        "extension_attributes": {
          "$ref": "#/definitions/sales-rule-data-rule-label-extension-interface"
        }
      },
      "required": [
        "store_id",
        "store_label"
      ]
    },
    "sales-rule-data-rule-label-extension-interface": {
      "type": "object",
      "description": "ExtensionInterface class for @see \\Magento\\SalesRule\\Api\\Data\\RuleLabelInterface"
    },
    "sales-rule-data-condition-interface": {
      "type": "object",
      "description": "Interface ConditionInterface",
      "properties": {
        "condition_type": {
          "type": "string",
          "description": "Condition type"
        },
        "conditions": {
          "type": "array",
          "description": "List of conditions",
          "items": {
            "$ref": "#/definitions/sales-rule-data-condition-interface"
          }
        },
        "aggregator_type": {
          "type": "string",
          "description": "The aggregator type"
        },
        "operator": {
          "type": "string",
          "description": "The operator of the condition"
        },
        "attribute_name": {
          "type": "string",
          "description": "The attribute name of the condition"
        },
        "value": {
          "type": "string",
          "description": "The value of the condition"
        },
        "extension_attributes": {
          "$ref": "#/definitions/sales-rule-data-condition-extension-interface"
        }
      },
      "required": [
        "condition_type",
        "operator",
        "value"
      ]
    },
    "sales-rule-data-condition-extension-interface": {
      "type": "object",
      "description": "ExtensionInterface class for @see \\Magento\\SalesRule\\Api\\Data\\ConditionInterface"
    },
    "sales-rule-data-rule-extension-interface": {
      "type": "object",
      "description": "ExtensionInterface class for @see \\Magento\\SalesRule\\Api\\Data\\RuleInterface"
    },
    "sales-rule-data-rule-search-result-interface": {
      "type": "object",
      "description": "",
      "properties": {
        "items": {
          "type": "array",
          "description": "Rules.",
          "items": {
            "$ref": "#/definitions/sales-rule-data-rule-interface"
          }
        },
        "search_criteria": {
          "$ref": "#/definitions/framework-search-criteria-interface"
        },
        "total_count": {
          "type": "integer",
          "description": "Total count."
        }
      },
      "required": [
        "items",
        "search_criteria",
        "total_count"
      ]
    },
    "sales-rule-data-coupon-interface": {
      "type": "object",
      "description": "Interface CouponInterface",
      "properties": {
        "coupon_id": {
          "type": "integer",
          "description": "Coupon id"
        },
        "rule_id": {
          "type": "integer",
          "description": "The id of the rule associated with the coupon"
        },
        "code": {
          "type": "string",
          "description": "Coupon code"
        },
        "usage_limit": {
          "type": "integer",
          "description": "Usage limit"
        },
        "usage_per_customer": {
          "type": "integer",
          "description": "Usage limit per customer"
        },
        "times_used": {
          "type": "integer",
          "description": "The number of times the coupon has been used"
        },
        "expiration_date": {
          "type": "string",
          "description": "Expiration date"
        },
        "is_primary": {
          "type": "boolean",
          "description": "The coupon is primary coupon for the rule that it's associated with"
        },
        "created_at": {
          "type": "string",
          "description": "When the coupon is created"
        },
        "type": {
          "type": "integer",
          "description": "Of coupon"
        },
        "extension_attributes": {
          "$ref": "#/definitions/sales-rule-data-coupon-extension-interface"
        }
      },
      "required": [
        "rule_id",
        "times_used",
        "is_primary"
      ]
    },
    "sales-rule-data-coupon-extension-interface": {
      "type": "object",
      "description": "ExtensionInterface class for @see \\Magento\\SalesRule\\Api\\Data\\CouponInterface"
    },
    "sales-rule-data-coupon-search-result-interface": {
      "type": "object",
      "description": "",
      "properties": {
        "items": {
          "type": "array",
          "description": "Rules.",
          "items": {
            "$ref": "#/definitions/sales-rule-data-coupon-interface"
          }
        },
        "search_criteria": {
          "$ref": "#/definitions/framework-search-criteria-interface"
        },
        "total_count": {
          "type": "integer",
          "description": "Total count."
        }
      },
      "required": [
        "items",
        "search_criteria",
        "total_count"
      ]
    },
    "sales-rule-data-coupon-generation-spec-interface": {
      "type": "object",
      "description": "CouponGenerationSpecInterface",
      "properties": {
        "rule_id": {
          "type": "integer",
          "description": "The id of the rule associated with the coupon"
        },
        "format": {
          "type": "string",
          "description": "Format of generated coupon code"
        },
        "quantity": {
          "type": "integer",
          "description": "Of coupons to generate"
        },
        "length": {
          "type": "integer",
          "description": "Length of coupon code"
        },
        "prefix": {
          "type": "string",
          "description": "The prefix"
        },
        "suffix": {
          "type": "string",
          "description": "The suffix"
        },
        "delimiter_at_every": {
          "type": "integer",
          "description": "The spacing where the delimiter should exist"
        },
        "delimiter": {
          "type": "string",
          "description": "The delimiter"
        },
        "extension_attributes": {
          "$ref": "#/definitions/sales-rule-data-coupon-generation-spec-extension-interface"
        }
      },
      "required": [
        "rule_id",
        "format",
        "quantity",
        "length"
      ]
    },
    "sales-rule-data-coupon-generation-spec-extension-interface": {
      "type": "object",
      "description": "ExtensionInterface class for @see \\Magento\\SalesRule\\Api\\Data\\CouponGenerationSpecInterface"
    },
    "sales-rule-data-coupon-mass-delete-result-interface": {
      "type": "object",
      "description": "Coupon mass delete results interface.",
      "properties": {
        "failed_items": {
          "type": "array",
          "description": "List of failed items.",
          "items": {
            "type": "string"
          }
        },
        "missing_items": {
          "type": "array",
          "description": "List of missing items.",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "failed_items",
        "missing_items"
      ]
    },
    "checkout-agreements-data-agreement-interface": {
      "type": "object",
      "description": "Interface AgreementInterface",
      "properties": {
        "agreement_id": {
          "type": "integer",
          "description": "Agreement ID."
        },
        "name": {
          "type": "string",
          "description": "Agreement name."
        },
        "content": {
          "type": "string",
          "description": "Agreement content."
        },
        "content_height": {
          "type": "string",
          "description": "Agreement content height. Otherwise, null."
        },
        "checkbox_text": {
          "type": "string",
          "description": "Agreement checkbox text."
        },
        "is_active": {
          "type": "boolean",
          "description": "Agreement status."
        },
        "is_html": {
          "type": "boolean",
          "description": "* true - HTML. * false - plain text."
        },
        "mode": {
          "type": "integer",
          "description": "The agreement applied mode."
        },
        "extension_attributes": {
          "$ref": "#/definitions/checkout-agreements-data-agreement-extension-interface"
        }
      },
      "required": [
        "agreement_id",
        "name",
        "content",
        "checkbox_text",
        "is_active",
        "is_html",
        "mode"
      ]
    },
    "checkout-agreements-data-agreement-extension-interface": {
      "type": "object",
      "description": "ExtensionInterface class for @see \\Magento\\CheckoutAgreements\\Api\\Data\\AgreementInterface"
    },
    "m-sp-two-factor-auth-provider-interface": {
      "type": "object",
      "description": "",
      "properties": {
        "enabled": {
          "type": "boolean",
          "description": "True if this provider has been enabled by admin"
        },
        "engine": {
          "$ref": "#/definitions/m-sp-two-factor-auth-engine-interface"
        },
        "code": {
          "type": "string",
          "description": "Provider code"
        },
        "name": {
          "type": "string",
          "description": "Provider name"
        },
        "icon": {
          "type": "string",
          "description": "Icon"
        },
        "reset_allowed": {
          "type": "boolean",
          "description": "True if this provider configuration can be reset"
        },
        "trusted_devices_allowed": {
          "type": "boolean",
          "description": "True if this provider allows trusted devices"
        },
        "configure_action": {
          "type": "string",
          "description": "Configure action"
        },
        "auth_action": {
          "type": "string",
          "description": "Auth action"
        },
        "extra_actions": {
          "type": "array",
          "description": "Allowed extra actions",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "enabled",
        "engine",
        "code",
        "name",
        "icon",
        "reset_allowed",
        "trusted_devices_allowed",
        "configure_action",
        "auth_action",
        "extra_actions"
      ]
    },
    "m-sp-two-factor-auth-engine-interface": {
      "type": "object",
      "description": "",
      "properties": {
        "enabled": {
          "type": "boolean",
          "description": "True if this provider has been enabled by admin"
        },
        "trusted_devices_allowed": {
          "type": "boolean",
          "description": "True if this provider allows trusted devices"
        }
      },
      "required": [
        "enabled",
        "trusted_devices_allowed"
      ]
    },
    "m-sp-two-factor-auth-data-trusted-interface": {
      "type": "object",
      "description": "",
      "properties": {
        "id": {
          "type": "integer",
          "description": "Value for msp_tfa_trusted_id"
        },
        "date_time": {
          "type": "string",
          "description": "Value for date_time"
        },
        "user_id": {
          "type": "integer",
          "description": "Value for user_id"
        },
        "device_name": {
          "type": "string",
          "description": "Value for device_name"
        },
        "last_ip": {
          "type": "string",
          "description": "Value for last_ip"
        },
        "user_agent": {
          "type": "string",
          "description": "Value for user_agent"
        },
        "extension_attributes": {
          "$ref": "#/definitions/m-sp-two-factor-auth-data-trusted-extension-interface"
        }
      },
      "required": [
        "id",
        "date_time",
        "user_id",
        "device_name",
        "last_ip",
        "user_agent"
      ]
    },
    "m-sp-two-factor-auth-data-trusted-extension-interface": {
      "type": "object",
      "description": "ExtensionInterface class for @see \\MSP\\TwoFactorAuth\\Api\\Data\\TrustedInterface"
    },
    "temando-shipping-data-delivery-collection-point-search-request-interface": {
      "type": "object",
      "description": "Temando Collection Point Search Request Interface",
      "properties": {
        "shipping_address_id": {
          "type": "integer"
        },
        "country_id": {
          "type": "string"
        },
        "postcode": {
          "type": "string"
        },
        "pending": {
          "type": "boolean"
        }
      },
      "required": [
        "shipping_address_id",
        "country_id",
        "postcode",
        "pending"
      ]
    },
    "temando-shipping-data-delivery-quote-collection-point-interface": {
      "type": "object",
      "description": "Temando Quote Collection Point Interface – Checkout/Quoting",
      "properties": {
        "entity_id": {
          "type": "integer"
        },
        "collection_point_id": {
          "type": "string"
        },
        "recipient_address_id": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "country": {
          "type": "string"
        },
        "region": {
          "type": "string"
        },
        "postcode": {
          "type": "string"
        },
        "city": {
          "type": "string"
        },
        "street": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "distance": {
          "type": "integer"
        },
        "opening_hours": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "shipping_experiences": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "selected": {
          "type": "boolean"
        }
      },
      "required": [
        "entity_id",
        "collection_point_id",
        "recipient_address_id",
        "name",
        "country",
        "region",
        "postcode",
        "city",
        "street",
        "distance",
        "opening_hours",
        "shipping_experiences",
        "selected"
      ]
    }
  }
}
